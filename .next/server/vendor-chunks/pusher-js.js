/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pusher-js";
exports.ids = ["vendor-chunks/pusher-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/pusher-js/dist/node/pusher.js":
/*!****************************************************!*\
  !*** ./node_modules/pusher-js/dist/node/pusher.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * Pusher JavaScript Library v8.4.0-rc2\n * https://pusher.com/\n *\n * Copyright 2020, Pusher\n * Released under the MIT licence.\n */ module.exports = /******/ function(modules) {\n    /******/ // The module cache\n    /******/ var installedModules = {};\n    /******/ /******/ // The require function\n    /******/ function __nested_webpack_require_313__(moduleId) {\n        /******/ /******/ // Check if module is in cache\n        /******/ if (installedModules[moduleId]) {\n            /******/ return installedModules[moduleId].exports;\n        /******/ }\n        /******/ // Create a new module (and put it into the cache)\n        /******/ var module1 = installedModules[moduleId] = {\n            /******/ i: moduleId,\n            /******/ l: false,\n            /******/ exports: {}\n        };\n        /******/ /******/ // Execute the module function\n        /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_313__);\n        /******/ /******/ // Flag the module as loaded\n        /******/ module1.l = true;\n        /******/ /******/ // Return the exports of the module\n        /******/ return module1.exports;\n    /******/ }\n    /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n    /******/ __nested_webpack_require_313__.m = modules;\n    /******/ /******/ // expose the module cache\n    /******/ __nested_webpack_require_313__.c = installedModules;\n    /******/ /******/ // define getter function for harmony exports\n    /******/ __nested_webpack_require_313__.d = function(exports, name, getter) {\n        /******/ if (!__nested_webpack_require_313__.o(exports, name)) {\n            /******/ Object.defineProperty(exports, name, {\n                enumerable: true,\n                get: getter\n            });\n        /******/ }\n    /******/ };\n    /******/ /******/ // define __esModule on exports\n    /******/ __nested_webpack_require_313__.r = function(exports) {\n        /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n            /******/ Object.defineProperty(exports, Symbol.toStringTag, {\n                value: \"Module\"\n            });\n        /******/ }\n        /******/ Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n    /******/ };\n    /******/ /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/ __nested_webpack_require_313__.t = function(value, mode) {\n        /******/ if (mode & 1) value = __nested_webpack_require_313__(value);\n        /******/ if (mode & 8) return value;\n        /******/ if (mode & 4 && typeof value === \"object\" && value && value.__esModule) return value;\n        /******/ var ns = Object.create(null);\n        /******/ __nested_webpack_require_313__.r(ns);\n        /******/ Object.defineProperty(ns, \"default\", {\n            enumerable: true,\n            value: value\n        });\n        /******/ if (mode & 2 && typeof value != \"string\") for(var key in value)__nested_webpack_require_313__.d(ns, key, (function(key) {\n            return value[key];\n        }).bind(null, key));\n        /******/ return ns;\n    /******/ };\n    /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/ __nested_webpack_require_313__.n = function(module1) {\n        /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n            return module1[\"default\"];\n        } : /******/ function getModuleExports() {\n            return module1;\n        };\n        /******/ __nested_webpack_require_313__.d(getter, \"a\", getter);\n        /******/ return getter;\n    /******/ };\n    /******/ /******/ // Object.prototype.hasOwnProperty.call\n    /******/ __nested_webpack_require_313__.o = function(object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/ /******/ // __webpack_public_path__\n    /******/ __nested_webpack_require_313__.p = \"\";\n    /******/ /******/ /******/ // Load entry module and return exports\n    /******/ return __nested_webpack_require_313__(__nested_webpack_require_313__.s = 21);\n/******/ }([\n    /* 0 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! util */ \"util\");\n    /***/ },\n    /* 1 */ /***/ function(module1, exports, __nested_webpack_require_4300__) {\n        /* eslint-disable node/no-deprecated-api */ var buffer = __nested_webpack_require_4300__(22);\n        var Buffer1 = buffer.Buffer;\n        // alternative to using Object.keys for old browsers\n        function copyProps(src, dst) {\n            for(var key in src){\n                dst[key] = src[key];\n            }\n        }\n        if (Buffer1.from && Buffer1.alloc && Buffer1.allocUnsafe && Buffer1.allocUnsafeSlow) {\n            module1.exports = buffer;\n        } else {\n            // Copy properties from require('buffer')\n            copyProps(buffer, exports);\n            exports.Buffer = SafeBuffer;\n        }\n        function SafeBuffer(arg, encodingOrOffset, length) {\n            return Buffer1(arg, encodingOrOffset, length);\n        }\n        // Copy static methods from Buffer\n        copyProps(Buffer1, SafeBuffer);\n        SafeBuffer.from = function(arg, encodingOrOffset, length) {\n            if (typeof arg === \"number\") {\n                throw new TypeError(\"Argument must not be a number\");\n            }\n            return Buffer1(arg, encodingOrOffset, length);\n        };\n        SafeBuffer.alloc = function(size, fill, encoding) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            var buf = Buffer1(size);\n            if (fill !== undefined) {\n                if (typeof encoding === \"string\") {\n                    buf.fill(fill, encoding);\n                } else {\n                    buf.fill(fill);\n                }\n            } else {\n                buf.fill(0);\n            }\n            return buf;\n        };\n        SafeBuffer.allocUnsafe = function(size) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            return Buffer1(size);\n        };\n        SafeBuffer.allocUnsafeSlow = function(size) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            return buffer.SlowBuffer(size);\n        };\n    /***/ },\n    /* 2 */ /***/ function(module1, exports, __nested_webpack_require_6462__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_6462__(1).Buffer, Emitter = __nested_webpack_require_6462__(23).EventEmitter, util = __nested_webpack_require_6462__(0), streams = __nested_webpack_require_6462__(24), Headers = __nested_webpack_require_6462__(9), Reader = __nested_webpack_require_6462__(25);\n        var Base = function(request, url, options) {\n            Emitter.call(this);\n            Base.validateOptions(options || {}, [\n                \"maxLength\",\n                \"masking\",\n                \"requireMasking\",\n                \"protocols\"\n            ]);\n            this._request = request;\n            this._reader = new Reader();\n            this._options = options || {};\n            this._maxLength = this._options.maxLength || this.MAX_LENGTH;\n            this._headers = new Headers();\n            this.__queue = [];\n            this.readyState = 0;\n            this.url = url;\n            this.io = new streams.IO(this);\n            this.messages = new streams.Messages(this);\n            this._bindEventListeners();\n        };\n        util.inherits(Base, Emitter);\n        Base.isWebSocket = function(request) {\n            var connection = request.headers.connection || \"\", upgrade = request.headers.upgrade || \"\";\n            return request.method === \"GET\" && connection.toLowerCase().split(/ *, */).indexOf(\"upgrade\") >= 0 && upgrade.toLowerCase() === \"websocket\";\n        };\n        Base.validateOptions = function(options, validKeys) {\n            for(var key in options){\n                if (validKeys.indexOf(key) < 0) throw new Error(\"Unrecognized option: \" + key);\n            }\n        };\n        var instance = {\n            // This is 64MB, small enough for an average VPS to handle without\n            // crashing from process out of memory\n            MAX_LENGTH: 0x3ffffff,\n            STATES: [\n                \"connecting\",\n                \"open\",\n                \"closing\",\n                \"closed\"\n            ],\n            _bindEventListeners: function() {\n                var self1 = this;\n                // Protocol errors are informational and do not have to be handled\n                this.messages.on(\"error\", function() {});\n                this.on(\"message\", function(event) {\n                    var messages = self1.messages;\n                    if (messages.readable) messages.emit(\"data\", event.data);\n                });\n                this.on(\"error\", function(error) {\n                    var messages = self1.messages;\n                    if (messages.readable) messages.emit(\"error\", error);\n                });\n                this.on(\"close\", function() {\n                    var messages = self1.messages;\n                    if (!messages.readable) return;\n                    messages.readable = messages.writable = false;\n                    messages.emit(\"end\");\n                });\n            },\n            getState: function() {\n                return this.STATES[this.readyState] || null;\n            },\n            addExtension: function(extension) {\n                return false;\n            },\n            setHeader: function(name, value) {\n                if (this.readyState > 0) return false;\n                this._headers.set(name, value);\n                return true;\n            },\n            start: function() {\n                if (this.readyState !== 0) return false;\n                if (!Base.isWebSocket(this._request)) return this._failHandshake(new Error(\"Not a WebSocket request\"));\n                var response;\n                try {\n                    response = this._handshakeResponse();\n                } catch (error) {\n                    return this._failHandshake(error);\n                }\n                this._write(response);\n                if (this._stage !== -1) this._open();\n                return true;\n            },\n            _failHandshake: function(error) {\n                var headers = new Headers();\n                headers.set(\"Content-Type\", \"text/plain\");\n                headers.set(\"Content-Length\", Buffer1.byteLength(error.message, \"utf8\"));\n                headers = [\n                    \"HTTP/1.1 400 Bad Request\",\n                    headers.toString(),\n                    error.message\n                ];\n                this._write(Buffer1.from(headers.join(\"\\r\\n\"), \"utf8\"));\n                this._fail(\"protocol_error\", error.message);\n                return false;\n            },\n            text: function(message) {\n                return this.frame(message);\n            },\n            binary: function(message) {\n                return false;\n            },\n            ping: function() {\n                return false;\n            },\n            pong: function() {\n                return false;\n            },\n            close: function(reason, code) {\n                if (this.readyState !== 1) return false;\n                this.readyState = 3;\n                this.emit(\"close\", new Base.CloseEvent(null, null));\n                return true;\n            },\n            _open: function() {\n                this.readyState = 1;\n                this.__queue.forEach(function(args) {\n                    this.frame.apply(this, args);\n                }, this);\n                this.__queue = [];\n                this.emit(\"open\", new Base.OpenEvent());\n            },\n            _queue: function(message) {\n                this.__queue.push(message);\n                return true;\n            },\n            _write: function(chunk) {\n                var io = this.io;\n                if (io.readable) io.emit(\"data\", chunk);\n            },\n            _fail: function(type, message) {\n                this.readyState = 2;\n                this.emit(\"error\", new Error(message));\n                this.close();\n            }\n        };\n        for(var key in instance)Base.prototype[key] = instance[key];\n        Base.ConnectEvent = function() {};\n        Base.OpenEvent = function() {};\n        Base.CloseEvent = function(code, reason) {\n            this.code = code;\n            this.reason = reason;\n        };\n        Base.MessageEvent = function(data) {\n            this.data = data;\n        };\n        Base.PingEvent = function(data) {\n            this.data = data;\n        };\n        Base.PongEvent = function(data) {\n            this.data = data;\n        };\n        module1.exports = Base;\n    /***/ },\n    /* 3 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! crypto */ \"crypto\");\n    /***/ },\n    /* 4 */ /***/ function(module1, exports, __nested_webpack_require_12940__) {\n        \"use strict\";\n        // Protocol references:\n        //\n        // * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\n        // * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\n        // * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17\n        var Base = __nested_webpack_require_12940__(2), Client = __nested_webpack_require_12940__(26), Server = __nested_webpack_require_12940__(37);\n        var Driver = {\n            client: function(url, options) {\n                options = options || {};\n                if (options.masking === undefined) options.masking = true;\n                return new Client(url, options);\n            },\n            server: function(options) {\n                options = options || {};\n                if (options.requireMasking === undefined) options.requireMasking = true;\n                return new Server(options);\n            },\n            http: function() {\n                return Server.http.apply(Server, arguments);\n            },\n            isSecureRequest: function(request) {\n                return Server.isSecureRequest(request);\n            },\n            isWebSocket: function(request) {\n                return Base.isWebSocket(request);\n            },\n            validateOptions: function(options, validKeys) {\n                Base.validateOptions(options, validKeys);\n            }\n        };\n        module1.exports = Driver;\n    /***/ },\n    /* 5 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! stream */ \"stream\");\n    /***/ },\n    /* 6 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! url */ \"url\");\n    /***/ },\n    /* 7 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        var Event = function(eventType, options) {\n            this.type = eventType;\n            for(var key in options)this[key] = options[key];\n        };\n        Event.prototype.initEvent = function(eventType, canBubble, cancelable) {\n            this.type = eventType;\n            this.bubbles = canBubble;\n            this.cancelable = cancelable;\n        };\n        Event.prototype.stopPropagation = function() {};\n        Event.prototype.preventDefault = function() {};\n        Event.CAPTURING_PHASE = 1;\n        Event.AT_TARGET = 2;\n        Event.BUBBLING_PHASE = 3;\n        module1.exports = Event;\n    /***/ },\n    /* 8 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        // Copyright (C) 2016 Dmitry Chestnykh\n        // MIT License. See LICENSE file for details.\n        var __extends = this && this.__extends || function() {\n            var extendStatics = function(d, b) {\n                extendStatics = Object.setPrototypeOf || ({\n                    __proto__: []\n                }) instanceof Array && function(d, b) {\n                    d.__proto__ = b;\n                } || function(d, b) {\n                    for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n                };\n                return extendStatics(d, b);\n            };\n            return function(d, b) {\n                extendStatics(d, b);\n                function __() {\n                    this.constructor = d;\n                }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        }();\n        Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n        /**\n * Package base64 implements Base64 encoding and decoding.\n */ // Invalid character used in decoding to indicate\n        // that the character to decode is out of range of\n        // alphabet and cannot be decoded.\n        var INVALID_BYTE = 256;\n        /**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */ var Coder = /** @class */ function() {\n            // TODO(dchest): methods to encode chunk-by-chunk.\n            function Coder(_paddingCharacter) {\n                if (_paddingCharacter === void 0) {\n                    _paddingCharacter = \"=\";\n                }\n                this._paddingCharacter = _paddingCharacter;\n            }\n            Coder.prototype.encodedLength = function(length) {\n                if (!this._paddingCharacter) {\n                    return (length * 8 + 5) / 6 | 0;\n                }\n                return (length + 2) / 3 * 4 | 0;\n            };\n            Coder.prototype.encode = function(data) {\n                var out = \"\";\n                var i = 0;\n                for(; i < data.length - 2; i += 3){\n                    var c = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n                    out += this._encodeByte(c >>> 3 * 6 & 63);\n                    out += this._encodeByte(c >>> 2 * 6 & 63);\n                    out += this._encodeByte(c >>> 1 * 6 & 63);\n                    out += this._encodeByte(c >>> 0 * 6 & 63);\n                }\n                var left = data.length - i;\n                if (left > 0) {\n                    var c = data[i] << 16 | (left === 2 ? data[i + 1] << 8 : 0);\n                    out += this._encodeByte(c >>> 3 * 6 & 63);\n                    out += this._encodeByte(c >>> 2 * 6 & 63);\n                    if (left === 2) {\n                        out += this._encodeByte(c >>> 1 * 6 & 63);\n                    } else {\n                        out += this._paddingCharacter || \"\";\n                    }\n                    out += this._paddingCharacter || \"\";\n                }\n                return out;\n            };\n            Coder.prototype.maxDecodedLength = function(length) {\n                if (!this._paddingCharacter) {\n                    return (length * 6 + 7) / 8 | 0;\n                }\n                return length / 4 * 3 | 0;\n            };\n            Coder.prototype.decodedLength = function(s) {\n                return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n            };\n            Coder.prototype.decode = function(s) {\n                if (s.length === 0) {\n                    return new Uint8Array(0);\n                }\n                var paddingLength = this._getPaddingLength(s);\n                var length = s.length - paddingLength;\n                var out = new Uint8Array(this.maxDecodedLength(length));\n                var op = 0;\n                var i = 0;\n                var haveBad = 0;\n                var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n                for(; i < length - 4; i += 4){\n                    v0 = this._decodeChar(s.charCodeAt(i + 0));\n                    v1 = this._decodeChar(s.charCodeAt(i + 1));\n                    v2 = this._decodeChar(s.charCodeAt(i + 2));\n                    v3 = this._decodeChar(s.charCodeAt(i + 3));\n                    out[op++] = v0 << 2 | v1 >>> 4;\n                    out[op++] = v1 << 4 | v2 >>> 2;\n                    out[op++] = v2 << 6 | v3;\n                    haveBad |= v0 & INVALID_BYTE;\n                    haveBad |= v1 & INVALID_BYTE;\n                    haveBad |= v2 & INVALID_BYTE;\n                    haveBad |= v3 & INVALID_BYTE;\n                }\n                if (i < length - 1) {\n                    v0 = this._decodeChar(s.charCodeAt(i));\n                    v1 = this._decodeChar(s.charCodeAt(i + 1));\n                    out[op++] = v0 << 2 | v1 >>> 4;\n                    haveBad |= v0 & INVALID_BYTE;\n                    haveBad |= v1 & INVALID_BYTE;\n                }\n                if (i < length - 2) {\n                    v2 = this._decodeChar(s.charCodeAt(i + 2));\n                    out[op++] = v1 << 4 | v2 >>> 2;\n                    haveBad |= v2 & INVALID_BYTE;\n                }\n                if (i < length - 3) {\n                    v3 = this._decodeChar(s.charCodeAt(i + 3));\n                    out[op++] = v2 << 6 | v3;\n                    haveBad |= v3 & INVALID_BYTE;\n                }\n                if (haveBad !== 0) {\n                    throw new Error(\"Base64Coder: incorrect characters for decoding\");\n                }\n                return out;\n            };\n            // Standard encoding have the following encoded/decoded ranges,\n            // which we need to convert between.\n            //\n            // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n            // Index:   0 - 25                    26 - 51              52 - 61   62  63\n            // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n            //\n            // Encode 6 bits in b into a new character.\n            Coder.prototype._encodeByte = function(b) {\n                // Encoding uses constant time operations as follows:\n                //\n                // 1. Define comparison of A with B using (A - B) >>> 8:\n                //          if A > B, then result is positive integer\n                //          if A <= B, then result is 0\n                //\n                // 2. Define selection of C or 0 using bitwise AND: X & C:\n                //          if X == 0, then result is 0\n                //          if X != 0, then result is C\n                //\n                // 3. Start with the smallest comparison (b >= 0), which is always\n                //    true, so set the result to the starting ASCII value (65).\n                //\n                // 4. Continue comparing b to higher ASCII values, and selecting\n                //    zero if comparison isn't true, otherwise selecting a value\n                //    to add to result, which:\n                //\n                //          a) undoes the previous addition\n                //          b) provides new value to add\n                //\n                var result = b;\n                // b >= 0\n                result += 65;\n                // b > 25\n                result += 25 - b >>> 8 & 0 - 65 - 26 + 97;\n                // b > 51\n                result += 51 - b >>> 8 & 26 - 97 - 52 + 48;\n                // b > 61\n                result += 61 - b >>> 8 & 52 - 48 - 62 + 43;\n                // b > 62\n                result += 62 - b >>> 8 & 62 - 43 - 63 + 47;\n                return String.fromCharCode(result);\n            };\n            // Decode a character code into a byte.\n            // Must return 256 if character is out of alphabet range.\n            Coder.prototype._decodeChar = function(c) {\n                // Decoding works similar to encoding: using the same comparison\n                // function, but now it works on ranges: result is always incremented\n                // by value, but this value becomes zero if the range is not\n                // satisfied.\n                //\n                // Decoding starts with invalid value, 256, which is then\n                // subtracted when the range is satisfied. If none of the ranges\n                // apply, the function returns 256, which is then checked by\n                // the caller to throw error.\n                var result = INVALID_BYTE; // start with invalid character\n                // c == 43 (c > 42 and c < 44)\n                result += (42 - c & c - 44) >>> 8 & -INVALID_BYTE + c - 43 + 62;\n                // c == 47 (c > 46 and c < 48)\n                result += (46 - c & c - 48) >>> 8 & -INVALID_BYTE + c - 47 + 63;\n                // c > 47 and c < 58\n                result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;\n                // c > 64 and c < 91\n                result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;\n                // c > 96 and c < 123\n                result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;\n                return result;\n            };\n            Coder.prototype._getPaddingLength = function(s) {\n                var paddingLength = 0;\n                if (this._paddingCharacter) {\n                    for(var i = s.length - 1; i >= 0; i--){\n                        if (s[i] !== this._paddingCharacter) {\n                            break;\n                        }\n                        paddingLength++;\n                    }\n                    if (s.length < 4 || paddingLength > 2) {\n                        throw new Error(\"Base64Coder: incorrect padding\");\n                    }\n                }\n                return paddingLength;\n            };\n            return Coder;\n        }();\n        exports.Coder = Coder;\n        var stdCoder = new Coder();\n        function encode(data) {\n            return stdCoder.encode(data);\n        }\n        exports.encode = encode;\n        function decode(s) {\n            return stdCoder.decode(s);\n        }\n        exports.decode = decode;\n        /**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */ var URLSafeCoder = /** @class */ function(_super) {\n            __extends(URLSafeCoder, _super);\n            function URLSafeCoder() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            // URL-safe encoding have the following encoded/decoded ranges:\n            //\n            // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n            // Index:   0 - 25                    26 - 51              52 - 61   62  63\n            // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n            //\n            URLSafeCoder.prototype._encodeByte = function(b) {\n                var result = b;\n                // b >= 0\n                result += 65;\n                // b > 25\n                result += 25 - b >>> 8 & 0 - 65 - 26 + 97;\n                // b > 51\n                result += 51 - b >>> 8 & 26 - 97 - 52 + 48;\n                // b > 61\n                result += 61 - b >>> 8 & 52 - 48 - 62 + 45;\n                // b > 62\n                result += 62 - b >>> 8 & 62 - 45 - 63 + 95;\n                return String.fromCharCode(result);\n            };\n            URLSafeCoder.prototype._decodeChar = function(c) {\n                var result = INVALID_BYTE;\n                // c == 45 (c > 44 and c < 46)\n                result += (44 - c & c - 46) >>> 8 & -INVALID_BYTE + c - 45 + 62;\n                // c == 95 (c > 94 and c < 96)\n                result += (94 - c & c - 96) >>> 8 & -INVALID_BYTE + c - 95 + 63;\n                // c > 47 and c < 58\n                result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;\n                // c > 64 and c < 91\n                result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;\n                // c > 96 and c < 123\n                result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;\n                return result;\n            };\n            return URLSafeCoder;\n        }(Coder);\n        exports.URLSafeCoder = URLSafeCoder;\n        var urlSafeCoder = new URLSafeCoder();\n        function encodeURLSafe(data) {\n            return urlSafeCoder.encode(data);\n        }\n        exports.encodeURLSafe = encodeURLSafe;\n        function decodeURLSafe(s) {\n            return urlSafeCoder.decode(s);\n        }\n        exports.decodeURLSafe = decodeURLSafe;\n        exports.encodedLength = function(length) {\n            return stdCoder.encodedLength(length);\n        };\n        exports.maxDecodedLength = function(length) {\n            return stdCoder.maxDecodedLength(length);\n        };\n        exports.decodedLength = function(s) {\n            return stdCoder.decodedLength(s);\n        };\n    /***/ },\n    /* 9 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        var Headers = function() {\n            this.clear();\n        };\n        Headers.prototype.ALLOWED_DUPLICATES = [\n            \"set-cookie\",\n            \"set-cookie2\",\n            \"warning\",\n            \"www-authenticate\"\n        ];\n        Headers.prototype.clear = function() {\n            this._sent = {};\n            this._lines = [];\n        };\n        Headers.prototype.set = function(name, value) {\n            if (value === undefined) return;\n            name = this._strip(name);\n            value = this._strip(value);\n            var key = name.toLowerCase();\n            if (!this._sent.hasOwnProperty(key) || this.ALLOWED_DUPLICATES.indexOf(key) >= 0) {\n                this._sent[key] = true;\n                this._lines.push(name + \": \" + value + \"\\r\\n\");\n            }\n        };\n        Headers.prototype.toString = function() {\n            return this._lines.join(\"\");\n        };\n        Headers.prototype._strip = function(string) {\n            return string.toString().replace(/^ */, \"\").replace(/ *$/, \"\");\n        };\n        module1.exports = Headers;\n    /***/ },\n    /* 10 */ /***/ function(module1, exports, __nested_webpack_require_29531__) {\n        \"use strict\";\n        var NodeHTTPParser = __nested_webpack_require_29531__(27).HTTPParser, Buffer1 = __nested_webpack_require_29531__(1).Buffer;\n        var TYPES = {\n            request: NodeHTTPParser.REQUEST || \"request\",\n            response: NodeHTTPParser.RESPONSE || \"response\"\n        };\n        var HttpParser = function(type) {\n            this._type = type;\n            this._parser = new NodeHTTPParser(TYPES[type]);\n            this._complete = false;\n            this.headers = {};\n            var current = null, self1 = this;\n            this._parser.onHeaderField = function(b, start, length) {\n                current = b.toString(\"utf8\", start, start + length).toLowerCase();\n            };\n            this._parser.onHeaderValue = function(b, start, length) {\n                var value = b.toString(\"utf8\", start, start + length);\n                if (self1.headers.hasOwnProperty(current)) self1.headers[current] += \", \" + value;\n                else self1.headers[current] = value;\n            };\n            this._parser.onHeadersComplete = this._parser[NodeHTTPParser.kOnHeadersComplete] = function(majorVersion, minorVersion, headers, method, pathname, statusCode) {\n                var info = arguments[0];\n                if (typeof info === \"object\") {\n                    method = info.method;\n                    pathname = info.url;\n                    statusCode = info.statusCode;\n                    headers = info.headers;\n                }\n                self1.method = typeof method === \"number\" ? HttpParser.METHODS[method] : method;\n                self1.statusCode = statusCode;\n                self1.url = pathname;\n                if (!headers) return;\n                for(var i = 0, n = headers.length, key, value; i < n; i += 2){\n                    key = headers[i].toLowerCase();\n                    value = headers[i + 1];\n                    if (self1.headers.hasOwnProperty(key)) self1.headers[key] += \", \" + value;\n                    else self1.headers[key] = value;\n                }\n                self1._complete = true;\n            };\n        };\n        HttpParser.METHODS = {\n            0: \"DELETE\",\n            1: \"GET\",\n            2: \"HEAD\",\n            3: \"POST\",\n            4: \"PUT\",\n            5: \"CONNECT\",\n            6: \"OPTIONS\",\n            7: \"TRACE\",\n            8: \"COPY\",\n            9: \"LOCK\",\n            10: \"MKCOL\",\n            11: \"MOVE\",\n            12: \"PROPFIND\",\n            13: \"PROPPATCH\",\n            14: \"SEARCH\",\n            15: \"UNLOCK\",\n            16: \"BIND\",\n            17: \"REBIND\",\n            18: \"UNBIND\",\n            19: \"ACL\",\n            20: \"REPORT\",\n            21: \"MKACTIVITY\",\n            22: \"CHECKOUT\",\n            23: \"MERGE\",\n            24: \"M-SEARCH\",\n            25: \"NOTIFY\",\n            26: \"SUBSCRIBE\",\n            27: \"UNSUBSCRIBE\",\n            28: \"PATCH\",\n            29: \"PURGE\",\n            30: \"MKCALENDAR\",\n            31: \"LINK\",\n            32: \"UNLINK\"\n        };\n        var VERSION = process.version ? process.version.match(/[0-9]+/g).map(function(n) {\n            return parseInt(n, 10);\n        }) : [];\n        if (VERSION[0] === 0 && VERSION[1] === 12) {\n            HttpParser.METHODS[16] = \"REPORT\";\n            HttpParser.METHODS[17] = \"MKACTIVITY\";\n            HttpParser.METHODS[18] = \"CHECKOUT\";\n            HttpParser.METHODS[19] = \"MERGE\";\n            HttpParser.METHODS[20] = \"M-SEARCH\";\n            HttpParser.METHODS[21] = \"NOTIFY\";\n            HttpParser.METHODS[22] = \"SUBSCRIBE\";\n            HttpParser.METHODS[23] = \"UNSUBSCRIBE\";\n            HttpParser.METHODS[24] = \"PATCH\";\n            HttpParser.METHODS[25] = \"PURGE\";\n        }\n        HttpParser.prototype.isComplete = function() {\n            return this._complete;\n        };\n        HttpParser.prototype.parse = function(chunk) {\n            var consumed = this._parser.execute(chunk, 0, chunk.length);\n            if (typeof consumed !== \"number\") {\n                this.error = consumed;\n                this._complete = true;\n                return;\n            }\n            if (this._complete) this.body = consumed < chunk.length ? chunk.slice(consumed) : Buffer1.alloc(0);\n        };\n        module1.exports = HttpParser;\n    /***/ },\n    /* 11 */ /***/ function(module1, exports, __nested_webpack_require_33830__) {\n        \"use strict\";\n        var Stream = __nested_webpack_require_33830__(5).Stream, util = __nested_webpack_require_33830__(0), driver = __nested_webpack_require_33830__(4), EventTarget = __nested_webpack_require_33830__(16), Event = __nested_webpack_require_33830__(7);\n        var API = function(options) {\n            options = options || {};\n            driver.validateOptions(options, [\n                \"headers\",\n                \"extensions\",\n                \"maxLength\",\n                \"ping\",\n                \"proxy\",\n                \"tls\",\n                \"ca\"\n            ]);\n            this.readable = this.writable = true;\n            var headers = options.headers;\n            if (headers) {\n                for(var name in headers)this._driver.setHeader(name, headers[name]);\n            }\n            var extensions = options.extensions;\n            if (extensions) {\n                [].concat(extensions).forEach(this._driver.addExtension, this._driver);\n            }\n            this._ping = options.ping;\n            this._pingId = 0;\n            this.readyState = API.CONNECTING;\n            this.bufferedAmount = 0;\n            this.protocol = \"\";\n            this.url = this._driver.url;\n            this.version = this._driver.version;\n            var self1 = this;\n            this._driver.on(\"open\", function(e) {\n                self1._open();\n            });\n            this._driver.on(\"message\", function(e) {\n                self1._receiveMessage(e.data);\n            });\n            this._driver.on(\"close\", function(e) {\n                self1._beginClose(e.reason, e.code);\n            });\n            this._driver.on(\"error\", function(error) {\n                self1._emitError(error.message);\n            });\n            this.on(\"error\", function() {});\n            this._driver.messages.on(\"drain\", function() {\n                self1.emit(\"drain\");\n            });\n            if (this._ping) this._pingTimer = setInterval(function() {\n                self1._pingId += 1;\n                self1.ping(self1._pingId.toString());\n            }, this._ping * 1000);\n            this._configureStream();\n            if (!this._proxy) {\n                this._stream.pipe(this._driver.io);\n                this._driver.io.pipe(this._stream);\n            }\n        };\n        util.inherits(API, Stream);\n        API.CONNECTING = 0;\n        API.OPEN = 1;\n        API.CLOSING = 2;\n        API.CLOSED = 3;\n        API.CLOSE_TIMEOUT = 30000;\n        var instance = {\n            write: function(data) {\n                return this.send(data);\n            },\n            end: function(data) {\n                if (data !== undefined) this.send(data);\n                this.close();\n            },\n            pause: function() {\n                return this._driver.messages.pause();\n            },\n            resume: function() {\n                return this._driver.messages.resume();\n            },\n            send: function(data) {\n                if (this.readyState > API.OPEN) return false;\n                if (!(data instanceof Buffer)) data = String(data);\n                return this._driver.messages.write(data);\n            },\n            ping: function(message, callback) {\n                if (this.readyState > API.OPEN) return false;\n                return this._driver.ping(message, callback);\n            },\n            close: function(code, reason) {\n                if (code === undefined) code = 1000;\n                if (reason === undefined) reason = \"\";\n                if (code !== 1000 && (code < 3000 || code > 4999)) throw new Error(\"Failed to execute 'close' on WebSocket: \" + \"The code must be either 1000, or between 3000 and 4999. \" + code + \" is neither.\");\n                if (this.readyState !== API.CLOSED) this.readyState = API.CLOSING;\n                var self1 = this;\n                this._closeTimer = setTimeout(function() {\n                    self1._beginClose(\"\", 1006);\n                }, API.CLOSE_TIMEOUT);\n                this._driver.close(reason, code);\n            },\n            _configureStream: function() {\n                var self1 = this;\n                this._stream.setTimeout(0);\n                this._stream.setNoDelay(true);\n                [\n                    \"close\",\n                    \"end\"\n                ].forEach(function(event) {\n                    this._stream.on(event, function() {\n                        self1._finalizeClose();\n                    });\n                }, this);\n                this._stream.on(\"error\", function(error) {\n                    self1._emitError(\"Network error: \" + self1.url + \": \" + error.message);\n                    self1._finalizeClose();\n                });\n            },\n            _open: function() {\n                if (this.readyState !== API.CONNECTING) return;\n                this.readyState = API.OPEN;\n                this.protocol = this._driver.protocol || \"\";\n                var event = new Event(\"open\");\n                event.initEvent(\"open\", false, false);\n                this.dispatchEvent(event);\n            },\n            _receiveMessage: function(data) {\n                if (this.readyState > API.OPEN) return false;\n                if (this.readable) this.emit(\"data\", data);\n                var event = new Event(\"message\", {\n                    data: data\n                });\n                event.initEvent(\"message\", false, false);\n                this.dispatchEvent(event);\n            },\n            _emitError: function(message) {\n                if (this.readyState >= API.CLOSING) return;\n                var event = new Event(\"error\", {\n                    message: message\n                });\n                event.initEvent(\"error\", false, false);\n                this.dispatchEvent(event);\n            },\n            _beginClose: function(reason, code) {\n                if (this.readyState === API.CLOSED) return;\n                this.readyState = API.CLOSING;\n                this._closeParams = [\n                    reason,\n                    code\n                ];\n                if (this._stream) {\n                    this._stream.destroy();\n                    if (!this._stream.readable) this._finalizeClose();\n                }\n            },\n            _finalizeClose: function() {\n                if (this.readyState === API.CLOSED) return;\n                this.readyState = API.CLOSED;\n                if (this._closeTimer) clearTimeout(this._closeTimer);\n                if (this._pingTimer) clearInterval(this._pingTimer);\n                if (this._stream) this._stream.end();\n                if (this.readable) this.emit(\"end\");\n                this.readable = this.writable = false;\n                var reason = this._closeParams ? this._closeParams[0] : \"\", code = this._closeParams ? this._closeParams[1] : 1006;\n                var event = new Event(\"close\", {\n                    code: code,\n                    reason: reason\n                });\n                event.initEvent(\"close\", false, false);\n                this.dispatchEvent(event);\n            }\n        };\n        for(var method in instance)API.prototype[method] = instance[method];\n        for(var key in EventTarget)API.prototype[key] = EventTarget[key];\n        module1.exports = API;\n    /***/ },\n    /* 12 */ /***/ function(module1, exports, __nested_webpack_require_41102__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_41102__(1).Buffer, crypto = __nested_webpack_require_41102__(3), util = __nested_webpack_require_41102__(0), Extensions = __nested_webpack_require_41102__(29), Base = __nested_webpack_require_41102__(2), Frame = __nested_webpack_require_41102__(34), Message = __nested_webpack_require_41102__(35);\n        var Hybi = function(request, url, options) {\n            Base.apply(this, arguments);\n            this._extensions = new Extensions();\n            this._stage = 0;\n            this._masking = this._options.masking;\n            this._protocols = this._options.protocols || [];\n            this._requireMasking = this._options.requireMasking;\n            this._pingCallbacks = {};\n            if (typeof this._protocols === \"string\") this._protocols = this._protocols.split(/ *, */);\n            if (!this._request) return;\n            var protos = this._request.headers[\"sec-websocket-protocol\"], supported = this._protocols;\n            if (protos !== undefined) {\n                if (typeof protos === \"string\") protos = protos.split(/ *, */);\n                this.protocol = protos.filter(function(p) {\n                    return supported.indexOf(p) >= 0;\n                })[0];\n            }\n            this.version = \"hybi-\" + Hybi.VERSION;\n        };\n        util.inherits(Hybi, Base);\n        Hybi.VERSION = \"13\";\n        Hybi.mask = function(payload, mask, offset) {\n            if (!mask || mask.length === 0) return payload;\n            offset = offset || 0;\n            for(var i = 0, n = payload.length - offset; i < n; i++){\n                payload[offset + i] = payload[offset + i] ^ mask[i % 4];\n            }\n            return payload;\n        };\n        Hybi.generateAccept = function(key) {\n            var sha1 = crypto.createHash(\"sha1\");\n            sha1.update(key + Hybi.GUID);\n            return sha1.digest(\"base64\");\n        };\n        Hybi.GUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n        var instance = {\n            FIN: 0x80,\n            MASK: 0x80,\n            RSV1: 0x40,\n            RSV2: 0x20,\n            RSV3: 0x10,\n            OPCODE: 0x0F,\n            LENGTH: 0x7F,\n            OPCODES: {\n                continuation: 0,\n                text: 1,\n                binary: 2,\n                close: 8,\n                ping: 9,\n                pong: 10\n            },\n            OPCODE_CODES: [\n                0,\n                1,\n                2,\n                8,\n                9,\n                10\n            ],\n            MESSAGE_OPCODES: [\n                0,\n                1,\n                2\n            ],\n            OPENING_OPCODES: [\n                1,\n                2\n            ],\n            ERRORS: {\n                normal_closure: 1000,\n                going_away: 1001,\n                protocol_error: 1002,\n                unacceptable: 1003,\n                encoding_error: 1007,\n                policy_violation: 1008,\n                too_large: 1009,\n                extension_error: 1010,\n                unexpected_condition: 1011\n            },\n            ERROR_CODES: [\n                1000,\n                1001,\n                1002,\n                1003,\n                1007,\n                1008,\n                1009,\n                1010,\n                1011\n            ],\n            DEFAULT_ERROR_CODE: 1000,\n            MIN_RESERVED_ERROR: 3000,\n            MAX_RESERVED_ERROR: 4999,\n            // http://www.w3.org/International/questions/qa-forms-utf-8.en.php\n            UTF8_MATCH: /^([\\x00-\\x7F]|[\\xC2-\\xDF][\\x80-\\xBF]|\\xE0[\\xA0-\\xBF][\\x80-\\xBF]|[\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}|\\xED[\\x80-\\x9F][\\x80-\\xBF]|\\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}|[\\xF1-\\xF3][\\x80-\\xBF]{3}|\\xF4[\\x80-\\x8F][\\x80-\\xBF]{2})*$/,\n            addExtension: function(extension) {\n                this._extensions.add(extension);\n                return true;\n            },\n            parse: function(chunk) {\n                this._reader.put(chunk);\n                var buffer = true;\n                while(buffer){\n                    switch(this._stage){\n                        case 0:\n                            buffer = this._reader.read(1);\n                            if (buffer) this._parseOpcode(buffer[0]);\n                            break;\n                        case 1:\n                            buffer = this._reader.read(1);\n                            if (buffer) this._parseLength(buffer[0]);\n                            break;\n                        case 2:\n                            buffer = this._reader.read(this._frame.lengthBytes);\n                            if (buffer) this._parseExtendedLength(buffer);\n                            break;\n                        case 3:\n                            buffer = this._reader.read(4);\n                            if (buffer) {\n                                this._stage = 4;\n                                this._frame.maskingKey = buffer;\n                            }\n                            break;\n                        case 4:\n                            buffer = this._reader.read(this._frame.length);\n                            if (buffer) {\n                                this._stage = 0;\n                                this._emitFrame(buffer);\n                            }\n                            break;\n                        default:\n                            buffer = null;\n                    }\n                }\n            },\n            text: function(message) {\n                if (this.readyState > 1) return false;\n                return this.frame(message, \"text\");\n            },\n            binary: function(message) {\n                if (this.readyState > 1) return false;\n                return this.frame(message, \"binary\");\n            },\n            ping: function(message, callback) {\n                if (this.readyState > 1) return false;\n                message = message || \"\";\n                if (callback) this._pingCallbacks[message] = callback;\n                return this.frame(message, \"ping\");\n            },\n            pong: function(message) {\n                if (this.readyState > 1) return false;\n                message = message || \"\";\n                return this.frame(message, \"pong\");\n            },\n            close: function(reason, code) {\n                reason = reason || \"\";\n                code = code || this.ERRORS.normal_closure;\n                if (this.readyState <= 0) {\n                    this.readyState = 3;\n                    this.emit(\"close\", new Base.CloseEvent(code, reason));\n                    return true;\n                } else if (this.readyState === 1) {\n                    this.readyState = 2;\n                    this._extensions.close(function() {\n                        this.frame(reason, \"close\", code);\n                    }, this);\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            frame: function(buffer, type, code) {\n                if (this.readyState <= 0) return this._queue([\n                    buffer,\n                    type,\n                    code\n                ]);\n                if (this.readyState > 2) return false;\n                if (buffer instanceof Array) buffer = Buffer1.from(buffer);\n                if (typeof buffer === \"number\") buffer = buffer.toString();\n                var message = new Message(), isText = typeof buffer === \"string\", payload, copy;\n                message.rsv1 = message.rsv2 = message.rsv3 = false;\n                message.opcode = this.OPCODES[type || (isText ? \"text\" : \"binary\")];\n                payload = isText ? Buffer1.from(buffer, \"utf8\") : buffer;\n                if (code) {\n                    copy = payload;\n                    payload = Buffer1.allocUnsafe(2 + copy.length);\n                    payload.writeUInt16BE(code, 0);\n                    copy.copy(payload, 2);\n                }\n                message.data = payload;\n                var onMessageReady = function(message) {\n                    var frame = new Frame();\n                    frame.final = true;\n                    frame.rsv1 = message.rsv1;\n                    frame.rsv2 = message.rsv2;\n                    frame.rsv3 = message.rsv3;\n                    frame.opcode = message.opcode;\n                    frame.masked = !!this._masking;\n                    frame.length = message.data.length;\n                    frame.payload = message.data;\n                    if (frame.masked) frame.maskingKey = crypto.randomBytes(4);\n                    this._sendFrame(frame);\n                };\n                if (this.MESSAGE_OPCODES.indexOf(message.opcode) >= 0) this._extensions.processOutgoingMessage(message, function(error, message) {\n                    if (error) return this._fail(\"extension_error\", error.message);\n                    onMessageReady.call(this, message);\n                }, this);\n                else onMessageReady.call(this, message);\n                return true;\n            },\n            _sendFrame: function(frame) {\n                var length = frame.length, header = length <= 125 ? 2 : length <= 65535 ? 4 : 10, offset = header + (frame.masked ? 4 : 0), buffer = Buffer1.allocUnsafe(offset + length), masked = frame.masked ? this.MASK : 0;\n                buffer[0] = (frame.final ? this.FIN : 0) | (frame.rsv1 ? this.RSV1 : 0) | (frame.rsv2 ? this.RSV2 : 0) | (frame.rsv3 ? this.RSV3 : 0) | frame.opcode;\n                if (length <= 125) {\n                    buffer[1] = masked | length;\n                } else if (length <= 65535) {\n                    buffer[1] = masked | 126;\n                    buffer.writeUInt16BE(length, 2);\n                } else {\n                    buffer[1] = masked | 127;\n                    buffer.writeUInt32BE(Math.floor(length / 0x100000000), 2);\n                    buffer.writeUInt32BE(length % 0x100000000, 6);\n                }\n                frame.payload.copy(buffer, offset);\n                if (frame.masked) {\n                    frame.maskingKey.copy(buffer, header);\n                    Hybi.mask(buffer, frame.maskingKey, offset);\n                }\n                this._write(buffer);\n            },\n            _handshakeResponse: function() {\n                var secKey = this._request.headers[\"sec-websocket-key\"], version = this._request.headers[\"sec-websocket-version\"];\n                if (version !== Hybi.VERSION) throw new Error(\"Unsupported WebSocket version: \" + version);\n                if (typeof secKey !== \"string\") throw new Error(\"Missing handshake request header: Sec-WebSocket-Key\");\n                this._headers.set(\"Upgrade\", \"websocket\");\n                this._headers.set(\"Connection\", \"Upgrade\");\n                this._headers.set(\"Sec-WebSocket-Accept\", Hybi.generateAccept(secKey));\n                if (this.protocol) this._headers.set(\"Sec-WebSocket-Protocol\", this.protocol);\n                var extensions = this._extensions.generateResponse(this._request.headers[\"sec-websocket-extensions\"]);\n                if (extensions) this._headers.set(\"Sec-WebSocket-Extensions\", extensions);\n                var start = \"HTTP/1.1 101 Switching Protocols\", headers = [\n                    start,\n                    this._headers.toString(),\n                    \"\"\n                ];\n                return Buffer1.from(headers.join(\"\\r\\n\"), \"utf8\");\n            },\n            _shutdown: function(code, reason, error) {\n                delete this._frame;\n                delete this._message;\n                this._stage = 5;\n                var sendCloseFrame = this.readyState === 1;\n                this.readyState = 2;\n                this._extensions.close(function() {\n                    if (sendCloseFrame) this.frame(reason, \"close\", code);\n                    this.readyState = 3;\n                    if (error) this.emit(\"error\", new Error(reason));\n                    this.emit(\"close\", new Base.CloseEvent(code, reason));\n                }, this);\n            },\n            _fail: function(type, message) {\n                if (this.readyState > 1) return;\n                this._shutdown(this.ERRORS[type], message, true);\n            },\n            _parseOpcode: function(octet) {\n                var rsvs = [\n                    this.RSV1,\n                    this.RSV2,\n                    this.RSV3\n                ].map(function(rsv) {\n                    return (octet & rsv) === rsv;\n                });\n                var frame = this._frame = new Frame();\n                frame.final = (octet & this.FIN) === this.FIN;\n                frame.rsv1 = rsvs[0];\n                frame.rsv2 = rsvs[1];\n                frame.rsv3 = rsvs[2];\n                frame.opcode = octet & this.OPCODE;\n                this._stage = 1;\n                if (!this._extensions.validFrameRsv(frame)) return this._fail(\"protocol_error\", \"One or more reserved bits are on: reserved1 = \" + (frame.rsv1 ? 1 : 0) + \", reserved2 = \" + (frame.rsv2 ? 1 : 0) + \", reserved3 = \" + (frame.rsv3 ? 1 : 0));\n                if (this.OPCODE_CODES.indexOf(frame.opcode) < 0) return this._fail(\"protocol_error\", \"Unrecognized frame opcode: \" + frame.opcode);\n                if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && !frame.final) return this._fail(\"protocol_error\", \"Received fragmented control frame: opcode = \" + frame.opcode);\n                if (this._message && this.OPENING_OPCODES.indexOf(frame.opcode) >= 0) return this._fail(\"protocol_error\", \"Received new data frame but previous continuous frame is unfinished\");\n            },\n            _parseLength: function(octet) {\n                var frame = this._frame;\n                frame.masked = (octet & this.MASK) === this.MASK;\n                frame.length = octet & this.LENGTH;\n                if (frame.length >= 0 && frame.length <= 125) {\n                    this._stage = frame.masked ? 3 : 4;\n                    if (!this._checkFrameLength()) return;\n                } else {\n                    this._stage = 2;\n                    frame.lengthBytes = frame.length === 126 ? 2 : 8;\n                }\n                if (this._requireMasking && !frame.masked) return this._fail(\"unacceptable\", \"Received unmasked frame but masking is required\");\n            },\n            _parseExtendedLength: function(buffer) {\n                var frame = this._frame;\n                frame.length = this._readUInt(buffer);\n                this._stage = frame.masked ? 3 : 4;\n                if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && frame.length > 125) return this._fail(\"protocol_error\", \"Received control frame having too long payload: \" + frame.length);\n                if (!this._checkFrameLength()) return;\n            },\n            _checkFrameLength: function() {\n                var length = this._message ? this._message.length : 0;\n                if (length + this._frame.length > this._maxLength) {\n                    this._fail(\"too_large\", \"WebSocket frame length too large\");\n                    return false;\n                } else {\n                    return true;\n                }\n            },\n            _emitFrame: function(buffer) {\n                var frame = this._frame, payload = frame.payload = Hybi.mask(buffer, frame.maskingKey), opcode = frame.opcode, message, code, reason, callbacks, callback;\n                delete this._frame;\n                if (opcode === this.OPCODES.continuation) {\n                    if (!this._message) return this._fail(\"protocol_error\", \"Received unexpected continuation frame\");\n                    this._message.pushFrame(frame);\n                }\n                if (opcode === this.OPCODES.text || opcode === this.OPCODES.binary) {\n                    this._message = new Message();\n                    this._message.pushFrame(frame);\n                }\n                if (frame.final && this.MESSAGE_OPCODES.indexOf(opcode) >= 0) return this._emitMessage(this._message);\n                if (opcode === this.OPCODES.close) {\n                    code = payload.length >= 2 ? payload.readUInt16BE(0) : null;\n                    reason = payload.length > 2 ? this._encode(payload.slice(2)) : null;\n                    if (!(payload.length === 0) && !(code !== null && code >= this.MIN_RESERVED_ERROR && code <= this.MAX_RESERVED_ERROR) && this.ERROR_CODES.indexOf(code) < 0) code = this.ERRORS.protocol_error;\n                    if (payload.length > 125 || payload.length > 2 && !reason) code = this.ERRORS.protocol_error;\n                    this._shutdown(code || this.DEFAULT_ERROR_CODE, reason || \"\");\n                }\n                if (opcode === this.OPCODES.ping) {\n                    this.frame(payload, \"pong\");\n                    this.emit(\"ping\", new Base.PingEvent(payload.toString()));\n                }\n                if (opcode === this.OPCODES.pong) {\n                    callbacks = this._pingCallbacks;\n                    message = this._encode(payload);\n                    callback = callbacks[message];\n                    delete callbacks[message];\n                    if (callback) callback();\n                    this.emit(\"pong\", new Base.PongEvent(payload.toString()));\n                }\n            },\n            _emitMessage: function(message) {\n                var message = this._message;\n                message.read();\n                delete this._message;\n                this._extensions.processIncomingMessage(message, function(error, message) {\n                    if (error) return this._fail(\"extension_error\", error.message);\n                    var payload = message.data;\n                    if (message.opcode === this.OPCODES.text) payload = this._encode(payload);\n                    if (payload === null) return this._fail(\"encoding_error\", \"Could not decode a text frame as UTF-8\");\n                    else this.emit(\"message\", new Base.MessageEvent(payload));\n                }, this);\n            },\n            _encode: function(buffer) {\n                try {\n                    var string = buffer.toString(\"binary\", 0, buffer.length);\n                    if (!this.UTF8_MATCH.test(string)) return null;\n                } catch (e) {}\n                return buffer.toString(\"utf8\", 0, buffer.length);\n            },\n            _readUInt: function(buffer) {\n                if (buffer.length === 2) return buffer.readUInt16BE(0);\n                return buffer.readUInt32BE(0) * 0x100000000 + buffer.readUInt32BE(4);\n            }\n        };\n        for(var key in instance)Hybi.prototype[key] = instance[key];\n        module1.exports = Hybi;\n    /***/ },\n    /* 13 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        var RingBuffer = function(bufferSize) {\n            this._bufferSize = bufferSize;\n            this.clear();\n        };\n        RingBuffer.prototype.clear = function() {\n            this._buffer = new Array(this._bufferSize);\n            this._ringOffset = 0;\n            this._ringSize = this._bufferSize;\n            this._head = 0;\n            this._tail = 0;\n            this.length = 0;\n        };\n        RingBuffer.prototype.push = function(value) {\n            var expandBuffer = false, expandRing = false;\n            if (this._ringSize < this._bufferSize) {\n                expandBuffer = this._tail === 0;\n            } else if (this._ringOffset === this._ringSize) {\n                expandBuffer = true;\n                expandRing = this._tail === 0;\n            }\n            if (expandBuffer) {\n                this._tail = this._bufferSize;\n                this._buffer = this._buffer.concat(new Array(this._bufferSize));\n                this._bufferSize = this._buffer.length;\n                if (expandRing) this._ringSize = this._bufferSize;\n            }\n            this._buffer[this._tail] = value;\n            this.length += 1;\n            if (this._tail < this._ringSize) this._ringOffset += 1;\n            this._tail = (this._tail + 1) % this._bufferSize;\n        };\n        RingBuffer.prototype.peek = function() {\n            if (this.length === 0) return void 0;\n            return this._buffer[this._head];\n        };\n        RingBuffer.prototype.shift = function() {\n            if (this.length === 0) return void 0;\n            var value = this._buffer[this._head];\n            this._buffer[this._head] = void 0;\n            this.length -= 1;\n            this._ringOffset -= 1;\n            if (this._ringOffset === 0 && this.length > 0) {\n                this._head = this._ringSize;\n                this._ringOffset = this.length;\n                this._ringSize = this._bufferSize;\n            } else {\n                this._head = (this._head + 1) % this._ringSize;\n            }\n            return value;\n        };\n        module1.exports = RingBuffer;\n    /***/ },\n    /* 14 */ /***/ function(module1, exports, __nested_webpack_require_61901__) {\n        \"use strict\";\n        var RingBuffer = __nested_webpack_require_61901__(13);\n        var Pledge = function() {\n            this._complete = false;\n            this._callbacks = new RingBuffer(Pledge.QUEUE_SIZE);\n        };\n        Pledge.QUEUE_SIZE = 4;\n        Pledge.all = function(list) {\n            var pledge = new Pledge(), pending = list.length, n = pending;\n            if (pending === 0) pledge.done();\n            while(n--)list[n].then(function() {\n                pending -= 1;\n                if (pending === 0) pledge.done();\n            });\n            return pledge;\n        };\n        Pledge.prototype.then = function(callback) {\n            if (this._complete) callback();\n            else this._callbacks.push(callback);\n        };\n        Pledge.prototype.done = function() {\n            this._complete = true;\n            var callbacks = this._callbacks, callback;\n            while(callback = callbacks.shift())callback();\n        };\n        module1.exports = Pledge;\n    /***/ },\n    /* 15 */ /***/ function(module1, exports, __nested_webpack_require_62969__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_62969__(1).Buffer, Base = __nested_webpack_require_62969__(2), util = __nested_webpack_require_62969__(0);\n        var Draft75 = function(request, url, options) {\n            Base.apply(this, arguments);\n            this._stage = 0;\n            this.version = \"hixie-75\";\n            this._headers.set(\"Upgrade\", \"WebSocket\");\n            this._headers.set(\"Connection\", \"Upgrade\");\n            this._headers.set(\"WebSocket-Origin\", this._request.headers.origin);\n            this._headers.set(\"WebSocket-Location\", this.url);\n        };\n        util.inherits(Draft75, Base);\n        var instance = {\n            close: function() {\n                if (this.readyState === 3) return false;\n                this.readyState = 3;\n                this.emit(\"close\", new Base.CloseEvent(null, null));\n                return true;\n            },\n            parse: function(chunk) {\n                if (this.readyState > 1) return;\n                this._reader.put(chunk);\n                this._reader.eachByte(function(octet) {\n                    var message;\n                    switch(this._stage){\n                        case -1:\n                            this._body.push(octet);\n                            this._sendHandshakeBody();\n                            break;\n                        case 0:\n                            this._parseLeadingByte(octet);\n                            break;\n                        case 1:\n                            this._length = (octet & 0x7F) + 128 * this._length;\n                            if (this._closing && this._length === 0) {\n                                return this.close();\n                            } else if ((octet & 0x80) !== 0x80) {\n                                if (this._length === 0) {\n                                    this._stage = 0;\n                                } else {\n                                    this._skipped = 0;\n                                    this._stage = 2;\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (octet === 0xFF) {\n                                this._stage = 0;\n                                message = Buffer1.from(this._buffer).toString(\"utf8\", 0, this._buffer.length);\n                                this.emit(\"message\", new Base.MessageEvent(message));\n                            } else {\n                                if (this._length) {\n                                    this._skipped += 1;\n                                    if (this._skipped === this._length) this._stage = 0;\n                                } else {\n                                    this._buffer.push(octet);\n                                    if (this._buffer.length > this._maxLength) return this.close();\n                                }\n                            }\n                            break;\n                    }\n                }, this);\n            },\n            frame: function(buffer) {\n                if (this.readyState === 0) return this._queue([\n                    buffer\n                ]);\n                if (this.readyState > 1) return false;\n                if (typeof buffer !== \"string\") buffer = buffer.toString();\n                var length = Buffer1.byteLength(buffer), frame = Buffer1.allocUnsafe(length + 2);\n                frame[0] = 0x00;\n                frame.write(buffer, 1);\n                frame[frame.length - 1] = 0xFF;\n                this._write(frame);\n                return true;\n            },\n            _handshakeResponse: function() {\n                var start = \"HTTP/1.1 101 Web Socket Protocol Handshake\", headers = [\n                    start,\n                    this._headers.toString(),\n                    \"\"\n                ];\n                return Buffer1.from(headers.join(\"\\r\\n\"), \"utf8\");\n            },\n            _parseLeadingByte: function(octet) {\n                if ((octet & 0x80) === 0x80) {\n                    this._length = 0;\n                    this._stage = 1;\n                } else {\n                    delete this._length;\n                    delete this._skipped;\n                    this._buffer = [];\n                    this._stage = 2;\n                }\n            }\n        };\n        for(var key in instance)Draft75.prototype[key] = instance[key];\n        module1.exports = Draft75;\n    /***/ },\n    /* 16 */ /***/ function(module1, exports, __nested_webpack_require_67479__) {\n        \"use strict\";\n        var Event = __nested_webpack_require_67479__(7);\n        var EventTarget = {\n            onopen: null,\n            onmessage: null,\n            onerror: null,\n            onclose: null,\n            addEventListener: function(eventType, listener, useCapture) {\n                this.on(eventType, listener);\n            },\n            removeEventListener: function(eventType, listener, useCapture) {\n                this.removeListener(eventType, listener);\n            },\n            dispatchEvent: function(event) {\n                event.target = event.currentTarget = this;\n                event.eventPhase = Event.AT_TARGET;\n                if (this[\"on\" + event.type]) this[\"on\" + event.type](event);\n                this.emit(event.type, event);\n            }\n        };\n        module1.exports = EventTarget;\n    /***/ },\n    /* 17 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        // Copyright (C) 2016 Dmitry Chestnykh\n        // MIT License. See LICENSE file for details.\n        Object.defineProperty(exports, \"__esModule\", {\n            value: true\n        });\n        /**\n * Package utf8 implements UTF-8 encoding and decoding.\n */ var INVALID_UTF16 = \"utf8: invalid string\";\n        var INVALID_UTF8 = \"utf8: invalid source encoding\";\n        /**\n * Encodes the given string into UTF-8 byte array.\n * Throws if the source string has invalid UTF-16 encoding.\n */ function encode(s) {\n            // Calculate result length and allocate output array.\n            // encodedLength() also validates string and throws errors,\n            // so we don't need repeat validation here.\n            var arr = new Uint8Array(encodedLength(s));\n            var pos = 0;\n            for(var i = 0; i < s.length; i++){\n                var c = s.charCodeAt(i);\n                if (c < 0x80) {\n                    arr[pos++] = c;\n                } else if (c < 0x800) {\n                    arr[pos++] = 0xc0 | c >> 6;\n                    arr[pos++] = 0x80 | c & 0x3f;\n                } else if (c < 0xd800) {\n                    arr[pos++] = 0xe0 | c >> 12;\n                    arr[pos++] = 0x80 | c >> 6 & 0x3f;\n                    arr[pos++] = 0x80 | c & 0x3f;\n                } else {\n                    i++; // get one more character\n                    c = (c & 0x3ff) << 10;\n                    c |= s.charCodeAt(i) & 0x3ff;\n                    c += 0x10000;\n                    arr[pos++] = 0xf0 | c >> 18;\n                    arr[pos++] = 0x80 | c >> 12 & 0x3f;\n                    arr[pos++] = 0x80 | c >> 6 & 0x3f;\n                    arr[pos++] = 0x80 | c & 0x3f;\n                }\n            }\n            return arr;\n        }\n        exports.encode = encode;\n        /**\n * Returns the number of bytes required to encode the given string into UTF-8.\n * Throws if the source string has invalid UTF-16 encoding.\n */ function encodedLength(s) {\n            var result = 0;\n            for(var i = 0; i < s.length; i++){\n                var c = s.charCodeAt(i);\n                if (c < 0x80) {\n                    result += 1;\n                } else if (c < 0x800) {\n                    result += 2;\n                } else if (c < 0xd800) {\n                    result += 3;\n                } else if (c <= 0xdfff) {\n                    if (i >= s.length - 1) {\n                        throw new Error(INVALID_UTF16);\n                    }\n                    i++; // \"eat\" next character\n                    result += 4;\n                } else {\n                    throw new Error(INVALID_UTF16);\n                }\n            }\n            return result;\n        }\n        exports.encodedLength = encodedLength;\n        /**\n * Decodes the given byte array from UTF-8 into a string.\n * Throws if encoding is invalid.\n */ function decode(arr) {\n            var chars = [];\n            for(var i = 0; i < arr.length; i++){\n                var b = arr[i];\n                if (b & 0x80) {\n                    var min = void 0;\n                    if (b < 0xe0) {\n                        // Need 1 more byte.\n                        if (i >= arr.length) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        var n1 = arr[++i];\n                        if ((n1 & 0xc0) !== 0x80) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        b = (b & 0x1f) << 6 | n1 & 0x3f;\n                        min = 0x80;\n                    } else if (b < 0xf0) {\n                        // Need 2 more bytes.\n                        if (i >= arr.length - 1) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        var n1 = arr[++i];\n                        var n2 = arr[++i];\n                        if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        b = (b & 0x0f) << 12 | (n1 & 0x3f) << 6 | n2 & 0x3f;\n                        min = 0x800;\n                    } else if (b < 0xf8) {\n                        // Need 3 more bytes.\n                        if (i >= arr.length - 2) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        var n1 = arr[++i];\n                        var n2 = arr[++i];\n                        var n3 = arr[++i];\n                        if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80 || (n3 & 0xc0) !== 0x80) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        b = (b & 0x0f) << 18 | (n1 & 0x3f) << 12 | (n2 & 0x3f) << 6 | n3 & 0x3f;\n                        min = 0x10000;\n                    } else {\n                        throw new Error(INVALID_UTF8);\n                    }\n                    if (b < min || b >= 0xd800 && b <= 0xdfff) {\n                        throw new Error(INVALID_UTF8);\n                    }\n                    if (b >= 0x10000) {\n                        // Surrogate pair.\n                        if (b > 0x10ffff) {\n                            throw new Error(INVALID_UTF8);\n                        }\n                        b -= 0x10000;\n                        chars.push(String.fromCharCode(0xd800 | b >> 10));\n                        b = 0xdc00 | b & 0x3ff;\n                    }\n                }\n                chars.push(String.fromCharCode(b));\n            }\n            return chars.join(\"\");\n        }\n        exports.decode = decode;\n    /***/ },\n    /* 18 */ /***/ function(module1, exports, __nested_webpack_require_74101__) {\n        \"use strict\";\n        // API references:\n        //\n        // * https://html.spec.whatwg.org/multipage/comms.html#network\n        // * https://dom.spec.whatwg.org/#interface-eventtarget\n        // * https://dom.spec.whatwg.org/#interface-event\n        var util = __nested_webpack_require_74101__(0), driver = __nested_webpack_require_74101__(4), API = __nested_webpack_require_74101__(11);\n        var WebSocket = function(request, socket, body, protocols, options) {\n            options = options || {};\n            this._stream = socket;\n            this._driver = driver.http(request, {\n                maxLength: options.maxLength,\n                protocols: protocols\n            });\n            var self1 = this;\n            if (!this._stream || !this._stream.writable) return;\n            if (!this._stream.readable) return this._stream.end();\n            var catchup = function() {\n                self1._stream.removeListener(\"data\", catchup);\n            };\n            this._stream.on(\"data\", catchup);\n            API.call(this, options);\n            process.nextTick(function() {\n                self1._driver.start();\n                self1._driver.io.write(body);\n            });\n        };\n        util.inherits(WebSocket, API);\n        WebSocket.isWebSocket = function(request) {\n            return driver.isWebSocket(request);\n        };\n        WebSocket.validateOptions = function(options, validKeys) {\n            driver.validateOptions(options, validKeys);\n        };\n        WebSocket.WebSocket = WebSocket;\n        WebSocket.Client = __nested_webpack_require_74101__(39);\n        WebSocket.EventSource = __nested_webpack_require_74101__(42);\n        module1.exports = WebSocket;\n    /***/ },\n    /* 19 */ /***/ function(module1, exports, __nested_webpack_require_75829__) {\n        /**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @license MIT\n */ var Url = __nested_webpack_require_75829__(6);\n        var spawn = __nested_webpack_require_75829__(43).spawn;\n        var fs = __nested_webpack_require_75829__(44);\n        exports.XMLHttpRequest = function() {\n            \"use strict\";\n            /**\n   * Private variables\n   */ var self1 = this;\n            var http = __nested_webpack_require_75829__(45);\n            var https = __nested_webpack_require_75829__(46);\n            // Holds http.js objects\n            var request;\n            var response;\n            // Request settings\n            var settings = {};\n            // Disable header blacklist.\n            // Not part of XHR specs.\n            var disableHeaderCheck = false;\n            // Set some default headers\n            var defaultHeaders = {\n                \"User-Agent\": \"node-XMLHttpRequest\",\n                \"Accept\": \"*/*\"\n            };\n            var headers = {};\n            var headersCase = {};\n            // These headers are not user setable.\n            // The following are allowed but banned in the spec:\n            // * user-agent\n            var forbiddenRequestHeaders = [\n                \"accept-charset\",\n                \"accept-encoding\",\n                \"access-control-request-headers\",\n                \"access-control-request-method\",\n                \"connection\",\n                \"content-length\",\n                \"content-transfer-encoding\",\n                \"cookie\",\n                \"cookie2\",\n                \"date\",\n                \"expect\",\n                \"host\",\n                \"keep-alive\",\n                \"origin\",\n                \"referer\",\n                \"te\",\n                \"trailer\",\n                \"transfer-encoding\",\n                \"upgrade\",\n                \"via\"\n            ];\n            // These request methods are not allowed\n            var forbiddenRequestMethods = [\n                \"TRACE\",\n                \"TRACK\",\n                \"CONNECT\"\n            ];\n            // Send flag\n            var sendFlag = false;\n            // Error flag, used when errors occur or abort is called\n            var errorFlag = false;\n            // Event listeners\n            var listeners = {};\n            /**\n   * Constants\n   */ this.UNSENT = 0;\n            this.OPENED = 1;\n            this.HEADERS_RECEIVED = 2;\n            this.LOADING = 3;\n            this.DONE = 4;\n            /**\n   * Public vars\n   */ // Current state\n            this.readyState = this.UNSENT;\n            // default ready state change handler in case one is not set or is set late\n            this.onreadystatechange = null;\n            // Result & response\n            this.responseText = \"\";\n            this.responseXML = \"\";\n            this.status = null;\n            this.statusText = null;\n            // Whether cross-site Access-Control requests should be made using\n            // credentials such as cookies or authorization headers\n            this.withCredentials = false;\n            /**\n   * Private methods\n   */ /**\n   * Check if the specified header is allowed.\n   *\n   * @param string header Header to validate\n   * @return boolean False if not allowed, otherwise true\n   */ var isAllowedHttpHeader = function(header) {\n                return disableHeaderCheck || header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1;\n            };\n            /**\n   * Check if the specified method is allowed.\n   *\n   * @param string method Request method to validate\n   * @return boolean False if not allowed, otherwise true\n   */ var isAllowedHttpMethod = function(method) {\n                return method && forbiddenRequestMethods.indexOf(method) === -1;\n            };\n            /**\n   * Public methods\n   */ /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param string method Connection method (eg GET, POST)\n   * @param string url URL for the connection.\n   * @param boolean async Asynchronous connection. Default is true.\n   * @param string user Username for basic authentication (optional)\n   * @param string password Password for basic authentication (optional)\n   */ this.open = function(method, url, async, user, password) {\n                this.abort();\n                errorFlag = false;\n                // Check for valid request method\n                if (!isAllowedHttpMethod(method)) {\n                    throw new Error(\"SecurityError: Request method not allowed\");\n                }\n                settings = {\n                    \"method\": method,\n                    \"url\": url.toString(),\n                    \"async\": typeof async !== \"boolean\" ? true : async,\n                    \"user\": user || null,\n                    \"password\": password || null\n                };\n                setState(this.OPENED);\n            };\n            /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param boolean state Enable or disable header checking.\n   */ this.setDisableHeaderCheck = function(state) {\n                disableHeaderCheck = state;\n            };\n            /**\n   * Sets a header for the request or appends the value if one is already set.\n   *\n   * @param string header Header name\n   * @param string value Header value\n   */ this.setRequestHeader = function(header, value) {\n                if (this.readyState !== this.OPENED) {\n                    throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");\n                }\n                if (!isAllowedHttpHeader(header)) {\n                    console.warn('Refused to set unsafe header \"' + header + '\"');\n                    return;\n                }\n                if (sendFlag) {\n                    throw new Error(\"INVALID_STATE_ERR: send flag is true\");\n                }\n                header = headersCase[header.toLowerCase()] || header;\n                headersCase[header.toLowerCase()] = header;\n                headers[header] = headers[header] ? headers[header] + \", \" + value : value;\n            };\n            /**\n   * Gets a header from the server response.\n   *\n   * @param string header Name of header to get.\n   * @return string Text of the header or null if it doesn't exist.\n   */ this.getResponseHeader = function(header) {\n                if (typeof header === \"string\" && this.readyState > this.OPENED && response && response.headers && response.headers[header.toLowerCase()] && !errorFlag) {\n                    return response.headers[header.toLowerCase()];\n                }\n                return null;\n            };\n            /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */ this.getAllResponseHeaders = function() {\n                if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {\n                    return \"\";\n                }\n                var result = \"\";\n                for(var i in response.headers){\n                    // Cookie headers are excluded\n                    if (i !== \"set-cookie\" && i !== \"set-cookie2\") {\n                        result += i + \": \" + response.headers[i] + \"\\r\\n\";\n                    }\n                }\n                return result.substr(0, result.length - 2);\n            };\n            /**\n   * Gets a request header\n   *\n   * @param string name Name of header to get\n   * @return string Returns the request header or empty string if not set\n   */ this.getRequestHeader = function(name) {\n                if (typeof name === \"string\" && headersCase[name.toLowerCase()]) {\n                    return headers[headersCase[name.toLowerCase()]];\n                }\n                return \"\";\n            };\n            /**\n   * Sends the request to the server.\n   *\n   * @param string data Optional data to send as request body.\n   */ this.send = function(data) {\n                if (this.readyState !== this.OPENED) {\n                    throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");\n                }\n                if (sendFlag) {\n                    throw new Error(\"INVALID_STATE_ERR: send has already been called\");\n                }\n                var ssl = false, local = false;\n                var url = Url.parse(settings.url);\n                var host;\n                // Determine the server\n                switch(url.protocol){\n                    case \"https:\":\n                        ssl = true;\n                    // SSL & non-SSL both need host, no break here.\n                    case \"http:\":\n                        host = url.hostname;\n                        break;\n                    case \"file:\":\n                        local = true;\n                        break;\n                    case undefined:\n                    case null:\n                    case \"\":\n                        host = \"localhost\";\n                        break;\n                    default:\n                        throw new Error(\"Protocol not supported.\");\n                }\n                // Load files off the local filesystem (file://)\n                if (local) {\n                    if (settings.method !== \"GET\") {\n                        throw new Error(\"XMLHttpRequest: Only GET method is supported\");\n                    }\n                    if (settings.async) {\n                        fs.readFile(url.pathname, \"utf8\", function(error, data) {\n                            if (error) {\n                                self1.handleError(error);\n                            } else {\n                                self1.status = 200;\n                                self1.responseText = data;\n                                setState(self1.DONE);\n                            }\n                        });\n                    } else {\n                        try {\n                            this.responseText = fs.readFileSync(url.pathname, \"utf8\");\n                            this.status = 200;\n                            setState(self1.DONE);\n                        } catch (e) {\n                            this.handleError(e);\n                        }\n                    }\n                    return;\n                }\n                // Default to port 80. If accessing localhost on another port be sure\n                // to use http://localhost:port/path\n                var port = url.port || (ssl ? 443 : 80);\n                // Add query string if one is used\n                var uri = url.pathname + (url.search ? url.search : \"\");\n                // Set the defaults if they haven't been set\n                for(var name in defaultHeaders){\n                    if (!headersCase[name.toLowerCase()]) {\n                        headers[name] = defaultHeaders[name];\n                    }\n                }\n                // Set the Host header or the server may reject the request\n                headers.Host = host;\n                if (!(ssl && port === 443 || port === 80)) {\n                    headers.Host += \":\" + url.port;\n                }\n                // Set Basic Auth if necessary\n                if (settings.user) {\n                    if (typeof settings.password === \"undefined\") {\n                        settings.password = \"\";\n                    }\n                    var authBuf = new Buffer(settings.user + \":\" + settings.password);\n                    headers.Authorization = \"Basic \" + authBuf.toString(\"base64\");\n                }\n                // Set content length header\n                if (settings.method === \"GET\" || settings.method === \"HEAD\") {\n                    data = null;\n                } else if (data) {\n                    headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n                    if (!headers[\"Content-Type\"]) {\n                        headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n                    }\n                } else if (settings.method === \"POST\") {\n                    // For a post with no data set Content-Length: 0.\n                    // This is required by buggy servers that don't meet the specs.\n                    headers[\"Content-Length\"] = 0;\n                }\n                var options = {\n                    host: host,\n                    port: port,\n                    path: uri,\n                    method: settings.method,\n                    headers: headers,\n                    agent: false,\n                    withCredentials: self1.withCredentials\n                };\n                // Reset error flag\n                errorFlag = false;\n                // Handle async requests\n                if (settings.async) {\n                    // Use the proper protocol\n                    var doRequest = ssl ? https.request : http.request;\n                    // Request is being sent, set send flag\n                    sendFlag = true;\n                    // As per spec, this is called here for historical reasons.\n                    self1.dispatchEvent(\"readystatechange\");\n                    // Handler for the response\n                    var responseHandler = function responseHandler(resp) {\n                        // Set response var to the response we got back\n                        // This is so it remains accessable outside this scope\n                        response = resp;\n                        // Check for redirect\n                        // @TODO Prevent looped redirects\n                        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n                            // Change URL to the redirect location\n                            settings.url = response.headers.location;\n                            var url = Url.parse(settings.url);\n                            // Set host var in case it's used later\n                            host = url.hostname;\n                            // Options for the new request\n                            var newOptions = {\n                                hostname: url.hostname,\n                                port: url.port,\n                                path: url.path,\n                                method: response.statusCode === 303 ? \"GET\" : settings.method,\n                                headers: headers,\n                                withCredentials: self1.withCredentials\n                            };\n                            // Issue the new request\n                            request = doRequest(newOptions, responseHandler).on(\"error\", errorHandler);\n                            request.end();\n                            // @TODO Check if an XHR event needs to be fired here\n                            return;\n                        }\n                        response.setEncoding(\"utf8\");\n                        setState(self1.HEADERS_RECEIVED);\n                        self1.status = response.statusCode;\n                        response.on(\"data\", function(chunk) {\n                            // Make sure there's some data\n                            if (chunk) {\n                                self1.responseText += chunk;\n                            }\n                            // Don't emit state changes if the connection has been aborted.\n                            if (sendFlag) {\n                                setState(self1.LOADING);\n                            }\n                        });\n                        response.on(\"end\", function() {\n                            if (sendFlag) {\n                                // Discard the end event if the connection has been aborted\n                                setState(self1.DONE);\n                                sendFlag = false;\n                            }\n                        });\n                        response.on(\"error\", function(error) {\n                            self1.handleError(error);\n                        });\n                    };\n                    // Error handler for the request\n                    var errorHandler = function errorHandler(error) {\n                        self1.handleError(error);\n                    };\n                    // Create the request\n                    request = doRequest(options, responseHandler).on(\"error\", errorHandler);\n                    // Node 0.4 and later won't accept empty data. Make sure it's needed.\n                    if (data) {\n                        request.write(data);\n                    }\n                    request.end();\n                    self1.dispatchEvent(\"loadstart\");\n                } else {\n                    // Create a temporary file for communication with the other Node process\n                    var contentFile = \".node-xmlhttprequest-content-\" + process.pid;\n                    var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;\n                    fs.writeFileSync(syncFile, \"\", \"utf8\");\n                    // The async request the other Node process executes\n                    var execString = \"var http = require('http'), https = require('https'), fs = require('fs');\" + \"var doRequest = http\" + (ssl ? \"s\" : \"\") + \".request;\" + \"var options = \" + JSON.stringify(options) + \";\" + \"var responseText = '';\" + \"var req = doRequest(options, function(response) {\" + \"response.setEncoding('utf8');\" + \"response.on('data', function(chunk) {\" + \"  responseText += chunk;\" + \"});\" + \"response.on('end', function() {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"response.on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"}).on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + (data ? \"req.write('\" + JSON.stringify(data).slice(1, -1).replace(/'/g, \"\\\\'\") + \"');\" : \"\") + \"req.end();\";\n                    // Start the other Node Process, executing this string\n                    var syncProc = spawn(process.argv[0], [\n                        \"-e\",\n                        execString\n                    ]);\n                    while(fs.existsSync(syncFile)){\n                    // Wait while the sync file is empty\n                    }\n                    var resp = JSON.parse(fs.readFileSync(contentFile, \"utf8\"));\n                    // Kill the child process once the file has data\n                    syncProc.stdin.end();\n                    // Remove the temporary file\n                    fs.unlinkSync(contentFile);\n                    if (resp.err) {\n                        self1.handleError(resp.err);\n                    } else {\n                        response = resp.data;\n                        self1.status = resp.data.statusCode;\n                        self1.responseText = resp.data.text;\n                        setState(self1.DONE);\n                    }\n                }\n            };\n            /**\n   * Called when an error is encountered to deal with it.\n   */ this.handleError = function(error) {\n                this.status = 0;\n                this.statusText = error;\n                this.responseText = error.stack;\n                errorFlag = true;\n                setState(this.DONE);\n                this.dispatchEvent(\"error\");\n            };\n            /**\n   * Aborts a request.\n   */ this.abort = function() {\n                if (request) {\n                    request.abort();\n                    request = null;\n                }\n                headers = defaultHeaders;\n                this.status = 0;\n                this.responseText = \"\";\n                this.responseXML = \"\";\n                errorFlag = true;\n                if (this.readyState !== this.UNSENT && (this.readyState !== this.OPENED || sendFlag) && this.readyState !== this.DONE) {\n                    sendFlag = false;\n                    setState(this.DONE);\n                }\n                this.readyState = this.UNSENT;\n                this.dispatchEvent(\"abort\");\n            };\n            /**\n   * Adds an event listener. Preferred method of binding to events.\n   */ this.addEventListener = function(event, callback) {\n                if (!(event in listeners)) {\n                    listeners[event] = [];\n                }\n                // Currently allows duplicate callbacks. Should it?\n                listeners[event].push(callback);\n            };\n            /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */ this.removeEventListener = function(event, callback) {\n                if (event in listeners) {\n                    // Filter will return a new array with the callback removed\n                    listeners[event] = listeners[event].filter(function(ev) {\n                        return ev !== callback;\n                    });\n                }\n            };\n            /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */ this.dispatchEvent = function(event) {\n                if (typeof self1[\"on\" + event] === \"function\") {\n                    self1[\"on\" + event]();\n                }\n                if (event in listeners) {\n                    for(var i = 0, len = listeners[event].length; i < len; i++){\n                        listeners[event][i].call(self1);\n                    }\n                }\n            };\n            /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param int state New state\n   */ var setState = function(state) {\n                if (state == self1.LOADING || self1.readyState !== state) {\n                    self1.readyState = state;\n                    if (settings.async || self1.readyState < self1.OPENED || self1.readyState === self1.DONE) {\n                        self1.dispatchEvent(\"readystatechange\");\n                    }\n                    if (self1.readyState === self1.DONE && !errorFlag) {\n                        self1.dispatchEvent(\"load\");\n                        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n                        self1.dispatchEvent(\"loadend\");\n                    }\n                }\n            };\n        };\n    /***/ },\n    /* 20 */ /***/ function(module1, exports, __nested_webpack_require_98670__) {\n        (function(nacl) {\n            \"use strict\";\n            // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n            // Public domain.\n            //\n            // Implementation derived from TweetNaCl version 20140427.\n            // See for details: http://tweetnacl.cr.yp.to/\n            var gf = function(init) {\n                var i, r = new Float64Array(16);\n                if (init) for(i = 0; i < init.length; i++)r[i] = init[i];\n                return r;\n            };\n            //  Pluggable, initialized in high-level API below.\n            var randombytes = function() {\n                throw new Error(\"no PRNG\");\n            };\n            var _0 = new Uint8Array(16);\n            var _9 = new Uint8Array(32);\n            _9[0] = 9;\n            var gf0 = gf(), gf1 = gf([\n                1\n            ]), _121665 = gf([\n                0xdb41,\n                1\n            ]), D = gf([\n                0x78a3,\n                0x1359,\n                0x4dca,\n                0x75eb,\n                0xd8ab,\n                0x4141,\n                0x0a4d,\n                0x0070,\n                0xe898,\n                0x7779,\n                0x4079,\n                0x8cc7,\n                0xfe73,\n                0x2b6f,\n                0x6cee,\n                0x5203\n            ]), D2 = gf([\n                0xf159,\n                0x26b2,\n                0x9b94,\n                0xebd6,\n                0xb156,\n                0x8283,\n                0x149a,\n                0x00e0,\n                0xd130,\n                0xeef3,\n                0x80f2,\n                0x198e,\n                0xfce7,\n                0x56df,\n                0xd9dc,\n                0x2406\n            ]), X = gf([\n                0xd51a,\n                0x8f25,\n                0x2d60,\n                0xc956,\n                0xa7b2,\n                0x9525,\n                0xc760,\n                0x692c,\n                0xdc5c,\n                0xfdd6,\n                0xe231,\n                0xc0a4,\n                0x53fe,\n                0xcd6e,\n                0x36d3,\n                0x2169\n            ]), Y = gf([\n                0x6658,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666,\n                0x6666\n            ]), I = gf([\n                0xa0b0,\n                0x4a0e,\n                0x1b27,\n                0xc4ee,\n                0xe478,\n                0xad2f,\n                0x1806,\n                0x2f43,\n                0xd7a7,\n                0x3dfb,\n                0x0099,\n                0x2b4d,\n                0xdf0b,\n                0x4fc1,\n                0x2480,\n                0x2b83\n            ]);\n            function ts64(x, i, h, l) {\n                x[i] = h >> 24 & 0xff;\n                x[i + 1] = h >> 16 & 0xff;\n                x[i + 2] = h >> 8 & 0xff;\n                x[i + 3] = h & 0xff;\n                x[i + 4] = l >> 24 & 0xff;\n                x[i + 5] = l >> 16 & 0xff;\n                x[i + 6] = l >> 8 & 0xff;\n                x[i + 7] = l & 0xff;\n            }\n            function vn(x, xi, y, yi, n) {\n                var i, d = 0;\n                for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];\n                return (1 & d - 1 >>> 8) - 1;\n            }\n            function crypto_verify_16(x, xi, y, yi) {\n                return vn(x, xi, y, yi, 16);\n            }\n            function crypto_verify_32(x, xi, y, yi) {\n                return vn(x, xi, y, yi, 32);\n            }\n            function core_salsa20(o, p, k, c) {\n                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;\n                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;\n                for(var i = 0; i < 20; i += 2){\n                    u = x0 + x12 | 0;\n                    x4 ^= u << 7 | u >>> 32 - 7;\n                    u = x4 + x0 | 0;\n                    x8 ^= u << 9 | u >>> 32 - 9;\n                    u = x8 + x4 | 0;\n                    x12 ^= u << 13 | u >>> 32 - 13;\n                    u = x12 + x8 | 0;\n                    x0 ^= u << 18 | u >>> 32 - 18;\n                    u = x5 + x1 | 0;\n                    x9 ^= u << 7 | u >>> 32 - 7;\n                    u = x9 + x5 | 0;\n                    x13 ^= u << 9 | u >>> 32 - 9;\n                    u = x13 + x9 | 0;\n                    x1 ^= u << 13 | u >>> 32 - 13;\n                    u = x1 + x13 | 0;\n                    x5 ^= u << 18 | u >>> 32 - 18;\n                    u = x10 + x6 | 0;\n                    x14 ^= u << 7 | u >>> 32 - 7;\n                    u = x14 + x10 | 0;\n                    x2 ^= u << 9 | u >>> 32 - 9;\n                    u = x2 + x14 | 0;\n                    x6 ^= u << 13 | u >>> 32 - 13;\n                    u = x6 + x2 | 0;\n                    x10 ^= u << 18 | u >>> 32 - 18;\n                    u = x15 + x11 | 0;\n                    x3 ^= u << 7 | u >>> 32 - 7;\n                    u = x3 + x15 | 0;\n                    x7 ^= u << 9 | u >>> 32 - 9;\n                    u = x7 + x3 | 0;\n                    x11 ^= u << 13 | u >>> 32 - 13;\n                    u = x11 + x7 | 0;\n                    x15 ^= u << 18 | u >>> 32 - 18;\n                    u = x0 + x3 | 0;\n                    x1 ^= u << 7 | u >>> 32 - 7;\n                    u = x1 + x0 | 0;\n                    x2 ^= u << 9 | u >>> 32 - 9;\n                    u = x2 + x1 | 0;\n                    x3 ^= u << 13 | u >>> 32 - 13;\n                    u = x3 + x2 | 0;\n                    x0 ^= u << 18 | u >>> 32 - 18;\n                    u = x5 + x4 | 0;\n                    x6 ^= u << 7 | u >>> 32 - 7;\n                    u = x6 + x5 | 0;\n                    x7 ^= u << 9 | u >>> 32 - 9;\n                    u = x7 + x6 | 0;\n                    x4 ^= u << 13 | u >>> 32 - 13;\n                    u = x4 + x7 | 0;\n                    x5 ^= u << 18 | u >>> 32 - 18;\n                    u = x10 + x9 | 0;\n                    x11 ^= u << 7 | u >>> 32 - 7;\n                    u = x11 + x10 | 0;\n                    x8 ^= u << 9 | u >>> 32 - 9;\n                    u = x8 + x11 | 0;\n                    x9 ^= u << 13 | u >>> 32 - 13;\n                    u = x9 + x8 | 0;\n                    x10 ^= u << 18 | u >>> 32 - 18;\n                    u = x15 + x14 | 0;\n                    x12 ^= u << 7 | u >>> 32 - 7;\n                    u = x12 + x15 | 0;\n                    x13 ^= u << 9 | u >>> 32 - 9;\n                    u = x13 + x12 | 0;\n                    x14 ^= u << 13 | u >>> 32 - 13;\n                    u = x14 + x13 | 0;\n                    x15 ^= u << 18 | u >>> 32 - 18;\n                }\n                x0 = x0 + j0 | 0;\n                x1 = x1 + j1 | 0;\n                x2 = x2 + j2 | 0;\n                x3 = x3 + j3 | 0;\n                x4 = x4 + j4 | 0;\n                x5 = x5 + j5 | 0;\n                x6 = x6 + j6 | 0;\n                x7 = x7 + j7 | 0;\n                x8 = x8 + j8 | 0;\n                x9 = x9 + j9 | 0;\n                x10 = x10 + j10 | 0;\n                x11 = x11 + j11 | 0;\n                x12 = x12 + j12 | 0;\n                x13 = x13 + j13 | 0;\n                x14 = x14 + j14 | 0;\n                x15 = x15 + j15 | 0;\n                o[0] = x0 >>> 0 & 0xff;\n                o[1] = x0 >>> 8 & 0xff;\n                o[2] = x0 >>> 16 & 0xff;\n                o[3] = x0 >>> 24 & 0xff;\n                o[4] = x1 >>> 0 & 0xff;\n                o[5] = x1 >>> 8 & 0xff;\n                o[6] = x1 >>> 16 & 0xff;\n                o[7] = x1 >>> 24 & 0xff;\n                o[8] = x2 >>> 0 & 0xff;\n                o[9] = x2 >>> 8 & 0xff;\n                o[10] = x2 >>> 16 & 0xff;\n                o[11] = x2 >>> 24 & 0xff;\n                o[12] = x3 >>> 0 & 0xff;\n                o[13] = x3 >>> 8 & 0xff;\n                o[14] = x3 >>> 16 & 0xff;\n                o[15] = x3 >>> 24 & 0xff;\n                o[16] = x4 >>> 0 & 0xff;\n                o[17] = x4 >>> 8 & 0xff;\n                o[18] = x4 >>> 16 & 0xff;\n                o[19] = x4 >>> 24 & 0xff;\n                o[20] = x5 >>> 0 & 0xff;\n                o[21] = x5 >>> 8 & 0xff;\n                o[22] = x5 >>> 16 & 0xff;\n                o[23] = x5 >>> 24 & 0xff;\n                o[24] = x6 >>> 0 & 0xff;\n                o[25] = x6 >>> 8 & 0xff;\n                o[26] = x6 >>> 16 & 0xff;\n                o[27] = x6 >>> 24 & 0xff;\n                o[28] = x7 >>> 0 & 0xff;\n                o[29] = x7 >>> 8 & 0xff;\n                o[30] = x7 >>> 16 & 0xff;\n                o[31] = x7 >>> 24 & 0xff;\n                o[32] = x8 >>> 0 & 0xff;\n                o[33] = x8 >>> 8 & 0xff;\n                o[34] = x8 >>> 16 & 0xff;\n                o[35] = x8 >>> 24 & 0xff;\n                o[36] = x9 >>> 0 & 0xff;\n                o[37] = x9 >>> 8 & 0xff;\n                o[38] = x9 >>> 16 & 0xff;\n                o[39] = x9 >>> 24 & 0xff;\n                o[40] = x10 >>> 0 & 0xff;\n                o[41] = x10 >>> 8 & 0xff;\n                o[42] = x10 >>> 16 & 0xff;\n                o[43] = x10 >>> 24 & 0xff;\n                o[44] = x11 >>> 0 & 0xff;\n                o[45] = x11 >>> 8 & 0xff;\n                o[46] = x11 >>> 16 & 0xff;\n                o[47] = x11 >>> 24 & 0xff;\n                o[48] = x12 >>> 0 & 0xff;\n                o[49] = x12 >>> 8 & 0xff;\n                o[50] = x12 >>> 16 & 0xff;\n                o[51] = x12 >>> 24 & 0xff;\n                o[52] = x13 >>> 0 & 0xff;\n                o[53] = x13 >>> 8 & 0xff;\n                o[54] = x13 >>> 16 & 0xff;\n                o[55] = x13 >>> 24 & 0xff;\n                o[56] = x14 >>> 0 & 0xff;\n                o[57] = x14 >>> 8 & 0xff;\n                o[58] = x14 >>> 16 & 0xff;\n                o[59] = x14 >>> 24 & 0xff;\n                o[60] = x15 >>> 0 & 0xff;\n                o[61] = x15 >>> 8 & 0xff;\n                o[62] = x15 >>> 16 & 0xff;\n                o[63] = x15 >>> 24 & 0xff;\n            }\n            function core_hsalsa20(o, p, k, c) {\n                var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;\n                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;\n                for(var i = 0; i < 20; i += 2){\n                    u = x0 + x12 | 0;\n                    x4 ^= u << 7 | u >>> 32 - 7;\n                    u = x4 + x0 | 0;\n                    x8 ^= u << 9 | u >>> 32 - 9;\n                    u = x8 + x4 | 0;\n                    x12 ^= u << 13 | u >>> 32 - 13;\n                    u = x12 + x8 | 0;\n                    x0 ^= u << 18 | u >>> 32 - 18;\n                    u = x5 + x1 | 0;\n                    x9 ^= u << 7 | u >>> 32 - 7;\n                    u = x9 + x5 | 0;\n                    x13 ^= u << 9 | u >>> 32 - 9;\n                    u = x13 + x9 | 0;\n                    x1 ^= u << 13 | u >>> 32 - 13;\n                    u = x1 + x13 | 0;\n                    x5 ^= u << 18 | u >>> 32 - 18;\n                    u = x10 + x6 | 0;\n                    x14 ^= u << 7 | u >>> 32 - 7;\n                    u = x14 + x10 | 0;\n                    x2 ^= u << 9 | u >>> 32 - 9;\n                    u = x2 + x14 | 0;\n                    x6 ^= u << 13 | u >>> 32 - 13;\n                    u = x6 + x2 | 0;\n                    x10 ^= u << 18 | u >>> 32 - 18;\n                    u = x15 + x11 | 0;\n                    x3 ^= u << 7 | u >>> 32 - 7;\n                    u = x3 + x15 | 0;\n                    x7 ^= u << 9 | u >>> 32 - 9;\n                    u = x7 + x3 | 0;\n                    x11 ^= u << 13 | u >>> 32 - 13;\n                    u = x11 + x7 | 0;\n                    x15 ^= u << 18 | u >>> 32 - 18;\n                    u = x0 + x3 | 0;\n                    x1 ^= u << 7 | u >>> 32 - 7;\n                    u = x1 + x0 | 0;\n                    x2 ^= u << 9 | u >>> 32 - 9;\n                    u = x2 + x1 | 0;\n                    x3 ^= u << 13 | u >>> 32 - 13;\n                    u = x3 + x2 | 0;\n                    x0 ^= u << 18 | u >>> 32 - 18;\n                    u = x5 + x4 | 0;\n                    x6 ^= u << 7 | u >>> 32 - 7;\n                    u = x6 + x5 | 0;\n                    x7 ^= u << 9 | u >>> 32 - 9;\n                    u = x7 + x6 | 0;\n                    x4 ^= u << 13 | u >>> 32 - 13;\n                    u = x4 + x7 | 0;\n                    x5 ^= u << 18 | u >>> 32 - 18;\n                    u = x10 + x9 | 0;\n                    x11 ^= u << 7 | u >>> 32 - 7;\n                    u = x11 + x10 | 0;\n                    x8 ^= u << 9 | u >>> 32 - 9;\n                    u = x8 + x11 | 0;\n                    x9 ^= u << 13 | u >>> 32 - 13;\n                    u = x9 + x8 | 0;\n                    x10 ^= u << 18 | u >>> 32 - 18;\n                    u = x15 + x14 | 0;\n                    x12 ^= u << 7 | u >>> 32 - 7;\n                    u = x12 + x15 | 0;\n                    x13 ^= u << 9 | u >>> 32 - 9;\n                    u = x13 + x12 | 0;\n                    x14 ^= u << 13 | u >>> 32 - 13;\n                    u = x14 + x13 | 0;\n                    x15 ^= u << 18 | u >>> 32 - 18;\n                }\n                o[0] = x0 >>> 0 & 0xff;\n                o[1] = x0 >>> 8 & 0xff;\n                o[2] = x0 >>> 16 & 0xff;\n                o[3] = x0 >>> 24 & 0xff;\n                o[4] = x5 >>> 0 & 0xff;\n                o[5] = x5 >>> 8 & 0xff;\n                o[6] = x5 >>> 16 & 0xff;\n                o[7] = x5 >>> 24 & 0xff;\n                o[8] = x10 >>> 0 & 0xff;\n                o[9] = x10 >>> 8 & 0xff;\n                o[10] = x10 >>> 16 & 0xff;\n                o[11] = x10 >>> 24 & 0xff;\n                o[12] = x15 >>> 0 & 0xff;\n                o[13] = x15 >>> 8 & 0xff;\n                o[14] = x15 >>> 16 & 0xff;\n                o[15] = x15 >>> 24 & 0xff;\n                o[16] = x6 >>> 0 & 0xff;\n                o[17] = x6 >>> 8 & 0xff;\n                o[18] = x6 >>> 16 & 0xff;\n                o[19] = x6 >>> 24 & 0xff;\n                o[20] = x7 >>> 0 & 0xff;\n                o[21] = x7 >>> 8 & 0xff;\n                o[22] = x7 >>> 16 & 0xff;\n                o[23] = x7 >>> 24 & 0xff;\n                o[24] = x8 >>> 0 & 0xff;\n                o[25] = x8 >>> 8 & 0xff;\n                o[26] = x8 >>> 16 & 0xff;\n                o[27] = x8 >>> 24 & 0xff;\n                o[28] = x9 >>> 0 & 0xff;\n                o[29] = x9 >>> 8 & 0xff;\n                o[30] = x9 >>> 16 & 0xff;\n                o[31] = x9 >>> 24 & 0xff;\n            }\n            function crypto_core_salsa20(out, inp, k, c) {\n                core_salsa20(out, inp, k, c);\n            }\n            function crypto_core_hsalsa20(out, inp, k, c) {\n                core_hsalsa20(out, inp, k, c);\n            }\n            var sigma = new Uint8Array([\n                101,\n                120,\n                112,\n                97,\n                110,\n                100,\n                32,\n                51,\n                50,\n                45,\n                98,\n                121,\n                116,\n                101,\n                32,\n                107\n            ]);\n            // \"expand 32-byte k\"\n            function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {\n                var z = new Uint8Array(16), x = new Uint8Array(64);\n                var u, i;\n                for(i = 0; i < 16; i++)z[i] = 0;\n                for(i = 0; i < 8; i++)z[i] = n[i];\n                while(b >= 64){\n                    crypto_core_salsa20(x, z, k, sigma);\n                    for(i = 0; i < 64; i++)c[cpos + i] = m[mpos + i] ^ x[i];\n                    u = 1;\n                    for(i = 8; i < 16; i++){\n                        u = u + (z[i] & 0xff) | 0;\n                        z[i] = u & 0xff;\n                        u >>>= 8;\n                    }\n                    b -= 64;\n                    cpos += 64;\n                    mpos += 64;\n                }\n                if (b > 0) {\n                    crypto_core_salsa20(x, z, k, sigma);\n                    for(i = 0; i < b; i++)c[cpos + i] = m[mpos + i] ^ x[i];\n                }\n                return 0;\n            }\n            function crypto_stream_salsa20(c, cpos, b, n, k) {\n                var z = new Uint8Array(16), x = new Uint8Array(64);\n                var u, i;\n                for(i = 0; i < 16; i++)z[i] = 0;\n                for(i = 0; i < 8; i++)z[i] = n[i];\n                while(b >= 64){\n                    crypto_core_salsa20(x, z, k, sigma);\n                    for(i = 0; i < 64; i++)c[cpos + i] = x[i];\n                    u = 1;\n                    for(i = 8; i < 16; i++){\n                        u = u + (z[i] & 0xff) | 0;\n                        z[i] = u & 0xff;\n                        u >>>= 8;\n                    }\n                    b -= 64;\n                    cpos += 64;\n                }\n                if (b > 0) {\n                    crypto_core_salsa20(x, z, k, sigma);\n                    for(i = 0; i < b; i++)c[cpos + i] = x[i];\n                }\n                return 0;\n            }\n            function crypto_stream(c, cpos, d, n, k) {\n                var s = new Uint8Array(32);\n                crypto_core_hsalsa20(s, n, k, sigma);\n                var sn = new Uint8Array(8);\n                for(var i = 0; i < 8; i++)sn[i] = n[i + 16];\n                return crypto_stream_salsa20(c, cpos, d, sn, s);\n            }\n            function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {\n                var s = new Uint8Array(32);\n                crypto_core_hsalsa20(s, n, k, sigma);\n                var sn = new Uint8Array(8);\n                for(var i = 0; i < 8; i++)sn[i] = n[i + 16];\n                return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);\n            }\n            /*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/ var poly1305 = function(key) {\n                this.buffer = new Uint8Array(16);\n                this.r = new Uint16Array(10);\n                this.h = new Uint16Array(10);\n                this.pad = new Uint16Array(8);\n                this.leftover = 0;\n                this.fin = 0;\n                var t0, t1, t2, t3, t4, t5, t6, t7;\n                t0 = key[0] & 0xff | (key[1] & 0xff) << 8;\n                this.r[0] = t0 & 0x1fff;\n                t1 = key[2] & 0xff | (key[3] & 0xff) << 8;\n                this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;\n                t2 = key[4] & 0xff | (key[5] & 0xff) << 8;\n                this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;\n                t3 = key[6] & 0xff | (key[7] & 0xff) << 8;\n                this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;\n                t4 = key[8] & 0xff | (key[9] & 0xff) << 8;\n                this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;\n                this.r[5] = t4 >>> 1 & 0x1ffe;\n                t5 = key[10] & 0xff | (key[11] & 0xff) << 8;\n                this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;\n                t6 = key[12] & 0xff | (key[13] & 0xff) << 8;\n                this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;\n                t7 = key[14] & 0xff | (key[15] & 0xff) << 8;\n                this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;\n                this.r[9] = t7 >>> 5 & 0x007f;\n                this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n                this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n                this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n                this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n                this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n                this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n                this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n                this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n            };\n            poly1305.prototype.blocks = function(m, mpos, bytes) {\n                var hibit = this.fin ? 0 : 1 << 11;\n                var t0, t1, t2, t3, t4, t5, t6, t7, c;\n                var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n                var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];\n                var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];\n                while(bytes >= 16){\n                    t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;\n                    h0 += t0 & 0x1fff;\n                    t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;\n                    h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;\n                    t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;\n                    h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;\n                    t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;\n                    h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;\n                    t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;\n                    h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;\n                    h5 += t4 >>> 1 & 0x1fff;\n                    t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;\n                    h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;\n                    t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;\n                    h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;\n                    t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;\n                    h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;\n                    h9 += t7 >>> 5 | hibit;\n                    c = 0;\n                    d0 = c;\n                    d0 += h0 * r0;\n                    d0 += h1 * (5 * r9);\n                    d0 += h2 * (5 * r8);\n                    d0 += h3 * (5 * r7);\n                    d0 += h4 * (5 * r6);\n                    c = d0 >>> 13;\n                    d0 &= 0x1fff;\n                    d0 += h5 * (5 * r5);\n                    d0 += h6 * (5 * r4);\n                    d0 += h7 * (5 * r3);\n                    d0 += h8 * (5 * r2);\n                    d0 += h9 * (5 * r1);\n                    c += d0 >>> 13;\n                    d0 &= 0x1fff;\n                    d1 = c;\n                    d1 += h0 * r1;\n                    d1 += h1 * r0;\n                    d1 += h2 * (5 * r9);\n                    d1 += h3 * (5 * r8);\n                    d1 += h4 * (5 * r7);\n                    c = d1 >>> 13;\n                    d1 &= 0x1fff;\n                    d1 += h5 * (5 * r6);\n                    d1 += h6 * (5 * r5);\n                    d1 += h7 * (5 * r4);\n                    d1 += h8 * (5 * r3);\n                    d1 += h9 * (5 * r2);\n                    c += d1 >>> 13;\n                    d1 &= 0x1fff;\n                    d2 = c;\n                    d2 += h0 * r2;\n                    d2 += h1 * r1;\n                    d2 += h2 * r0;\n                    d2 += h3 * (5 * r9);\n                    d2 += h4 * (5 * r8);\n                    c = d2 >>> 13;\n                    d2 &= 0x1fff;\n                    d2 += h5 * (5 * r7);\n                    d2 += h6 * (5 * r6);\n                    d2 += h7 * (5 * r5);\n                    d2 += h8 * (5 * r4);\n                    d2 += h9 * (5 * r3);\n                    c += d2 >>> 13;\n                    d2 &= 0x1fff;\n                    d3 = c;\n                    d3 += h0 * r3;\n                    d3 += h1 * r2;\n                    d3 += h2 * r1;\n                    d3 += h3 * r0;\n                    d3 += h4 * (5 * r9);\n                    c = d3 >>> 13;\n                    d3 &= 0x1fff;\n                    d3 += h5 * (5 * r8);\n                    d3 += h6 * (5 * r7);\n                    d3 += h7 * (5 * r6);\n                    d3 += h8 * (5 * r5);\n                    d3 += h9 * (5 * r4);\n                    c += d3 >>> 13;\n                    d3 &= 0x1fff;\n                    d4 = c;\n                    d4 += h0 * r4;\n                    d4 += h1 * r3;\n                    d4 += h2 * r2;\n                    d4 += h3 * r1;\n                    d4 += h4 * r0;\n                    c = d4 >>> 13;\n                    d4 &= 0x1fff;\n                    d4 += h5 * (5 * r9);\n                    d4 += h6 * (5 * r8);\n                    d4 += h7 * (5 * r7);\n                    d4 += h8 * (5 * r6);\n                    d4 += h9 * (5 * r5);\n                    c += d4 >>> 13;\n                    d4 &= 0x1fff;\n                    d5 = c;\n                    d5 += h0 * r5;\n                    d5 += h1 * r4;\n                    d5 += h2 * r3;\n                    d5 += h3 * r2;\n                    d5 += h4 * r1;\n                    c = d5 >>> 13;\n                    d5 &= 0x1fff;\n                    d5 += h5 * r0;\n                    d5 += h6 * (5 * r9);\n                    d5 += h7 * (5 * r8);\n                    d5 += h8 * (5 * r7);\n                    d5 += h9 * (5 * r6);\n                    c += d5 >>> 13;\n                    d5 &= 0x1fff;\n                    d6 = c;\n                    d6 += h0 * r6;\n                    d6 += h1 * r5;\n                    d6 += h2 * r4;\n                    d6 += h3 * r3;\n                    d6 += h4 * r2;\n                    c = d6 >>> 13;\n                    d6 &= 0x1fff;\n                    d6 += h5 * r1;\n                    d6 += h6 * r0;\n                    d6 += h7 * (5 * r9);\n                    d6 += h8 * (5 * r8);\n                    d6 += h9 * (5 * r7);\n                    c += d6 >>> 13;\n                    d6 &= 0x1fff;\n                    d7 = c;\n                    d7 += h0 * r7;\n                    d7 += h1 * r6;\n                    d7 += h2 * r5;\n                    d7 += h3 * r4;\n                    d7 += h4 * r3;\n                    c = d7 >>> 13;\n                    d7 &= 0x1fff;\n                    d7 += h5 * r2;\n                    d7 += h6 * r1;\n                    d7 += h7 * r0;\n                    d7 += h8 * (5 * r9);\n                    d7 += h9 * (5 * r8);\n                    c += d7 >>> 13;\n                    d7 &= 0x1fff;\n                    d8 = c;\n                    d8 += h0 * r8;\n                    d8 += h1 * r7;\n                    d8 += h2 * r6;\n                    d8 += h3 * r5;\n                    d8 += h4 * r4;\n                    c = d8 >>> 13;\n                    d8 &= 0x1fff;\n                    d8 += h5 * r3;\n                    d8 += h6 * r2;\n                    d8 += h7 * r1;\n                    d8 += h8 * r0;\n                    d8 += h9 * (5 * r9);\n                    c += d8 >>> 13;\n                    d8 &= 0x1fff;\n                    d9 = c;\n                    d9 += h0 * r9;\n                    d9 += h1 * r8;\n                    d9 += h2 * r7;\n                    d9 += h3 * r6;\n                    d9 += h4 * r5;\n                    c = d9 >>> 13;\n                    d9 &= 0x1fff;\n                    d9 += h5 * r4;\n                    d9 += h6 * r3;\n                    d9 += h7 * r2;\n                    d9 += h8 * r1;\n                    d9 += h9 * r0;\n                    c += d9 >>> 13;\n                    d9 &= 0x1fff;\n                    c = (c << 2) + c | 0;\n                    c = c + d0 | 0;\n                    d0 = c & 0x1fff;\n                    c = c >>> 13;\n                    d1 += c;\n                    h0 = d0;\n                    h1 = d1;\n                    h2 = d2;\n                    h3 = d3;\n                    h4 = d4;\n                    h5 = d5;\n                    h6 = d6;\n                    h7 = d7;\n                    h8 = d8;\n                    h9 = d9;\n                    mpos += 16;\n                    bytes -= 16;\n                }\n                this.h[0] = h0;\n                this.h[1] = h1;\n                this.h[2] = h2;\n                this.h[3] = h3;\n                this.h[4] = h4;\n                this.h[5] = h5;\n                this.h[6] = h6;\n                this.h[7] = h7;\n                this.h[8] = h8;\n                this.h[9] = h9;\n            };\n            poly1305.prototype.finish = function(mac, macpos) {\n                var g = new Uint16Array(10);\n                var c, mask, f, i;\n                if (this.leftover) {\n                    i = this.leftover;\n                    this.buffer[i++] = 1;\n                    for(; i < 16; i++)this.buffer[i] = 0;\n                    this.fin = 1;\n                    this.blocks(this.buffer, 0, 16);\n                }\n                c = this.h[1] >>> 13;\n                this.h[1] &= 0x1fff;\n                for(i = 2; i < 10; i++){\n                    this.h[i] += c;\n                    c = this.h[i] >>> 13;\n                    this.h[i] &= 0x1fff;\n                }\n                this.h[0] += c * 5;\n                c = this.h[0] >>> 13;\n                this.h[0] &= 0x1fff;\n                this.h[1] += c;\n                c = this.h[1] >>> 13;\n                this.h[1] &= 0x1fff;\n                this.h[2] += c;\n                g[0] = this.h[0] + 5;\n                c = g[0] >>> 13;\n                g[0] &= 0x1fff;\n                for(i = 1; i < 10; i++){\n                    g[i] = this.h[i] + c;\n                    c = g[i] >>> 13;\n                    g[i] &= 0x1fff;\n                }\n                g[9] -= 1 << 13;\n                mask = (c ^ 1) - 1;\n                for(i = 0; i < 10; i++)g[i] &= mask;\n                mask = ~mask;\n                for(i = 0; i < 10; i++)this.h[i] = this.h[i] & mask | g[i];\n                this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;\n                this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;\n                this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;\n                this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;\n                this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;\n                this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;\n                this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;\n                this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;\n                f = this.h[0] + this.pad[0];\n                this.h[0] = f & 0xffff;\n                for(i = 1; i < 8; i++){\n                    f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;\n                    this.h[i] = f & 0xffff;\n                }\n                mac[macpos + 0] = this.h[0] >>> 0 & 0xff;\n                mac[macpos + 1] = this.h[0] >>> 8 & 0xff;\n                mac[macpos + 2] = this.h[1] >>> 0 & 0xff;\n                mac[macpos + 3] = this.h[1] >>> 8 & 0xff;\n                mac[macpos + 4] = this.h[2] >>> 0 & 0xff;\n                mac[macpos + 5] = this.h[2] >>> 8 & 0xff;\n                mac[macpos + 6] = this.h[3] >>> 0 & 0xff;\n                mac[macpos + 7] = this.h[3] >>> 8 & 0xff;\n                mac[macpos + 8] = this.h[4] >>> 0 & 0xff;\n                mac[macpos + 9] = this.h[4] >>> 8 & 0xff;\n                mac[macpos + 10] = this.h[5] >>> 0 & 0xff;\n                mac[macpos + 11] = this.h[5] >>> 8 & 0xff;\n                mac[macpos + 12] = this.h[6] >>> 0 & 0xff;\n                mac[macpos + 13] = this.h[6] >>> 8 & 0xff;\n                mac[macpos + 14] = this.h[7] >>> 0 & 0xff;\n                mac[macpos + 15] = this.h[7] >>> 8 & 0xff;\n            };\n            poly1305.prototype.update = function(m, mpos, bytes) {\n                var i, want;\n                if (this.leftover) {\n                    want = 16 - this.leftover;\n                    if (want > bytes) want = bytes;\n                    for(i = 0; i < want; i++)this.buffer[this.leftover + i] = m[mpos + i];\n                    bytes -= want;\n                    mpos += want;\n                    this.leftover += want;\n                    if (this.leftover < 16) return;\n                    this.blocks(this.buffer, 0, 16);\n                    this.leftover = 0;\n                }\n                if (bytes >= 16) {\n                    want = bytes - bytes % 16;\n                    this.blocks(m, mpos, want);\n                    mpos += want;\n                    bytes -= want;\n                }\n                if (bytes) {\n                    for(i = 0; i < bytes; i++)this.buffer[this.leftover + i] = m[mpos + i];\n                    this.leftover += bytes;\n                }\n            };\n            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n                var s = new poly1305(k);\n                s.update(m, mpos, n);\n                s.finish(out, outpos);\n                return 0;\n            }\n            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n                var x = new Uint8Array(16);\n                crypto_onetimeauth(x, 0, m, mpos, n, k);\n                return crypto_verify_16(h, hpos, x, 0);\n            }\n            function crypto_secretbox(c, m, d, n, k) {\n                var i;\n                if (d < 32) return -1;\n                crypto_stream_xor(c, 0, m, 0, d, n, k);\n                crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n                for(i = 0; i < 16; i++)c[i] = 0;\n                return 0;\n            }\n            function crypto_secretbox_open(m, c, d, n, k) {\n                var i;\n                var x = new Uint8Array(32);\n                if (d < 32) return -1;\n                crypto_stream(x, 0, 32, n, k);\n                if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;\n                crypto_stream_xor(m, 0, c, 0, d, n, k);\n                for(i = 0; i < 32; i++)m[i] = 0;\n                return 0;\n            }\n            function set25519(r, a) {\n                var i;\n                for(i = 0; i < 16; i++)r[i] = a[i] | 0;\n            }\n            function car25519(o) {\n                var i, v, c = 1;\n                for(i = 0; i < 16; i++){\n                    v = o[i] + c + 65535;\n                    c = Math.floor(v / 65536);\n                    o[i] = v - c * 65536;\n                }\n                o[0] += c - 1 + 37 * (c - 1);\n            }\n            function sel25519(p, q, b) {\n                var t, c = ~(b - 1);\n                for(var i = 0; i < 16; i++){\n                    t = c & (p[i] ^ q[i]);\n                    p[i] ^= t;\n                    q[i] ^= t;\n                }\n            }\n            function pack25519(o, n) {\n                var i, j, b;\n                var m = gf(), t = gf();\n                for(i = 0; i < 16; i++)t[i] = n[i];\n                car25519(t);\n                car25519(t);\n                car25519(t);\n                for(j = 0; j < 2; j++){\n                    m[0] = t[0] - 0xffed;\n                    for(i = 1; i < 15; i++){\n                        m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n                        m[i - 1] &= 0xffff;\n                    }\n                    m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n                    b = m[15] >> 16 & 1;\n                    m[14] &= 0xffff;\n                    sel25519(t, m, 1 - b);\n                }\n                for(i = 0; i < 16; i++){\n                    o[2 * i] = t[i] & 0xff;\n                    o[2 * i + 1] = t[i] >> 8;\n                }\n            }\n            function neq25519(a, b) {\n                var c = new Uint8Array(32), d = new Uint8Array(32);\n                pack25519(c, a);\n                pack25519(d, b);\n                return crypto_verify_32(c, 0, d, 0);\n            }\n            function par25519(a) {\n                var d = new Uint8Array(32);\n                pack25519(d, a);\n                return d[0] & 1;\n            }\n            function unpack25519(o, n) {\n                var i;\n                for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n                o[15] &= 0x7fff;\n            }\n            function A(o, a, b) {\n                for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];\n            }\n            function Z(o, a, b) {\n                for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];\n            }\n            function M(o, a, b) {\n                var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n                v = a[0];\n                t0 += v * b0;\n                t1 += v * b1;\n                t2 += v * b2;\n                t3 += v * b3;\n                t4 += v * b4;\n                t5 += v * b5;\n                t6 += v * b6;\n                t7 += v * b7;\n                t8 += v * b8;\n                t9 += v * b9;\n                t10 += v * b10;\n                t11 += v * b11;\n                t12 += v * b12;\n                t13 += v * b13;\n                t14 += v * b14;\n                t15 += v * b15;\n                v = a[1];\n                t1 += v * b0;\n                t2 += v * b1;\n                t3 += v * b2;\n                t4 += v * b3;\n                t5 += v * b4;\n                t6 += v * b5;\n                t7 += v * b6;\n                t8 += v * b7;\n                t9 += v * b8;\n                t10 += v * b9;\n                t11 += v * b10;\n                t12 += v * b11;\n                t13 += v * b12;\n                t14 += v * b13;\n                t15 += v * b14;\n                t16 += v * b15;\n                v = a[2];\n                t2 += v * b0;\n                t3 += v * b1;\n                t4 += v * b2;\n                t5 += v * b3;\n                t6 += v * b4;\n                t7 += v * b5;\n                t8 += v * b6;\n                t9 += v * b7;\n                t10 += v * b8;\n                t11 += v * b9;\n                t12 += v * b10;\n                t13 += v * b11;\n                t14 += v * b12;\n                t15 += v * b13;\n                t16 += v * b14;\n                t17 += v * b15;\n                v = a[3];\n                t3 += v * b0;\n                t4 += v * b1;\n                t5 += v * b2;\n                t6 += v * b3;\n                t7 += v * b4;\n                t8 += v * b5;\n                t9 += v * b6;\n                t10 += v * b7;\n                t11 += v * b8;\n                t12 += v * b9;\n                t13 += v * b10;\n                t14 += v * b11;\n                t15 += v * b12;\n                t16 += v * b13;\n                t17 += v * b14;\n                t18 += v * b15;\n                v = a[4];\n                t4 += v * b0;\n                t5 += v * b1;\n                t6 += v * b2;\n                t7 += v * b3;\n                t8 += v * b4;\n                t9 += v * b5;\n                t10 += v * b6;\n                t11 += v * b7;\n                t12 += v * b8;\n                t13 += v * b9;\n                t14 += v * b10;\n                t15 += v * b11;\n                t16 += v * b12;\n                t17 += v * b13;\n                t18 += v * b14;\n                t19 += v * b15;\n                v = a[5];\n                t5 += v * b0;\n                t6 += v * b1;\n                t7 += v * b2;\n                t8 += v * b3;\n                t9 += v * b4;\n                t10 += v * b5;\n                t11 += v * b6;\n                t12 += v * b7;\n                t13 += v * b8;\n                t14 += v * b9;\n                t15 += v * b10;\n                t16 += v * b11;\n                t17 += v * b12;\n                t18 += v * b13;\n                t19 += v * b14;\n                t20 += v * b15;\n                v = a[6];\n                t6 += v * b0;\n                t7 += v * b1;\n                t8 += v * b2;\n                t9 += v * b3;\n                t10 += v * b4;\n                t11 += v * b5;\n                t12 += v * b6;\n                t13 += v * b7;\n                t14 += v * b8;\n                t15 += v * b9;\n                t16 += v * b10;\n                t17 += v * b11;\n                t18 += v * b12;\n                t19 += v * b13;\n                t20 += v * b14;\n                t21 += v * b15;\n                v = a[7];\n                t7 += v * b0;\n                t8 += v * b1;\n                t9 += v * b2;\n                t10 += v * b3;\n                t11 += v * b4;\n                t12 += v * b5;\n                t13 += v * b6;\n                t14 += v * b7;\n                t15 += v * b8;\n                t16 += v * b9;\n                t17 += v * b10;\n                t18 += v * b11;\n                t19 += v * b12;\n                t20 += v * b13;\n                t21 += v * b14;\n                t22 += v * b15;\n                v = a[8];\n                t8 += v * b0;\n                t9 += v * b1;\n                t10 += v * b2;\n                t11 += v * b3;\n                t12 += v * b4;\n                t13 += v * b5;\n                t14 += v * b6;\n                t15 += v * b7;\n                t16 += v * b8;\n                t17 += v * b9;\n                t18 += v * b10;\n                t19 += v * b11;\n                t20 += v * b12;\n                t21 += v * b13;\n                t22 += v * b14;\n                t23 += v * b15;\n                v = a[9];\n                t9 += v * b0;\n                t10 += v * b1;\n                t11 += v * b2;\n                t12 += v * b3;\n                t13 += v * b4;\n                t14 += v * b5;\n                t15 += v * b6;\n                t16 += v * b7;\n                t17 += v * b8;\n                t18 += v * b9;\n                t19 += v * b10;\n                t20 += v * b11;\n                t21 += v * b12;\n                t22 += v * b13;\n                t23 += v * b14;\n                t24 += v * b15;\n                v = a[10];\n                t10 += v * b0;\n                t11 += v * b1;\n                t12 += v * b2;\n                t13 += v * b3;\n                t14 += v * b4;\n                t15 += v * b5;\n                t16 += v * b6;\n                t17 += v * b7;\n                t18 += v * b8;\n                t19 += v * b9;\n                t20 += v * b10;\n                t21 += v * b11;\n                t22 += v * b12;\n                t23 += v * b13;\n                t24 += v * b14;\n                t25 += v * b15;\n                v = a[11];\n                t11 += v * b0;\n                t12 += v * b1;\n                t13 += v * b2;\n                t14 += v * b3;\n                t15 += v * b4;\n                t16 += v * b5;\n                t17 += v * b6;\n                t18 += v * b7;\n                t19 += v * b8;\n                t20 += v * b9;\n                t21 += v * b10;\n                t22 += v * b11;\n                t23 += v * b12;\n                t24 += v * b13;\n                t25 += v * b14;\n                t26 += v * b15;\n                v = a[12];\n                t12 += v * b0;\n                t13 += v * b1;\n                t14 += v * b2;\n                t15 += v * b3;\n                t16 += v * b4;\n                t17 += v * b5;\n                t18 += v * b6;\n                t19 += v * b7;\n                t20 += v * b8;\n                t21 += v * b9;\n                t22 += v * b10;\n                t23 += v * b11;\n                t24 += v * b12;\n                t25 += v * b13;\n                t26 += v * b14;\n                t27 += v * b15;\n                v = a[13];\n                t13 += v * b0;\n                t14 += v * b1;\n                t15 += v * b2;\n                t16 += v * b3;\n                t17 += v * b4;\n                t18 += v * b5;\n                t19 += v * b6;\n                t20 += v * b7;\n                t21 += v * b8;\n                t22 += v * b9;\n                t23 += v * b10;\n                t24 += v * b11;\n                t25 += v * b12;\n                t26 += v * b13;\n                t27 += v * b14;\n                t28 += v * b15;\n                v = a[14];\n                t14 += v * b0;\n                t15 += v * b1;\n                t16 += v * b2;\n                t17 += v * b3;\n                t18 += v * b4;\n                t19 += v * b5;\n                t20 += v * b6;\n                t21 += v * b7;\n                t22 += v * b8;\n                t23 += v * b9;\n                t24 += v * b10;\n                t25 += v * b11;\n                t26 += v * b12;\n                t27 += v * b13;\n                t28 += v * b14;\n                t29 += v * b15;\n                v = a[15];\n                t15 += v * b0;\n                t16 += v * b1;\n                t17 += v * b2;\n                t18 += v * b3;\n                t19 += v * b4;\n                t20 += v * b5;\n                t21 += v * b6;\n                t22 += v * b7;\n                t23 += v * b8;\n                t24 += v * b9;\n                t25 += v * b10;\n                t26 += v * b11;\n                t27 += v * b12;\n                t28 += v * b13;\n                t29 += v * b14;\n                t30 += v * b15;\n                t0 += 38 * t16;\n                t1 += 38 * t17;\n                t2 += 38 * t18;\n                t3 += 38 * t19;\n                t4 += 38 * t20;\n                t5 += 38 * t21;\n                t6 += 38 * t22;\n                t7 += 38 * t23;\n                t8 += 38 * t24;\n                t9 += 38 * t25;\n                t10 += 38 * t26;\n                t11 += 38 * t27;\n                t12 += 38 * t28;\n                t13 += 38 * t29;\n                t14 += 38 * t30;\n                // t15 left as is\n                // first car\n                c = 1;\n                v = t0 + c + 65535;\n                c = Math.floor(v / 65536);\n                t0 = v - c * 65536;\n                v = t1 + c + 65535;\n                c = Math.floor(v / 65536);\n                t1 = v - c * 65536;\n                v = t2 + c + 65535;\n                c = Math.floor(v / 65536);\n                t2 = v - c * 65536;\n                v = t3 + c + 65535;\n                c = Math.floor(v / 65536);\n                t3 = v - c * 65536;\n                v = t4 + c + 65535;\n                c = Math.floor(v / 65536);\n                t4 = v - c * 65536;\n                v = t5 + c + 65535;\n                c = Math.floor(v / 65536);\n                t5 = v - c * 65536;\n                v = t6 + c + 65535;\n                c = Math.floor(v / 65536);\n                t6 = v - c * 65536;\n                v = t7 + c + 65535;\n                c = Math.floor(v / 65536);\n                t7 = v - c * 65536;\n                v = t8 + c + 65535;\n                c = Math.floor(v / 65536);\n                t8 = v - c * 65536;\n                v = t9 + c + 65535;\n                c = Math.floor(v / 65536);\n                t9 = v - c * 65536;\n                v = t10 + c + 65535;\n                c = Math.floor(v / 65536);\n                t10 = v - c * 65536;\n                v = t11 + c + 65535;\n                c = Math.floor(v / 65536);\n                t11 = v - c * 65536;\n                v = t12 + c + 65535;\n                c = Math.floor(v / 65536);\n                t12 = v - c * 65536;\n                v = t13 + c + 65535;\n                c = Math.floor(v / 65536);\n                t13 = v - c * 65536;\n                v = t14 + c + 65535;\n                c = Math.floor(v / 65536);\n                t14 = v - c * 65536;\n                v = t15 + c + 65535;\n                c = Math.floor(v / 65536);\n                t15 = v - c * 65536;\n                t0 += c - 1 + 37 * (c - 1);\n                // second car\n                c = 1;\n                v = t0 + c + 65535;\n                c = Math.floor(v / 65536);\n                t0 = v - c * 65536;\n                v = t1 + c + 65535;\n                c = Math.floor(v / 65536);\n                t1 = v - c * 65536;\n                v = t2 + c + 65535;\n                c = Math.floor(v / 65536);\n                t2 = v - c * 65536;\n                v = t3 + c + 65535;\n                c = Math.floor(v / 65536);\n                t3 = v - c * 65536;\n                v = t4 + c + 65535;\n                c = Math.floor(v / 65536);\n                t4 = v - c * 65536;\n                v = t5 + c + 65535;\n                c = Math.floor(v / 65536);\n                t5 = v - c * 65536;\n                v = t6 + c + 65535;\n                c = Math.floor(v / 65536);\n                t6 = v - c * 65536;\n                v = t7 + c + 65535;\n                c = Math.floor(v / 65536);\n                t7 = v - c * 65536;\n                v = t8 + c + 65535;\n                c = Math.floor(v / 65536);\n                t8 = v - c * 65536;\n                v = t9 + c + 65535;\n                c = Math.floor(v / 65536);\n                t9 = v - c * 65536;\n                v = t10 + c + 65535;\n                c = Math.floor(v / 65536);\n                t10 = v - c * 65536;\n                v = t11 + c + 65535;\n                c = Math.floor(v / 65536);\n                t11 = v - c * 65536;\n                v = t12 + c + 65535;\n                c = Math.floor(v / 65536);\n                t12 = v - c * 65536;\n                v = t13 + c + 65535;\n                c = Math.floor(v / 65536);\n                t13 = v - c * 65536;\n                v = t14 + c + 65535;\n                c = Math.floor(v / 65536);\n                t14 = v - c * 65536;\n                v = t15 + c + 65535;\n                c = Math.floor(v / 65536);\n                t15 = v - c * 65536;\n                t0 += c - 1 + 37 * (c - 1);\n                o[0] = t0;\n                o[1] = t1;\n                o[2] = t2;\n                o[3] = t3;\n                o[4] = t4;\n                o[5] = t5;\n                o[6] = t6;\n                o[7] = t7;\n                o[8] = t8;\n                o[9] = t9;\n                o[10] = t10;\n                o[11] = t11;\n                o[12] = t12;\n                o[13] = t13;\n                o[14] = t14;\n                o[15] = t15;\n            }\n            function S(o, a) {\n                M(o, a, a);\n            }\n            function inv25519(o, i) {\n                var c = gf();\n                var a;\n                for(a = 0; a < 16; a++)c[a] = i[a];\n                for(a = 253; a >= 0; a--){\n                    S(c, c);\n                    if (a !== 2 && a !== 4) M(c, c, i);\n                }\n                for(a = 0; a < 16; a++)o[a] = c[a];\n            }\n            function pow2523(o, i) {\n                var c = gf();\n                var a;\n                for(a = 0; a < 16; a++)c[a] = i[a];\n                for(a = 250; a >= 0; a--){\n                    S(c, c);\n                    if (a !== 1) M(c, c, i);\n                }\n                for(a = 0; a < 16; a++)o[a] = c[a];\n            }\n            function crypto_scalarmult(q, n, p) {\n                var z = new Uint8Array(32);\n                var x = new Float64Array(80), r, i;\n                var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();\n                for(i = 0; i < 31; i++)z[i] = n[i];\n                z[31] = n[31] & 127 | 64;\n                z[0] &= 248;\n                unpack25519(x, p);\n                for(i = 0; i < 16; i++){\n                    b[i] = x[i];\n                    d[i] = a[i] = c[i] = 0;\n                }\n                a[0] = d[0] = 1;\n                for(i = 254; i >= 0; --i){\n                    r = z[i >>> 3] >>> (i & 7) & 1;\n                    sel25519(a, b, r);\n                    sel25519(c, d, r);\n                    A(e, a, c);\n                    Z(a, a, c);\n                    A(c, b, d);\n                    Z(b, b, d);\n                    S(d, e);\n                    S(f, a);\n                    M(a, c, a);\n                    M(c, b, e);\n                    A(e, a, c);\n                    Z(a, a, c);\n                    S(b, a);\n                    Z(c, d, f);\n                    M(a, c, _121665);\n                    A(a, a, d);\n                    M(c, c, a);\n                    M(a, d, f);\n                    M(d, b, x);\n                    S(b, e);\n                    sel25519(a, b, r);\n                    sel25519(c, d, r);\n                }\n                for(i = 0; i < 16; i++){\n                    x[i + 16] = a[i];\n                    x[i + 32] = c[i];\n                    x[i + 48] = b[i];\n                    x[i + 64] = d[i];\n                }\n                var x32 = x.subarray(32);\n                var x16 = x.subarray(16);\n                inv25519(x32, x32);\n                M(x16, x16, x32);\n                pack25519(q, x16);\n                return 0;\n            }\n            function crypto_scalarmult_base(q, n) {\n                return crypto_scalarmult(q, n, _9);\n            }\n            function crypto_box_keypair(y, x) {\n                randombytes(x, 32);\n                return crypto_scalarmult_base(y, x);\n            }\n            function crypto_box_beforenm(k, y, x) {\n                var s = new Uint8Array(32);\n                crypto_scalarmult(s, x, y);\n                return crypto_core_hsalsa20(k, _0, s, sigma);\n            }\n            var crypto_box_afternm = crypto_secretbox;\n            var crypto_box_open_afternm = crypto_secretbox_open;\n            function crypto_box(c, m, d, n, y, x) {\n                var k = new Uint8Array(32);\n                crypto_box_beforenm(k, y, x);\n                return crypto_box_afternm(c, m, d, n, k);\n            }\n            function crypto_box_open(m, c, d, n, y, x) {\n                var k = new Uint8Array(32);\n                crypto_box_beforenm(k, y, x);\n                return crypto_box_open_afternm(m, c, d, n, k);\n            }\n            var K = [\n                0x428a2f98,\n                0xd728ae22,\n                0x71374491,\n                0x23ef65cd,\n                0xb5c0fbcf,\n                0xec4d3b2f,\n                0xe9b5dba5,\n                0x8189dbbc,\n                0x3956c25b,\n                0xf348b538,\n                0x59f111f1,\n                0xb605d019,\n                0x923f82a4,\n                0xaf194f9b,\n                0xab1c5ed5,\n                0xda6d8118,\n                0xd807aa98,\n                0xa3030242,\n                0x12835b01,\n                0x45706fbe,\n                0x243185be,\n                0x4ee4b28c,\n                0x550c7dc3,\n                0xd5ffb4e2,\n                0x72be5d74,\n                0xf27b896f,\n                0x80deb1fe,\n                0x3b1696b1,\n                0x9bdc06a7,\n                0x25c71235,\n                0xc19bf174,\n                0xcf692694,\n                0xe49b69c1,\n                0x9ef14ad2,\n                0xefbe4786,\n                0x384f25e3,\n                0x0fc19dc6,\n                0x8b8cd5b5,\n                0x240ca1cc,\n                0x77ac9c65,\n                0x2de92c6f,\n                0x592b0275,\n                0x4a7484aa,\n                0x6ea6e483,\n                0x5cb0a9dc,\n                0xbd41fbd4,\n                0x76f988da,\n                0x831153b5,\n                0x983e5152,\n                0xee66dfab,\n                0xa831c66d,\n                0x2db43210,\n                0xb00327c8,\n                0x98fb213f,\n                0xbf597fc7,\n                0xbeef0ee4,\n                0xc6e00bf3,\n                0x3da88fc2,\n                0xd5a79147,\n                0x930aa725,\n                0x06ca6351,\n                0xe003826f,\n                0x14292967,\n                0x0a0e6e70,\n                0x27b70a85,\n                0x46d22ffc,\n                0x2e1b2138,\n                0x5c26c926,\n                0x4d2c6dfc,\n                0x5ac42aed,\n                0x53380d13,\n                0x9d95b3df,\n                0x650a7354,\n                0x8baf63de,\n                0x766a0abb,\n                0x3c77b2a8,\n                0x81c2c92e,\n                0x47edaee6,\n                0x92722c85,\n                0x1482353b,\n                0xa2bfe8a1,\n                0x4cf10364,\n                0xa81a664b,\n                0xbc423001,\n                0xc24b8b70,\n                0xd0f89791,\n                0xc76c51a3,\n                0x0654be30,\n                0xd192e819,\n                0xd6ef5218,\n                0xd6990624,\n                0x5565a910,\n                0xf40e3585,\n                0x5771202a,\n                0x106aa070,\n                0x32bbd1b8,\n                0x19a4c116,\n                0xb8d2d0c8,\n                0x1e376c08,\n                0x5141ab53,\n                0x2748774c,\n                0xdf8eeb99,\n                0x34b0bcb5,\n                0xe19b48a8,\n                0x391c0cb3,\n                0xc5c95a63,\n                0x4ed8aa4a,\n                0xe3418acb,\n                0x5b9cca4f,\n                0x7763e373,\n                0x682e6ff3,\n                0xd6b2b8a3,\n                0x748f82ee,\n                0x5defb2fc,\n                0x78a5636f,\n                0x43172f60,\n                0x84c87814,\n                0xa1f0ab72,\n                0x8cc70208,\n                0x1a6439ec,\n                0x90befffa,\n                0x23631e28,\n                0xa4506ceb,\n                0xde82bde9,\n                0xbef9a3f7,\n                0xb2c67915,\n                0xc67178f2,\n                0xe372532b,\n                0xca273ece,\n                0xea26619c,\n                0xd186b8c7,\n                0x21c0c207,\n                0xeada7dd6,\n                0xcde0eb1e,\n                0xf57d4f7f,\n                0xee6ed178,\n                0x06f067aa,\n                0x72176fba,\n                0x0a637dc5,\n                0xa2c898a6,\n                0x113f9804,\n                0xbef90dae,\n                0x1b710b35,\n                0x131c471b,\n                0x28db77f5,\n                0x23047d84,\n                0x32caab7b,\n                0x40c72493,\n                0x3c9ebe0a,\n                0x15c9bebc,\n                0x431d67c4,\n                0x9c100d4c,\n                0x4cc5d4be,\n                0xcb3e42b6,\n                0x597f299c,\n                0xfc657e2a,\n                0x5fcb6fab,\n                0x3ad6faec,\n                0x6c44198c,\n                0x4a475817\n            ];\n            function crypto_hashblocks_hl(hh, hl, m, n) {\n                var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;\n                var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n                var pos = 0;\n                while(n >= 128){\n                    for(i = 0; i < 16; i++){\n                        j = 8 * i + pos;\n                        wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];\n                        wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];\n                    }\n                    for(i = 0; i < 80; i++){\n                        bh0 = ah0;\n                        bh1 = ah1;\n                        bh2 = ah2;\n                        bh3 = ah3;\n                        bh4 = ah4;\n                        bh5 = ah5;\n                        bh6 = ah6;\n                        bh7 = ah7;\n                        bl0 = al0;\n                        bl1 = al1;\n                        bl2 = al2;\n                        bl3 = al3;\n                        bl4 = al4;\n                        bl5 = al5;\n                        bl6 = al6;\n                        bl7 = al7;\n                        // add\n                        h = ah7;\n                        l = al7;\n                        a = l & 0xffff;\n                        b = l >>> 16;\n                        c = h & 0xffff;\n                        d = h >>> 16;\n                        // Sigma1\n                        h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));\n                        l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // Ch\n                        h = ah4 & ah5 ^ ~ah4 & ah6;\n                        l = al4 & al5 ^ ~al4 & al6;\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // K\n                        h = K[i * 2];\n                        l = K[i * 2 + 1];\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // w\n                        h = wh[i % 16];\n                        l = wl[i % 16];\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        b += a >>> 16;\n                        c += b >>> 16;\n                        d += c >>> 16;\n                        th = c & 0xffff | d << 16;\n                        tl = a & 0xffff | b << 16;\n                        // add\n                        h = th;\n                        l = tl;\n                        a = l & 0xffff;\n                        b = l >>> 16;\n                        c = h & 0xffff;\n                        d = h >>> 16;\n                        // Sigma0\n                        h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));\n                        l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        // Maj\n                        h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;\n                        l = al0 & al1 ^ al0 & al2 ^ al1 & al2;\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        b += a >>> 16;\n                        c += b >>> 16;\n                        d += c >>> 16;\n                        bh7 = c & 0xffff | d << 16;\n                        bl7 = a & 0xffff | b << 16;\n                        // add\n                        h = bh3;\n                        l = bl3;\n                        a = l & 0xffff;\n                        b = l >>> 16;\n                        c = h & 0xffff;\n                        d = h >>> 16;\n                        h = th;\n                        l = tl;\n                        a += l & 0xffff;\n                        b += l >>> 16;\n                        c += h & 0xffff;\n                        d += h >>> 16;\n                        b += a >>> 16;\n                        c += b >>> 16;\n                        d += c >>> 16;\n                        bh3 = c & 0xffff | d << 16;\n                        bl3 = a & 0xffff | b << 16;\n                        ah1 = bh0;\n                        ah2 = bh1;\n                        ah3 = bh2;\n                        ah4 = bh3;\n                        ah5 = bh4;\n                        ah6 = bh5;\n                        ah7 = bh6;\n                        ah0 = bh7;\n                        al1 = bl0;\n                        al2 = bl1;\n                        al3 = bl2;\n                        al4 = bl3;\n                        al5 = bl4;\n                        al6 = bl5;\n                        al7 = bl6;\n                        al0 = bl7;\n                        if (i % 16 === 15) {\n                            for(j = 0; j < 16; j++){\n                                // add\n                                h = wh[j];\n                                l = wl[j];\n                                a = l & 0xffff;\n                                b = l >>> 16;\n                                c = h & 0xffff;\n                                d = h >>> 16;\n                                h = wh[(j + 9) % 16];\n                                l = wl[(j + 9) % 16];\n                                a += l & 0xffff;\n                                b += l >>> 16;\n                                c += h & 0xffff;\n                                d += h >>> 16;\n                                // sigma0\n                                th = wh[(j + 1) % 16];\n                                tl = wl[(j + 1) % 16];\n                                h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;\n                                l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);\n                                a += l & 0xffff;\n                                b += l >>> 16;\n                                c += h & 0xffff;\n                                d += h >>> 16;\n                                // sigma1\n                                th = wh[(j + 14) % 16];\n                                tl = wl[(j + 14) % 16];\n                                h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;\n                                l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);\n                                a += l & 0xffff;\n                                b += l >>> 16;\n                                c += h & 0xffff;\n                                d += h >>> 16;\n                                b += a >>> 16;\n                                c += b >>> 16;\n                                d += c >>> 16;\n                                wh[j] = c & 0xffff | d << 16;\n                                wl[j] = a & 0xffff | b << 16;\n                            }\n                        }\n                    }\n                    // add\n                    h = ah0;\n                    l = al0;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[0];\n                    l = hl[0];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[0] = ah0 = c & 0xffff | d << 16;\n                    hl[0] = al0 = a & 0xffff | b << 16;\n                    h = ah1;\n                    l = al1;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[1];\n                    l = hl[1];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[1] = ah1 = c & 0xffff | d << 16;\n                    hl[1] = al1 = a & 0xffff | b << 16;\n                    h = ah2;\n                    l = al2;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[2];\n                    l = hl[2];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[2] = ah2 = c & 0xffff | d << 16;\n                    hl[2] = al2 = a & 0xffff | b << 16;\n                    h = ah3;\n                    l = al3;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[3];\n                    l = hl[3];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[3] = ah3 = c & 0xffff | d << 16;\n                    hl[3] = al3 = a & 0xffff | b << 16;\n                    h = ah4;\n                    l = al4;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[4];\n                    l = hl[4];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[4] = ah4 = c & 0xffff | d << 16;\n                    hl[4] = al4 = a & 0xffff | b << 16;\n                    h = ah5;\n                    l = al5;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[5];\n                    l = hl[5];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[5] = ah5 = c & 0xffff | d << 16;\n                    hl[5] = al5 = a & 0xffff | b << 16;\n                    h = ah6;\n                    l = al6;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[6];\n                    l = hl[6];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[6] = ah6 = c & 0xffff | d << 16;\n                    hl[6] = al6 = a & 0xffff | b << 16;\n                    h = ah7;\n                    l = al7;\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = hh[7];\n                    l = hl[7];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    hh[7] = ah7 = c & 0xffff | d << 16;\n                    hl[7] = al7 = a & 0xffff | b << 16;\n                    pos += 128;\n                    n -= 128;\n                }\n                return n;\n            }\n            function crypto_hash(out, m, n) {\n                var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;\n                hh[0] = 0x6a09e667;\n                hh[1] = 0xbb67ae85;\n                hh[2] = 0x3c6ef372;\n                hh[3] = 0xa54ff53a;\n                hh[4] = 0x510e527f;\n                hh[5] = 0x9b05688c;\n                hh[6] = 0x1f83d9ab;\n                hh[7] = 0x5be0cd19;\n                hl[0] = 0xf3bcc908;\n                hl[1] = 0x84caa73b;\n                hl[2] = 0xfe94f82b;\n                hl[3] = 0x5f1d36f1;\n                hl[4] = 0xade682d1;\n                hl[5] = 0x2b3e6c1f;\n                hl[6] = 0xfb41bd6b;\n                hl[7] = 0x137e2179;\n                crypto_hashblocks_hl(hh, hl, m, n);\n                n %= 128;\n                for(i = 0; i < n; i++)x[i] = m[b - n + i];\n                x[n] = 128;\n                n = 256 - 128 * (n < 112 ? 1 : 0);\n                x[n - 9] = 0;\n                ts64(x, n - 8, b / 0x20000000 | 0, b << 3);\n                crypto_hashblocks_hl(hh, hl, x, n);\n                for(i = 0; i < 8; i++)ts64(out, 8 * i, hh[i], hl[i]);\n                return 0;\n            }\n            function add(p, q) {\n                var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n                Z(a, p[1], p[0]);\n                Z(t, q[1], q[0]);\n                M(a, a, t);\n                A(b, p[0], p[1]);\n                A(t, q[0], q[1]);\n                M(b, b, t);\n                M(c, p[3], q[3]);\n                M(c, c, D2);\n                M(d, p[2], q[2]);\n                A(d, d, d);\n                Z(e, b, a);\n                Z(f, d, c);\n                A(g, d, c);\n                A(h, b, a);\n                M(p[0], e, f);\n                M(p[1], h, g);\n                M(p[2], g, f);\n                M(p[3], e, h);\n            }\n            function cswap(p, q, b) {\n                var i;\n                for(i = 0; i < 4; i++){\n                    sel25519(p[i], q[i], b);\n                }\n            }\n            function pack(r, p) {\n                var tx = gf(), ty = gf(), zi = gf();\n                inv25519(zi, p[2]);\n                M(tx, p[0], zi);\n                M(ty, p[1], zi);\n                pack25519(r, ty);\n                r[31] ^= par25519(tx) << 7;\n            }\n            function scalarmult(p, q, s) {\n                var b, i;\n                set25519(p[0], gf0);\n                set25519(p[1], gf1);\n                set25519(p[2], gf1);\n                set25519(p[3], gf0);\n                for(i = 255; i >= 0; --i){\n                    b = s[i / 8 | 0] >> (i & 7) & 1;\n                    cswap(p, q, b);\n                    add(q, p);\n                    add(p, p);\n                    cswap(p, q, b);\n                }\n            }\n            function scalarbase(p, s) {\n                var q = [\n                    gf(),\n                    gf(),\n                    gf(),\n                    gf()\n                ];\n                set25519(q[0], X);\n                set25519(q[1], Y);\n                set25519(q[2], gf1);\n                M(q[3], X, Y);\n                scalarmult(p, q, s);\n            }\n            function crypto_sign_keypair(pk, sk, seeded) {\n                var d = new Uint8Array(64);\n                var p = [\n                    gf(),\n                    gf(),\n                    gf(),\n                    gf()\n                ];\n                var i;\n                if (!seeded) randombytes(sk, 32);\n                crypto_hash(d, sk, 32);\n                d[0] &= 248;\n                d[31] &= 127;\n                d[31] |= 64;\n                scalarbase(p, d);\n                pack(pk, p);\n                for(i = 0; i < 32; i++)sk[i + 32] = pk[i];\n                return 0;\n            }\n            var L = new Float64Array([\n                0xed,\n                0xd3,\n                0xf5,\n                0x5c,\n                0x1a,\n                0x63,\n                0x12,\n                0x58,\n                0xd6,\n                0x9c,\n                0xf7,\n                0xa2,\n                0xde,\n                0xf9,\n                0xde,\n                0x14,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0x10\n            ]);\n            function modL(r, x) {\n                var carry, i, j, k;\n                for(i = 63; i >= 32; --i){\n                    carry = 0;\n                    for(j = i - 32, k = i - 12; j < k; ++j){\n                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n                        carry = Math.floor((x[j] + 128) / 256);\n                        x[j] -= carry * 256;\n                    }\n                    x[j] += carry;\n                    x[i] = 0;\n                }\n                carry = 0;\n                for(j = 0; j < 32; j++){\n                    x[j] += carry - (x[31] >> 4) * L[j];\n                    carry = x[j] >> 8;\n                    x[j] &= 255;\n                }\n                for(j = 0; j < 32; j++)x[j] -= carry * L[j];\n                for(i = 0; i < 32; i++){\n                    x[i + 1] += x[i] >> 8;\n                    r[i] = x[i] & 255;\n                }\n            }\n            function reduce(r) {\n                var x = new Float64Array(64), i;\n                for(i = 0; i < 64; i++)x[i] = r[i];\n                for(i = 0; i < 64; i++)r[i] = 0;\n                modL(r, x);\n            }\n            // Note: difference from C - smlen returned, not passed as argument.\n            function crypto_sign(sm, m, n, sk) {\n                var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n                var i, j, x = new Float64Array(64);\n                var p = [\n                    gf(),\n                    gf(),\n                    gf(),\n                    gf()\n                ];\n                crypto_hash(d, sk, 32);\n                d[0] &= 248;\n                d[31] &= 127;\n                d[31] |= 64;\n                var smlen = n + 64;\n                for(i = 0; i < n; i++)sm[64 + i] = m[i];\n                for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];\n                crypto_hash(r, sm.subarray(32), n + 32);\n                reduce(r);\n                scalarbase(p, r);\n                pack(sm, p);\n                for(i = 32; i < 64; i++)sm[i] = sk[i];\n                crypto_hash(h, sm, n + 64);\n                reduce(h);\n                for(i = 0; i < 64; i++)x[i] = 0;\n                for(i = 0; i < 32; i++)x[i] = r[i];\n                for(i = 0; i < 32; i++){\n                    for(j = 0; j < 32; j++){\n                        x[i + j] += h[i] * d[j];\n                    }\n                }\n                modL(sm.subarray(32), x);\n                return smlen;\n            }\n            function unpackneg(r, p) {\n                var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n                set25519(r[2], gf1);\n                unpack25519(r[1], p);\n                S(num, r[1]);\n                M(den, num, D);\n                Z(num, num, r[2]);\n                A(den, r[2], den);\n                S(den2, den);\n                S(den4, den2);\n                M(den6, den4, den2);\n                M(t, den6, num);\n                M(t, t, den);\n                pow2523(t, t);\n                M(t, t, num);\n                M(t, t, den);\n                M(t, t, den);\n                M(r[0], t, den);\n                S(chk, r[0]);\n                M(chk, chk, den);\n                if (neq25519(chk, num)) M(r[0], r[0], I);\n                S(chk, r[0]);\n                M(chk, chk, den);\n                if (neq25519(chk, num)) return -1;\n                if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);\n                M(r[3], r[0], r[1]);\n                return 0;\n            }\n            function crypto_sign_open(m, sm, n, pk) {\n                var i;\n                var t = new Uint8Array(32), h = new Uint8Array(64);\n                var p = [\n                    gf(),\n                    gf(),\n                    gf(),\n                    gf()\n                ], q = [\n                    gf(),\n                    gf(),\n                    gf(),\n                    gf()\n                ];\n                if (n < 64) return -1;\n                if (unpackneg(q, pk)) return -1;\n                for(i = 0; i < n; i++)m[i] = sm[i];\n                for(i = 0; i < 32; i++)m[i + 32] = pk[i];\n                crypto_hash(h, m, n);\n                reduce(h);\n                scalarmult(p, q, h);\n                scalarbase(q, sm.subarray(32));\n                add(p, q);\n                pack(t, p);\n                n -= 64;\n                if (crypto_verify_32(sm, 0, t, 0)) {\n                    for(i = 0; i < n; i++)m[i] = 0;\n                    return -1;\n                }\n                for(i = 0; i < n; i++)m[i] = sm[i + 64];\n                return n;\n            }\n            var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;\n            nacl.lowlevel = {\n                crypto_core_hsalsa20: crypto_core_hsalsa20,\n                crypto_stream_xor: crypto_stream_xor,\n                crypto_stream: crypto_stream,\n                crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n                crypto_stream_salsa20: crypto_stream_salsa20,\n                crypto_onetimeauth: crypto_onetimeauth,\n                crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n                crypto_verify_16: crypto_verify_16,\n                crypto_verify_32: crypto_verify_32,\n                crypto_secretbox: crypto_secretbox,\n                crypto_secretbox_open: crypto_secretbox_open,\n                crypto_scalarmult: crypto_scalarmult,\n                crypto_scalarmult_base: crypto_scalarmult_base,\n                crypto_box_beforenm: crypto_box_beforenm,\n                crypto_box_afternm: crypto_box_afternm,\n                crypto_box: crypto_box,\n                crypto_box_open: crypto_box_open,\n                crypto_box_keypair: crypto_box_keypair,\n                crypto_hash: crypto_hash,\n                crypto_sign: crypto_sign,\n                crypto_sign_keypair: crypto_sign_keypair,\n                crypto_sign_open: crypto_sign_open,\n                crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n                crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n                crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n                crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n                crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n                crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n                crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n                crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n                crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n                crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n                crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n                crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n                crypto_sign_BYTES: crypto_sign_BYTES,\n                crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n                crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n                crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n                crypto_hash_BYTES: crypto_hash_BYTES,\n                gf: gf,\n                D: D,\n                L: L,\n                pack25519: pack25519,\n                unpack25519: unpack25519,\n                M: M,\n                A: A,\n                S: S,\n                Z: Z,\n                pow2523: pow2523,\n                add: add,\n                set25519: set25519,\n                modL: modL,\n                scalarmult: scalarmult,\n                scalarbase: scalarbase\n            };\n            /* High-level API */ function checkLengths(k, n) {\n                if (k.length !== crypto_secretbox_KEYBYTES) throw new Error(\"bad key size\");\n                if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error(\"bad nonce size\");\n            }\n            function checkBoxLengths(pk, sk) {\n                if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n                if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n            }\n            function checkArrayTypes() {\n                for(var i = 0; i < arguments.length; i++){\n                    if (!(arguments[i] instanceof Uint8Array)) throw new TypeError(\"unexpected type, use Uint8Array\");\n                }\n            }\n            function cleanup(arr) {\n                for(var i = 0; i < arr.length; i++)arr[i] = 0;\n            }\n            nacl.randomBytes = function(n) {\n                var b = new Uint8Array(n);\n                randombytes(b, n);\n                return b;\n            };\n            nacl.secretbox = function(msg, nonce, key) {\n                checkArrayTypes(msg, nonce, key);\n                checkLengths(key, nonce);\n                var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n                var c = new Uint8Array(m.length);\n                for(var i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];\n                crypto_secretbox(c, m, m.length, nonce, key);\n                return c.subarray(crypto_secretbox_BOXZEROBYTES);\n            };\n            nacl.secretbox.open = function(box, nonce, key) {\n                checkArrayTypes(box, nonce, key);\n                checkLengths(key, nonce);\n                var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n                var m = new Uint8Array(c.length);\n                for(var i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];\n                if (c.length < 32) return null;\n                if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n                return m.subarray(crypto_secretbox_ZEROBYTES);\n            };\n            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\n            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\n            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n            nacl.scalarMult = function(n, p) {\n                checkArrayTypes(n, p);\n                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error(\"bad n size\");\n                if (p.length !== crypto_scalarmult_BYTES) throw new Error(\"bad p size\");\n                var q = new Uint8Array(crypto_scalarmult_BYTES);\n                crypto_scalarmult(q, n, p);\n                return q;\n            };\n            nacl.scalarMult.base = function(n) {\n                checkArrayTypes(n);\n                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error(\"bad n size\");\n                var q = new Uint8Array(crypto_scalarmult_BYTES);\n                crypto_scalarmult_base(q, n);\n                return q;\n            };\n            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\n            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n            nacl.box = function(msg, nonce, publicKey, secretKey) {\n                var k = nacl.box.before(publicKey, secretKey);\n                return nacl.secretbox(msg, nonce, k);\n            };\n            nacl.box.before = function(publicKey, secretKey) {\n                checkArrayTypes(publicKey, secretKey);\n                checkBoxLengths(publicKey, secretKey);\n                var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n                crypto_box_beforenm(k, publicKey, secretKey);\n                return k;\n            };\n            nacl.box.after = nacl.secretbox;\n            nacl.box.open = function(msg, nonce, publicKey, secretKey) {\n                var k = nacl.box.before(publicKey, secretKey);\n                return nacl.secretbox.open(msg, nonce, k);\n            };\n            nacl.box.open.after = nacl.secretbox.open;\n            nacl.box.keyPair = function() {\n                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n                var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n                crypto_box_keypair(pk, sk);\n                return {\n                    publicKey: pk,\n                    secretKey: sk\n                };\n            };\n            nacl.box.keyPair.fromSecretKey = function(secretKey) {\n                checkArrayTypes(secretKey);\n                if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n                crypto_scalarmult_base(pk, secretKey);\n                return {\n                    publicKey: pk,\n                    secretKey: new Uint8Array(secretKey)\n                };\n            };\n            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\n            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\n            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\n            nacl.box.nonceLength = crypto_box_NONCEBYTES;\n            nacl.box.overheadLength = nacl.secretbox.overheadLength;\n            nacl.sign = function(msg, secretKey) {\n                checkArrayTypes(msg, secretKey);\n                if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n                var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);\n                crypto_sign(signedMsg, msg, msg.length, secretKey);\n                return signedMsg;\n            };\n            nacl.sign.open = function(signedMsg, publicKey) {\n                checkArrayTypes(signedMsg, publicKey);\n                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n                var tmp = new Uint8Array(signedMsg.length);\n                var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n                if (mlen < 0) return null;\n                var m = new Uint8Array(mlen);\n                for(var i = 0; i < m.length; i++)m[i] = tmp[i];\n                return m;\n            };\n            nacl.sign.detached = function(msg, secretKey) {\n                var signedMsg = nacl.sign(msg, secretKey);\n                var sig = new Uint8Array(crypto_sign_BYTES);\n                for(var i = 0; i < sig.length; i++)sig[i] = signedMsg[i];\n                return sig;\n            };\n            nacl.sign.detached.verify = function(msg, sig, publicKey) {\n                checkArrayTypes(msg, sig, publicKey);\n                if (sig.length !== crypto_sign_BYTES) throw new Error(\"bad signature size\");\n                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error(\"bad public key size\");\n                var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n                var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n                var i;\n                for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];\n                for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];\n                return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;\n            };\n            nacl.sign.keyPair = function() {\n                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n                crypto_sign_keypair(pk, sk);\n                return {\n                    publicKey: pk,\n                    secretKey: sk\n                };\n            };\n            nacl.sign.keyPair.fromSecretKey = function(secretKey) {\n                checkArrayTypes(secretKey);\n                if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error(\"bad secret key size\");\n                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n                for(var i = 0; i < pk.length; i++)pk[i] = secretKey[32 + i];\n                return {\n                    publicKey: pk,\n                    secretKey: new Uint8Array(secretKey)\n                };\n            };\n            nacl.sign.keyPair.fromSeed = function(seed) {\n                checkArrayTypes(seed);\n                if (seed.length !== crypto_sign_SEEDBYTES) throw new Error(\"bad seed size\");\n                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n                for(var i = 0; i < 32; i++)sk[i] = seed[i];\n                crypto_sign_keypair(pk, sk, true);\n                return {\n                    publicKey: pk,\n                    secretKey: sk\n                };\n            };\n            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\n            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\n            nacl.sign.seedLength = crypto_sign_SEEDBYTES;\n            nacl.sign.signatureLength = crypto_sign_BYTES;\n            nacl.hash = function(msg) {\n                checkArrayTypes(msg);\n                var h = new Uint8Array(crypto_hash_BYTES);\n                crypto_hash(h, msg, msg.length);\n                return h;\n            };\n            nacl.hash.hashLength = crypto_hash_BYTES;\n            nacl.verify = function(x, y) {\n                checkArrayTypes(x, y);\n                // Zero length arguments are considered not equal.\n                if (x.length === 0 || y.length === 0) return false;\n                if (x.length !== y.length) return false;\n                return vn(x, 0, y, 0, x.length) === 0 ? true : false;\n            };\n            nacl.setPRNG = function(fn) {\n                randombytes = fn;\n            };\n            (function() {\n                // Initialize PRNG if environment provides CSPRNG.\n                // If not, methods calling randombytes will throw.\n                var crypto = typeof self !== \"undefined\" ? self.crypto || self.msCrypto : null;\n                if (crypto && crypto.getRandomValues) {\n                    // Browsers.\n                    var QUOTA = 65536;\n                    nacl.setPRNG(function(x, n) {\n                        var i, v = new Uint8Array(n);\n                        for(i = 0; i < n; i += QUOTA){\n                            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n                        }\n                        for(i = 0; i < n; i++)x[i] = v[i];\n                        cleanup(v);\n                    });\n                } else if (true) {\n                    // Node.js.\n                    crypto = __nested_webpack_require_98670__(3);\n                    if (crypto && crypto.randomBytes) {\n                        nacl.setPRNG(function(x, n) {\n                            var i, v = crypto.randomBytes(n);\n                            for(i = 0; i < n; i++)x[i] = v[i];\n                            cleanup(v);\n                        });\n                    }\n                }\n            })();\n        })( true && module1.exports ? module1.exports : self.nacl = self.nacl || {});\n    /***/ },\n    /* 21 */ /***/ function(module1, exports, __nested_webpack_require_196168__) {\n        module1.exports = __nested_webpack_require_196168__(47).default;\n    /***/ },\n    /* 22 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! buffer */ \"buffer\");\n    /***/ },\n    /* 23 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! events */ \"events\");\n    /***/ },\n    /* 24 */ /***/ function(module1, exports, __nested_webpack_require_196521__) {\n        \"use strict\";\n        /**\n\nStreams in a WebSocket connection\n---------------------------------\n\nWe model a WebSocket as two duplex streams: one stream is for the wire protocol\nover an I/O socket, and the other is for incoming/outgoing messages.\n\n\n                        +----------+      +---------+      +----------+\n    [1] write(chunk) -->| ~~~~~~~~ +----->| parse() +----->| ~~~~~~~~ +--> emit('data') [2]\n                        |          |      +----+----+      |          |\n                        |          |           |           |          |\n                        |    IO    |           | [5]       | Messages |\n                        |          |           V           |          |\n                        |          |      +---------+      |          |\n    [4] emit('data') <--+ ~~~~~~~~ |<-----+ frame() |<-----+ ~~~~~~~~ |<-- write(chunk) [3]\n                        +----------+      +---------+      +----------+\n\n\nMessage transfer in each direction is simple: IO receives a byte stream [1] and\nsends this stream for parsing. The parser will periodically emit a complete\nmessage text on the Messages stream [2]. Similarly, when messages are written\nto the Messages stream [3], they are framed using the WebSocket wire format and\nemitted via IO [4].\n\nThere is a feedback loop via [5] since some input from [1] will be things like\nping, pong and close frames. In these cases the protocol responds by emitting\nresponses directly back to [4] rather than emitting messages via [2].\n\nFor the purposes of flow control, we consider the sources of each Readable\nstream to be as follows:\n\n* [2] receives input from [1]\n* [4] receives input from [1] and [3]\n\nThe classes below express the relationships described above without prescribing\nanything about how parse() and frame() work, other than assuming they emit\n'data' events to the IO and Messages streams. They will work with any protocol\ndriver having these two methods.\n**/ var Stream = __nested_webpack_require_196521__(5).Stream, util = __nested_webpack_require_196521__(0);\n        var IO = function(driver) {\n            this.readable = this.writable = true;\n            this._paused = false;\n            this._driver = driver;\n        };\n        util.inherits(IO, Stream);\n        // The IO pause() and resume() methods will be called when the socket we are\n        // piping to gets backed up and drains. Since IO output [4] comes from IO input\n        // [1] and Messages input [3], we need to tell both of those to return false\n        // from write() when this stream is paused.\n        IO.prototype.pause = function() {\n            this._paused = true;\n            this._driver.messages._paused = true;\n        };\n        IO.prototype.resume = function() {\n            this._paused = false;\n            this.emit(\"drain\");\n            var messages = this._driver.messages;\n            messages._paused = false;\n            messages.emit(\"drain\");\n        };\n        // When we receive input from a socket, send it to the parser and tell the\n        // source whether to back off.\n        IO.prototype.write = function(chunk) {\n            if (!this.writable) return false;\n            this._driver.parse(chunk);\n            return !this._paused;\n        };\n        // The IO end() method will be called when the socket piping into it emits\n        // 'close' or 'end', i.e. the socket is closed. In this situation the Messages\n        // stream will not emit any more data so we emit 'end'.\n        IO.prototype.end = function(chunk) {\n            if (!this.writable) return;\n            if (chunk !== undefined) this.write(chunk);\n            this.writable = false;\n            var messages = this._driver.messages;\n            if (messages.readable) {\n                messages.readable = messages.writable = false;\n                messages.emit(\"end\");\n            }\n        };\n        IO.prototype.destroy = function() {\n            this.end();\n        };\n        var Messages = function(driver) {\n            this.readable = this.writable = true;\n            this._paused = false;\n            this._driver = driver;\n        };\n        util.inherits(Messages, Stream);\n        // The Messages pause() and resume() methods will be called when the app that's\n        // processing the messages gets backed up and drains. If we're emitting\n        // messages too fast we should tell the source to slow down. Message output [2]\n        // comes from IO input [1].\n        Messages.prototype.pause = function() {\n            this._driver.io._paused = true;\n        };\n        Messages.prototype.resume = function() {\n            this._driver.io._paused = false;\n            this._driver.io.emit(\"drain\");\n        };\n        // When we receive messages from the user, send them to the formatter and tell\n        // the source whether to back off.\n        Messages.prototype.write = function(message) {\n            if (!this.writable) return false;\n            if (typeof message === \"string\") this._driver.text(message);\n            else this._driver.binary(message);\n            return !this._paused;\n        };\n        // The Messages end() method will be called when a stream piping into it emits\n        // 'end'. Many streams may be piped into the WebSocket and one of them ending\n        // does not mean the whole socket is done, so just process the input and move\n        // on leaving the socket open.\n        Messages.prototype.end = function(message) {\n            if (message !== undefined) this.write(message);\n        };\n        Messages.prototype.destroy = function() {};\n        exports.IO = IO;\n        exports.Messages = Messages;\n    /***/ },\n    /* 25 */ /***/ function(module1, exports, __nested_webpack_require_202207__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_202207__(1).Buffer;\n        var StreamReader = function() {\n            this._queue = [];\n            this._queueSize = 0;\n            this._offset = 0;\n        };\n        StreamReader.prototype.put = function(buffer) {\n            if (!buffer || buffer.length === 0) return;\n            if (!Buffer1.isBuffer(buffer)) buffer = Buffer1.from(buffer);\n            this._queue.push(buffer);\n            this._queueSize += buffer.length;\n        };\n        StreamReader.prototype.read = function(length) {\n            if (length > this._queueSize) return null;\n            if (length === 0) return Buffer1.alloc(0);\n            this._queueSize -= length;\n            var queue = this._queue, remain = length, first = queue[0], buffers, buffer;\n            if (first.length >= length) {\n                if (first.length === length) {\n                    return queue.shift();\n                } else {\n                    buffer = first.slice(0, length);\n                    queue[0] = first.slice(length);\n                    return buffer;\n                }\n            }\n            for(var i = 0, n = queue.length; i < n; i++){\n                if (remain < queue[i].length) break;\n                remain -= queue[i].length;\n            }\n            buffers = queue.splice(0, i);\n            if (remain > 0 && queue.length > 0) {\n                buffers.push(queue[0].slice(0, remain));\n                queue[0] = queue[0].slice(remain);\n            }\n            return Buffer1.concat(buffers, length);\n        };\n        StreamReader.prototype.eachByte = function(callback, context) {\n            var buffer, n, index;\n            while(this._queue.length > 0){\n                buffer = this._queue[0];\n                n = buffer.length;\n                while(this._offset < n){\n                    index = this._offset;\n                    this._offset += 1;\n                    callback.call(context, buffer[index]);\n                }\n                this._offset = 0;\n                this._queue.shift();\n            }\n        };\n        module1.exports = StreamReader;\n    /***/ },\n    /* 26 */ /***/ function(module1, exports, __nested_webpack_require_204417__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_204417__(1).Buffer, crypto = __nested_webpack_require_204417__(3), url = __nested_webpack_require_204417__(6), util = __nested_webpack_require_204417__(0), HttpParser = __nested_webpack_require_204417__(10), Base = __nested_webpack_require_204417__(2), Hybi = __nested_webpack_require_204417__(12), Proxy = __nested_webpack_require_204417__(36);\n        var Client = function(_url, options) {\n            this.version = \"hybi-\" + Hybi.VERSION;\n            Hybi.call(this, null, _url, options);\n            this.readyState = -1;\n            this._key = Client.generateKey();\n            this._accept = Hybi.generateAccept(this._key);\n            this._http = new HttpParser(\"response\");\n            var uri = url.parse(this.url), auth = uri.auth && Buffer1.from(uri.auth, \"utf8\").toString(\"base64\");\n            if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0) throw new Error(this.url + \" is not a valid WebSocket URL\");\n            this._pathname = (uri.pathname || \"/\") + (uri.search || \"\");\n            this._headers.set(\"Host\", uri.host);\n            this._headers.set(\"Upgrade\", \"websocket\");\n            this._headers.set(\"Connection\", \"Upgrade\");\n            this._headers.set(\"Sec-WebSocket-Key\", this._key);\n            this._headers.set(\"Sec-WebSocket-Version\", Hybi.VERSION);\n            if (this._protocols.length > 0) this._headers.set(\"Sec-WebSocket-Protocol\", this._protocols.join(\", \"));\n            if (auth) this._headers.set(\"Authorization\", \"Basic \" + auth);\n        };\n        util.inherits(Client, Hybi);\n        Client.generateKey = function() {\n            return crypto.randomBytes(16).toString(\"base64\");\n        };\n        var instance = {\n            VALID_PROTOCOLS: [\n                \"ws:\",\n                \"wss:\"\n            ],\n            proxy: function(origin, options) {\n                return new Proxy(this, origin, options);\n            },\n            start: function() {\n                if (this.readyState !== -1) return false;\n                this._write(this._handshakeRequest());\n                this.readyState = 0;\n                return true;\n            },\n            parse: function(chunk) {\n                if (this.readyState === 3) return;\n                if (this.readyState > 0) return Hybi.prototype.parse.call(this, chunk);\n                this._http.parse(chunk);\n                if (!this._http.isComplete()) return;\n                this._validateHandshake();\n                if (this.readyState === 3) return;\n                this._open();\n                this.parse(this._http.body);\n            },\n            _handshakeRequest: function() {\n                var extensions = this._extensions.generateOffer();\n                if (extensions) this._headers.set(\"Sec-WebSocket-Extensions\", extensions);\n                var start = \"GET \" + this._pathname + \" HTTP/1.1\", headers = [\n                    start,\n                    this._headers.toString(),\n                    \"\"\n                ];\n                return Buffer1.from(headers.join(\"\\r\\n\"), \"utf8\");\n            },\n            _failHandshake: function(message) {\n                message = \"Error during WebSocket handshake: \" + message;\n                this.readyState = 3;\n                this.emit(\"error\", new Error(message));\n                this.emit(\"close\", new Base.CloseEvent(this.ERRORS.protocol_error, message));\n            },\n            _validateHandshake: function() {\n                this.statusCode = this._http.statusCode;\n                this.headers = this._http.headers;\n                if (this._http.error) return this._failHandshake(this._http.error.message);\n                if (this._http.statusCode !== 101) return this._failHandshake(\"Unexpected response code: \" + this._http.statusCode);\n                var headers = this._http.headers, upgrade = headers[\"upgrade\"] || \"\", connection = headers[\"connection\"] || \"\", accept = headers[\"sec-websocket-accept\"] || \"\", protocol = headers[\"sec-websocket-protocol\"] || \"\";\n                if (upgrade === \"\") return this._failHandshake(\"'Upgrade' header is missing\");\n                if (upgrade.toLowerCase() !== \"websocket\") return this._failHandshake(\"'Upgrade' header value is not 'WebSocket'\");\n                if (connection === \"\") return this._failHandshake(\"'Connection' header is missing\");\n                if (connection.toLowerCase() !== \"upgrade\") return this._failHandshake(\"'Connection' header value is not 'Upgrade'\");\n                if (accept !== this._accept) return this._failHandshake(\"Sec-WebSocket-Accept mismatch\");\n                this.protocol = null;\n                if (protocol !== \"\") {\n                    if (this._protocols.indexOf(protocol) < 0) return this._failHandshake(\"Sec-WebSocket-Protocol mismatch\");\n                    else this.protocol = protocol;\n                }\n                try {\n                    this._extensions.activate(this.headers[\"sec-websocket-extensions\"]);\n                } catch (e) {\n                    return this._failHandshake(e.message);\n                }\n            }\n        };\n        for(var key in instance)Client.prototype[key] = instance[key];\n        module1.exports = Client;\n    /***/ },\n    /* 27 */ /***/ function(module1, exports, __nested_webpack_require_209614__) {\n        /*jshint node:true */ var assert = __nested_webpack_require_209614__(28);\n        exports.HTTPParser = HTTPParser;\n        function HTTPParser(type) {\n            assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE || type === undefined);\n            if (type === undefined) {\n            // Node v12+\n            } else {\n                this.initialize(type);\n            }\n            this.maxHeaderSize = HTTPParser.maxHeaderSize;\n        }\n        HTTPParser.prototype.initialize = function(type, async_resource) {\n            assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE);\n            this.type = type;\n            this.state = type + \"_LINE\";\n            this.info = {\n                headers: [],\n                upgrade: false\n            };\n            this.trailers = [];\n            this.line = \"\";\n            this.isChunked = false;\n            this.connection = \"\";\n            this.headerSize = 0; // for preventing too big headers\n            this.body_bytes = null;\n            this.isUserCall = false;\n            this.hadError = false;\n        };\n        HTTPParser.encoding = \"ascii\";\n        HTTPParser.maxHeaderSize = 80 * 1024; // maxHeaderSize (in bytes) is configurable, but 80kb by default;\n        HTTPParser.REQUEST = \"REQUEST\";\n        HTTPParser.RESPONSE = \"RESPONSE\";\n        // Note: *not* starting with kOnHeaders=0 line the Node parser, because any\n        //   newly added constants (kOnTimeout in Node v12.19.0) will overwrite 0!\n        var kOnHeaders = HTTPParser.kOnHeaders = 1;\n        var kOnHeadersComplete = HTTPParser.kOnHeadersComplete = 2;\n        var kOnBody = HTTPParser.kOnBody = 3;\n        var kOnMessageComplete = HTTPParser.kOnMessageComplete = 4;\n        // Some handler stubs, needed for compatibility\n        HTTPParser.prototype[kOnHeaders] = HTTPParser.prototype[kOnHeadersComplete] = HTTPParser.prototype[kOnBody] = HTTPParser.prototype[kOnMessageComplete] = function() {};\n        var compatMode0_12 = true;\n        Object.defineProperty(HTTPParser, \"kOnExecute\", {\n            get: function() {\n                // hack for backward compatibility\n                compatMode0_12 = false;\n                return 99;\n            }\n        });\n        var methods = exports.methods = HTTPParser.methods = [\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"POST\",\n            \"PUT\",\n            \"CONNECT\",\n            \"OPTIONS\",\n            \"TRACE\",\n            \"COPY\",\n            \"LOCK\",\n            \"MKCOL\",\n            \"MOVE\",\n            \"PROPFIND\",\n            \"PROPPATCH\",\n            \"SEARCH\",\n            \"UNLOCK\",\n            \"BIND\",\n            \"REBIND\",\n            \"UNBIND\",\n            \"ACL\",\n            \"REPORT\",\n            \"MKACTIVITY\",\n            \"CHECKOUT\",\n            \"MERGE\",\n            \"M-SEARCH\",\n            \"NOTIFY\",\n            \"SUBSCRIBE\",\n            \"UNSUBSCRIBE\",\n            \"PATCH\",\n            \"PURGE\",\n            \"MKCALENDAR\",\n            \"LINK\",\n            \"UNLINK\",\n            \"SOURCE\"\n        ];\n        var method_connect = methods.indexOf(\"CONNECT\");\n        HTTPParser.prototype.reinitialize = HTTPParser;\n        HTTPParser.prototype.close = HTTPParser.prototype.pause = HTTPParser.prototype.resume = HTTPParser.prototype.free = function() {};\n        HTTPParser.prototype._compatMode0_11 = false;\n        HTTPParser.prototype.getAsyncId = function() {\n            return 0;\n        };\n        var headerState = {\n            REQUEST_LINE: true,\n            RESPONSE_LINE: true,\n            HEADER: true\n        };\n        HTTPParser.prototype.execute = function(chunk, start, length) {\n            if (!(this instanceof HTTPParser)) {\n                throw new TypeError(\"not a HTTPParser\");\n            }\n            // backward compat to node < 0.11.4\n            // Note: the start and length params were removed in newer version\n            start = start || 0;\n            length = typeof length === \"number\" ? length : chunk.length;\n            this.chunk = chunk;\n            this.offset = start;\n            var end = this.end = start + length;\n            try {\n                while(this.offset < end){\n                    if (this[this.state]()) {\n                        break;\n                    }\n                }\n            } catch (err) {\n                if (this.isUserCall) {\n                    throw err;\n                }\n                this.hadError = true;\n                return err;\n            }\n            this.chunk = null;\n            length = this.offset - start;\n            if (headerState[this.state]) {\n                this.headerSize += length;\n                if (this.headerSize > (this.maxHeaderSize || HTTPParser.maxHeaderSize)) {\n                    return new Error(\"max header size exceeded\");\n                }\n            }\n            return length;\n        };\n        var stateFinishAllowed = {\n            REQUEST_LINE: true,\n            RESPONSE_LINE: true,\n            BODY_RAW: true\n        };\n        HTTPParser.prototype.finish = function() {\n            if (this.hadError) {\n                return;\n            }\n            if (!stateFinishAllowed[this.state]) {\n                return new Error(\"invalid state for EOF\");\n            }\n            if (this.state === \"BODY_RAW\") {\n                this.userCall()(this[kOnMessageComplete]());\n            }\n        };\n        // These three methods are used for an internal speed optimization, and it also\n        // works if theses are noops. Basically consume() asks us to read the bytes\n        // ourselves, but if we don't do it we get them through execute().\n        HTTPParser.prototype.consume = HTTPParser.prototype.unconsume = HTTPParser.prototype.getCurrentBuffer = function() {};\n        //For correct error handling - see HTTPParser#execute\n        //Usage: this.userCall()(userFunction('arg'));\n        HTTPParser.prototype.userCall = function() {\n            this.isUserCall = true;\n            var self1 = this;\n            return function(ret) {\n                self1.isUserCall = false;\n                return ret;\n            };\n        };\n        HTTPParser.prototype.nextRequest = function() {\n            this.userCall()(this[kOnMessageComplete]());\n            this.reinitialize(this.type);\n        };\n        HTTPParser.prototype.consumeLine = function() {\n            var end = this.end, chunk = this.chunk;\n            for(var i = this.offset; i < end; i++){\n                if (chunk[i] === 0x0a) {\n                    var line = this.line + chunk.toString(HTTPParser.encoding, this.offset, i);\n                    if (line.charAt(line.length - 1) === \"\\r\") {\n                        line = line.substr(0, line.length - 1);\n                    }\n                    this.line = \"\";\n                    this.offset = i + 1;\n                    return line;\n                }\n            }\n            //line split over multiple chunks\n            this.line += chunk.toString(HTTPParser.encoding, this.offset, this.end);\n            this.offset = this.end;\n        };\n        var headerExp = /^([^: \\t]+):[ \\t]*((?:.*[^ \\t])|)/;\n        var headerContinueExp = /^[ \\t]+(.*[^ \\t])/;\n        HTTPParser.prototype.parseHeader = function(line, headers) {\n            if (line.indexOf(\"\\r\") !== -1) {\n                throw parseErrorCode(\"HPE_LF_EXPECTED\");\n            }\n            var match = headerExp.exec(line);\n            var k = match && match[1];\n            if (k) {\n                headers.push(k);\n                headers.push(match[2]);\n            } else {\n                var matchContinue = headerContinueExp.exec(line);\n                if (matchContinue && headers.length) {\n                    if (headers[headers.length - 1]) {\n                        headers[headers.length - 1] += \" \";\n                    }\n                    headers[headers.length - 1] += matchContinue[1];\n                }\n            }\n        };\n        var requestExp = /^([A-Z-]+) ([^ ]+) HTTP\\/(\\d)\\.(\\d)$/;\n        HTTPParser.prototype.REQUEST_LINE = function() {\n            var line = this.consumeLine();\n            if (!line) {\n                return;\n            }\n            var match = requestExp.exec(line);\n            if (match === null) {\n                throw parseErrorCode(\"HPE_INVALID_CONSTANT\");\n            }\n            this.info.method = this._compatMode0_11 ? match[1] : methods.indexOf(match[1]);\n            if (this.info.method === -1) {\n                throw new Error(\"invalid request method\");\n            }\n            this.info.url = match[2];\n            this.info.versionMajor = +match[3];\n            this.info.versionMinor = +match[4];\n            this.body_bytes = 0;\n            this.state = \"HEADER\";\n        };\n        var responseExp = /^HTTP\\/(\\d)\\.(\\d) (\\d{3}) ?(.*)$/;\n        HTTPParser.prototype.RESPONSE_LINE = function() {\n            var line = this.consumeLine();\n            if (!line) {\n                return;\n            }\n            var match = responseExp.exec(line);\n            if (match === null) {\n                throw parseErrorCode(\"HPE_INVALID_CONSTANT\");\n            }\n            this.info.versionMajor = +match[1];\n            this.info.versionMinor = +match[2];\n            var statusCode = this.info.statusCode = +match[3];\n            this.info.statusMessage = match[4];\n            // Implied zero length.\n            if ((statusCode / 100 | 0) === 1 || statusCode === 204 || statusCode === 304) {\n                this.body_bytes = 0;\n            }\n            this.state = \"HEADER\";\n        };\n        HTTPParser.prototype.shouldKeepAlive = function() {\n            if (this.info.versionMajor > 0 && this.info.versionMinor > 0) {\n                if (this.connection.indexOf(\"close\") !== -1) {\n                    return false;\n                }\n            } else if (this.connection.indexOf(\"keep-alive\") === -1) {\n                return false;\n            }\n            if (this.body_bytes !== null || this.isChunked) {\n                return true;\n            }\n            return false;\n        };\n        HTTPParser.prototype.HEADER = function() {\n            var line = this.consumeLine();\n            if (line === undefined) {\n                return;\n            }\n            var info = this.info;\n            if (line) {\n                this.parseHeader(line, info.headers);\n            } else {\n                var headers = info.headers;\n                var hasContentLength = false;\n                var currentContentLengthValue;\n                var hasUpgradeHeader = false;\n                for(var i = 0; i < headers.length; i += 2){\n                    switch(headers[i].toLowerCase()){\n                        case \"transfer-encoding\":\n                            this.isChunked = headers[i + 1].toLowerCase() === \"chunked\";\n                            break;\n                        case \"content-length\":\n                            currentContentLengthValue = +headers[i + 1];\n                            if (hasContentLength) {\n                                // Fix duplicate Content-Length header with same values.\n                                // Throw error only if values are different.\n                                // Known issues:\n                                // https://github.com/request/request/issues/2091#issuecomment-328715113\n                                // https://github.com/nodejs/node/issues/6517#issuecomment-216263771\n                                if (currentContentLengthValue !== this.body_bytes) {\n                                    throw parseErrorCode(\"HPE_UNEXPECTED_CONTENT_LENGTH\");\n                                }\n                            } else {\n                                hasContentLength = true;\n                                this.body_bytes = currentContentLengthValue;\n                            }\n                            break;\n                        case \"connection\":\n                            this.connection += headers[i + 1].toLowerCase();\n                            break;\n                        case \"upgrade\":\n                            hasUpgradeHeader = true;\n                            break;\n                    }\n                }\n                // if both isChunked and hasContentLength, isChunked wins\n                // This is required so the body is parsed using the chunked method, and matches\n                // Chrome's behavior.  We could, maybe, ignore them both (would get chunked\n                // encoding into the body), and/or disable shouldKeepAlive to be more\n                // resilient.\n                if (this.isChunked && hasContentLength) {\n                    hasContentLength = false;\n                    this.body_bytes = null;\n                }\n                // Logic from https://github.com/nodejs/http-parser/blob/921d5585515a153fa00e411cf144280c59b41f90/http_parser.c#L1727-L1737\n                // \"For responses, \"Upgrade: foo\" and \"Connection: upgrade\" are\n                //   mandatory only when it is a 101 Switching Protocols response,\n                //   otherwise it is purely informational, to announce support.\n                if (hasUpgradeHeader && this.connection.indexOf(\"upgrade\") != -1) {\n                    info.upgrade = this.type === HTTPParser.REQUEST || info.statusCode === 101;\n                } else {\n                    info.upgrade = info.method === method_connect;\n                }\n                if (this.isChunked && info.upgrade) {\n                    this.isChunked = false;\n                }\n                info.shouldKeepAlive = this.shouldKeepAlive();\n                //problem which also exists in original node: we should know skipBody before calling onHeadersComplete\n                var skipBody;\n                if (compatMode0_12) {\n                    skipBody = this.userCall()(this[kOnHeadersComplete](info));\n                } else {\n                    skipBody = this.userCall()(this[kOnHeadersComplete](info.versionMajor, info.versionMinor, info.headers, info.method, info.url, info.statusCode, info.statusMessage, info.upgrade, info.shouldKeepAlive));\n                }\n                if (skipBody === 2) {\n                    this.nextRequest();\n                    return true;\n                } else if (this.isChunked && !skipBody) {\n                    this.state = \"BODY_CHUNKHEAD\";\n                } else if (skipBody || this.body_bytes === 0) {\n                    this.nextRequest();\n                    // For older versions of node (v6.x and older?), that return skipBody=1 or skipBody=true,\n                    //   need this \"return true;\" if it's an upgrade request.\n                    return info.upgrade;\n                } else if (this.body_bytes === null) {\n                    this.state = \"BODY_RAW\";\n                } else {\n                    this.state = \"BODY_SIZED\";\n                }\n            }\n        };\n        HTTPParser.prototype.BODY_CHUNKHEAD = function() {\n            var line = this.consumeLine();\n            if (line === undefined) {\n                return;\n            }\n            this.body_bytes = parseInt(line, 16);\n            if (!this.body_bytes) {\n                this.state = \"BODY_CHUNKTRAILERS\";\n            } else {\n                this.state = \"BODY_CHUNK\";\n            }\n        };\n        HTTPParser.prototype.BODY_CHUNK = function() {\n            var length = Math.min(this.end - this.offset, this.body_bytes);\n            this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n            this.offset += length;\n            this.body_bytes -= length;\n            if (!this.body_bytes) {\n                this.state = \"BODY_CHUNKEMPTYLINE\";\n            }\n        };\n        HTTPParser.prototype.BODY_CHUNKEMPTYLINE = function() {\n            var line = this.consumeLine();\n            if (line === undefined) {\n                return;\n            }\n            assert.equal(line, \"\");\n            this.state = \"BODY_CHUNKHEAD\";\n        };\n        HTTPParser.prototype.BODY_CHUNKTRAILERS = function() {\n            var line = this.consumeLine();\n            if (line === undefined) {\n                return;\n            }\n            if (line) {\n                this.parseHeader(line, this.trailers);\n            } else {\n                if (this.trailers.length) {\n                    this.userCall()(this[kOnHeaders](this.trailers, \"\"));\n                }\n                this.nextRequest();\n            }\n        };\n        HTTPParser.prototype.BODY_RAW = function() {\n            var length = this.end - this.offset;\n            this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n            this.offset = this.end;\n        };\n        HTTPParser.prototype.BODY_SIZED = function() {\n            var length = Math.min(this.end - this.offset, this.body_bytes);\n            this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n            this.offset += length;\n            this.body_bytes -= length;\n            if (!this.body_bytes) {\n                this.nextRequest();\n            }\n        };\n        // backward compat to node < 0.11.6\n        [\n            \"Headers\",\n            \"HeadersComplete\",\n            \"Body\",\n            \"MessageComplete\"\n        ].forEach(function(name) {\n            var k = HTTPParser[\"kOn\" + name];\n            Object.defineProperty(HTTPParser.prototype, \"on\" + name, {\n                get: function() {\n                    return this[k];\n                },\n                set: function(to) {\n                    // hack for backward compatibility\n                    this._compatMode0_11 = true;\n                    method_connect = \"CONNECT\";\n                    return this[k] = to;\n                }\n            });\n        });\n        function parseErrorCode(code) {\n            var err = new Error(\"Parse Error\");\n            err.code = code;\n            return err;\n        }\n    /***/ },\n    /* 28 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! assert */ \"assert\");\n    /***/ },\n    /* 29 */ /***/ function(module1, exports, __nested_webpack_require_227680__) {\n        \"use strict\";\n        var Parser = __nested_webpack_require_227680__(30), Pipeline = __nested_webpack_require_227680__(31);\n        var Extensions = function() {\n            this._rsv1 = this._rsv2 = this._rsv3 = null;\n            this._byName = {};\n            this._inOrder = [];\n            this._sessions = [];\n            this._index = {};\n        };\n        Extensions.MESSAGE_OPCODES = [\n            1,\n            2\n        ];\n        var instance = {\n            add: function(ext) {\n                if (typeof ext.name !== \"string\") throw new TypeError(\"extension.name must be a string\");\n                if (ext.type !== \"permessage\") throw new TypeError('extension.type must be \"permessage\"');\n                if (typeof ext.rsv1 !== \"boolean\") throw new TypeError(\"extension.rsv1 must be true or false\");\n                if (typeof ext.rsv2 !== \"boolean\") throw new TypeError(\"extension.rsv2 must be true or false\");\n                if (typeof ext.rsv3 !== \"boolean\") throw new TypeError(\"extension.rsv3 must be true or false\");\n                if (this._byName.hasOwnProperty(ext.name)) throw new TypeError('An extension with name \"' + ext.name + '\" is already registered');\n                this._byName[ext.name] = ext;\n                this._inOrder.push(ext);\n            },\n            generateOffer: function() {\n                var sessions = [], offer = [], index = {};\n                this._inOrder.forEach(function(ext) {\n                    var session = ext.createClientSession();\n                    if (!session) return;\n                    var record = [\n                        ext,\n                        session\n                    ];\n                    sessions.push(record);\n                    index[ext.name] = record;\n                    var offers = session.generateOffer();\n                    offers = offers ? [].concat(offers) : [];\n                    offers.forEach(function(off) {\n                        offer.push(Parser.serializeParams(ext.name, off));\n                    }, this);\n                }, this);\n                this._sessions = sessions;\n                this._index = index;\n                return offer.length > 0 ? offer.join(\", \") : null;\n            },\n            activate: function(header) {\n                var responses = Parser.parseHeader(header), sessions = [];\n                responses.eachOffer(function(name, params) {\n                    var record = this._index[name];\n                    if (!record) throw new Error('Server sent an extension response for unknown extension \"' + name + '\"');\n                    var ext = record[0], session = record[1], reserved = this._reserved(ext);\n                    if (reserved) throw new Error(\"Server sent two extension responses that use the RSV\" + reserved[0] + ' bit: \"' + reserved[1] + '\" and \"' + ext.name + '\"');\n                    if (session.activate(params) !== true) throw new Error(\"Server sent unacceptable extension parameters: \" + Parser.serializeParams(name, params));\n                    this._reserve(ext);\n                    sessions.push(record);\n                }, this);\n                this._sessions = sessions;\n                this._pipeline = new Pipeline(sessions);\n            },\n            generateResponse: function(header) {\n                var sessions = [], response = [], offers = Parser.parseHeader(header);\n                this._inOrder.forEach(function(ext) {\n                    var offer = offers.byName(ext.name);\n                    if (offer.length === 0 || this._reserved(ext)) return;\n                    var session = ext.createServerSession(offer);\n                    if (!session) return;\n                    this._reserve(ext);\n                    sessions.push([\n                        ext,\n                        session\n                    ]);\n                    response.push(Parser.serializeParams(ext.name, session.generateResponse()));\n                }, this);\n                this._sessions = sessions;\n                this._pipeline = new Pipeline(sessions);\n                return response.length > 0 ? response.join(\", \") : null;\n            },\n            validFrameRsv: function(frame) {\n                var allowed = {\n                    rsv1: false,\n                    rsv2: false,\n                    rsv3: false\n                }, ext;\n                if (Extensions.MESSAGE_OPCODES.indexOf(frame.opcode) >= 0) {\n                    for(var i = 0, n = this._sessions.length; i < n; i++){\n                        ext = this._sessions[i][0];\n                        allowed.rsv1 = allowed.rsv1 || ext.rsv1;\n                        allowed.rsv2 = allowed.rsv2 || ext.rsv2;\n                        allowed.rsv3 = allowed.rsv3 || ext.rsv3;\n                    }\n                }\n                return (allowed.rsv1 || !frame.rsv1) && (allowed.rsv2 || !frame.rsv2) && (allowed.rsv3 || !frame.rsv3);\n            },\n            processIncomingMessage: function(message, callback, context) {\n                this._pipeline.processIncomingMessage(message, callback, context);\n            },\n            processOutgoingMessage: function(message, callback, context) {\n                this._pipeline.processOutgoingMessage(message, callback, context);\n            },\n            close: function(callback, context) {\n                if (!this._pipeline) return callback.call(context);\n                this._pipeline.close(callback, context);\n            },\n            _reserve: function(ext) {\n                this._rsv1 = this._rsv1 || ext.rsv1 && ext.name;\n                this._rsv2 = this._rsv2 || ext.rsv2 && ext.name;\n                this._rsv3 = this._rsv3 || ext.rsv3 && ext.name;\n            },\n            _reserved: function(ext) {\n                if (this._rsv1 && ext.rsv1) return [\n                    1,\n                    this._rsv1\n                ];\n                if (this._rsv2 && ext.rsv2) return [\n                    2,\n                    this._rsv2\n                ];\n                if (this._rsv3 && ext.rsv3) return [\n                    3,\n                    this._rsv3\n                ];\n                return false;\n            }\n        };\n        for(var key in instance)Extensions.prototype[key] = instance[key];\n        module1.exports = Extensions;\n    /***/ },\n    /* 30 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        var TOKEN = /([!#\\$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z]+)/, NOTOKEN = /([^!#\\$%&'\\*\\+\\-\\.\\^_`\\|~0-9A-Za-z])/g, QUOTED = /\"((?:\\\\[\\x00-\\x7f]|[^\\x00-\\x08\\x0a-\\x1f\\x7f\"\\\\])*)\"/, PARAM = new RegExp(TOKEN.source + \"(?:=(?:\" + TOKEN.source + \"|\" + QUOTED.source + \"))?\"), EXT = new RegExp(TOKEN.source + \"(?: *; *\" + PARAM.source + \")*\", \"g\"), EXT_LIST = new RegExp(\"^\" + EXT.source + \"(?: *, *\" + EXT.source + \")*$\"), NUMBER = /^-?(0|[1-9][0-9]*)(\\.[0-9]+)?$/;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var Parser = {\n            parseHeader: function(header) {\n                var offers = new Offers();\n                if (header === \"\" || header === undefined) return offers;\n                if (!EXT_LIST.test(header)) throw new SyntaxError(\"Invalid Sec-WebSocket-Extensions header: \" + header);\n                var values = header.match(EXT);\n                values.forEach(function(value) {\n                    var params = value.match(new RegExp(PARAM.source, \"g\")), name = params.shift(), offer = {};\n                    params.forEach(function(param) {\n                        var args = param.match(PARAM), key = args[1], data;\n                        if (args[2] !== undefined) {\n                            data = args[2];\n                        } else if (args[3] !== undefined) {\n                            data = args[3].replace(/\\\\/g, \"\");\n                        } else {\n                            data = true;\n                        }\n                        if (NUMBER.test(data)) data = parseFloat(data);\n                        if (hasOwnProperty.call(offer, key)) {\n                            offer[key] = [].concat(offer[key]);\n                            offer[key].push(data);\n                        } else {\n                            offer[key] = data;\n                        }\n                    }, this);\n                    offers.push(name, offer);\n                }, this);\n                return offers;\n            },\n            serializeParams: function(name, params) {\n                var values = [];\n                var print = function(key, value) {\n                    if (value instanceof Array) {\n                        value.forEach(function(v) {\n                            print(key, v);\n                        });\n                    } else if (value === true) {\n                        values.push(key);\n                    } else if (typeof value === \"number\") {\n                        values.push(key + \"=\" + value);\n                    } else if (NOTOKEN.test(value)) {\n                        values.push(key + '=\"' + value.replace(/\"/g, '\\\\\"') + '\"');\n                    } else {\n                        values.push(key + \"=\" + value);\n                    }\n                };\n                for(var key in params)print(key, params[key]);\n                return [\n                    name\n                ].concat(values).join(\"; \");\n            }\n        };\n        var Offers = function() {\n            this._byName = {};\n            this._inOrder = [];\n        };\n        Offers.prototype.push = function(name, params) {\n            if (!hasOwnProperty.call(this._byName, name)) this._byName[name] = [];\n            this._byName[name].push(params);\n            this._inOrder.push({\n                name: name,\n                params: params\n            });\n        };\n        Offers.prototype.eachOffer = function(callback, context) {\n            var list = this._inOrder;\n            for(var i = 0, n = list.length; i < n; i++)callback.call(context, list[i].name, list[i].params);\n        };\n        Offers.prototype.byName = function(name) {\n            return this._byName[name] || [];\n        };\n        Offers.prototype.toArray = function() {\n            return this._inOrder.slice();\n        };\n        module1.exports = Parser;\n    /***/ },\n    /* 31 */ /***/ function(module1, exports, __nested_webpack_require_237950__) {\n        \"use strict\";\n        var Cell = __nested_webpack_require_237950__(32), Pledge = __nested_webpack_require_237950__(14);\n        var Pipeline = function(sessions) {\n            this._cells = sessions.map(function(session) {\n                return new Cell(session);\n            });\n            this._stopped = {\n                incoming: false,\n                outgoing: false\n            };\n        };\n        Pipeline.prototype.processIncomingMessage = function(message, callback, context) {\n            if (this._stopped.incoming) return;\n            this._loop(\"incoming\", this._cells.length - 1, -1, -1, message, callback, context);\n        };\n        Pipeline.prototype.processOutgoingMessage = function(message, callback, context) {\n            if (this._stopped.outgoing) return;\n            this._loop(\"outgoing\", 0, this._cells.length, 1, message, callback, context);\n        };\n        Pipeline.prototype.close = function(callback, context) {\n            this._stopped = {\n                incoming: true,\n                outgoing: true\n            };\n            var closed = this._cells.map(function(a) {\n                return a.close();\n            });\n            if (callback) Pledge.all(closed).then(function() {\n                callback.call(context);\n            });\n        };\n        Pipeline.prototype._loop = function(direction, start, end, step, message, callback, context) {\n            var cells = this._cells, n = cells.length, self1 = this;\n            while(n--)cells[n].pending(direction);\n            var pipe = function(index, error, msg) {\n                if (index === end) return callback.call(context, error, msg);\n                cells[index][direction](error, msg, function(err, m) {\n                    if (err) self1._stopped[direction] = true;\n                    pipe(index + step, err, m);\n                });\n            };\n            pipe(start, null, message);\n        };\n        module1.exports = Pipeline;\n    /***/ },\n    /* 32 */ /***/ function(module1, exports, __nested_webpack_require_239966__) {\n        \"use strict\";\n        var Functor = __nested_webpack_require_239966__(33), Pledge = __nested_webpack_require_239966__(14);\n        var Cell = function(tuple) {\n            this._ext = tuple[0];\n            this._session = tuple[1];\n            this._functors = {\n                incoming: new Functor(this._session, \"processIncomingMessage\"),\n                outgoing: new Functor(this._session, \"processOutgoingMessage\")\n            };\n        };\n        Cell.prototype.pending = function(direction) {\n            var functor = this._functors[direction];\n            if (!functor._stopped) functor.pending += 1;\n        };\n        Cell.prototype.incoming = function(error, message, callback, context) {\n            this._exec(\"incoming\", error, message, callback, context);\n        };\n        Cell.prototype.outgoing = function(error, message, callback, context) {\n            this._exec(\"outgoing\", error, message, callback, context);\n        };\n        Cell.prototype.close = function() {\n            this._closed = this._closed || new Pledge();\n            this._doClose();\n            return this._closed;\n        };\n        Cell.prototype._exec = function(direction, error, message, callback, context) {\n            this._functors[direction].call(error, message, function(err, msg) {\n                if (err) err.message = this._ext.name + \": \" + err.message;\n                callback.call(context, err, msg);\n                this._doClose();\n            }, this);\n        };\n        Cell.prototype._doClose = function() {\n            var fin = this._functors.incoming, fout = this._functors.outgoing;\n            if (!this._closed || fin.pending + fout.pending !== 0) return;\n            if (this._session) this._session.close();\n            this._session = null;\n            this._closed.done();\n        };\n        module1.exports = Cell;\n    /***/ },\n    /* 33 */ /***/ function(module1, exports, __nested_webpack_require_241875__) {\n        \"use strict\";\n        var RingBuffer = __nested_webpack_require_241875__(13);\n        var Functor = function(session, method) {\n            this._session = session;\n            this._method = method;\n            this._queue = new RingBuffer(Functor.QUEUE_SIZE);\n            this._stopped = false;\n            this.pending = 0;\n        };\n        Functor.QUEUE_SIZE = 8;\n        Functor.prototype.call = function(error, message, callback, context) {\n            if (this._stopped) return;\n            var record = {\n                error: error,\n                message: message,\n                callback: callback,\n                context: context,\n                done: false\n            }, called = false, self1 = this;\n            this._queue.push(record);\n            if (record.error) {\n                record.done = true;\n                this._stop();\n                return this._flushQueue();\n            }\n            var handler = function(err, msg) {\n                if (!(called ^ (called = true))) return;\n                if (err) {\n                    self1._stop();\n                    record.error = err;\n                    record.message = null;\n                } else {\n                    record.message = msg;\n                }\n                record.done = true;\n                self1._flushQueue();\n            };\n            try {\n                this._session[this._method](message, handler);\n            } catch (err) {\n                handler(err);\n            }\n        };\n        Functor.prototype._stop = function() {\n            this.pending = this._queue.length;\n            this._stopped = true;\n        };\n        Functor.prototype._flushQueue = function() {\n            var queue = this._queue, record;\n            while(queue.length > 0 && queue.peek().done){\n                record = queue.shift();\n                if (record.error) {\n                    this.pending = 0;\n                    queue.clear();\n                } else {\n                    this.pending -= 1;\n                }\n                record.callback.call(record.context, record.error, record.message);\n            }\n        };\n        module1.exports = Functor;\n    /***/ },\n    /* 34 */ /***/ function(module1, exports, __webpack_require__) {\n        \"use strict\";\n        var Frame = function() {};\n        var instance = {\n            final: false,\n            rsv1: false,\n            rsv2: false,\n            rsv3: false,\n            opcode: null,\n            masked: false,\n            maskingKey: null,\n            lengthBytes: 1,\n            length: 0,\n            payload: null\n        };\n        for(var key in instance)Frame.prototype[key] = instance[key];\n        module1.exports = Frame;\n    /***/ },\n    /* 35 */ /***/ function(module1, exports, __nested_webpack_require_244661__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_244661__(1).Buffer;\n        var Message = function() {\n            this.rsv1 = false;\n            this.rsv2 = false;\n            this.rsv3 = false;\n            this.opcode = null;\n            this.length = 0;\n            this._chunks = [];\n        };\n        var instance = {\n            read: function() {\n                return this.data = this.data || Buffer1.concat(this._chunks, this.length);\n            },\n            pushFrame: function(frame) {\n                this.rsv1 = this.rsv1 || frame.rsv1;\n                this.rsv2 = this.rsv2 || frame.rsv2;\n                this.rsv3 = this.rsv3 || frame.rsv3;\n                if (this.opcode === null) this.opcode = frame.opcode;\n                this._chunks.push(frame.payload);\n                this.length += frame.length;\n            }\n        };\n        for(var key in instance)Message.prototype[key] = instance[key];\n        module1.exports = Message;\n    /***/ },\n    /* 36 */ /***/ function(module1, exports, __nested_webpack_require_245708__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_245708__(1).Buffer, Stream = __nested_webpack_require_245708__(5).Stream, url = __nested_webpack_require_245708__(6), util = __nested_webpack_require_245708__(0), Base = __nested_webpack_require_245708__(2), Headers = __nested_webpack_require_245708__(9), HttpParser = __nested_webpack_require_245708__(10);\n        var PORTS = {\n            \"ws:\": 80,\n            \"wss:\": 443\n        };\n        var Proxy = function(client, origin, options) {\n            this._client = client;\n            this._http = new HttpParser(\"response\");\n            this._origin = typeof client.url === \"object\" ? client.url : url.parse(client.url);\n            this._url = typeof origin === \"object\" ? origin : url.parse(origin);\n            this._options = options || {};\n            this._state = 0;\n            this.readable = this.writable = true;\n            this._paused = false;\n            this._headers = new Headers();\n            this._headers.set(\"Host\", this._origin.host);\n            this._headers.set(\"Connection\", \"keep-alive\");\n            this._headers.set(\"Proxy-Connection\", \"keep-alive\");\n            var auth = this._url.auth && Buffer1.from(this._url.auth, \"utf8\").toString(\"base64\");\n            if (auth) this._headers.set(\"Proxy-Authorization\", \"Basic \" + auth);\n        };\n        util.inherits(Proxy, Stream);\n        var instance = {\n            setHeader: function(name, value) {\n                if (this._state !== 0) return false;\n                this._headers.set(name, value);\n                return true;\n            },\n            start: function() {\n                if (this._state !== 0) return false;\n                this._state = 1;\n                var origin = this._origin, port = origin.port || PORTS[origin.protocol], start = \"CONNECT \" + origin.hostname + \":\" + port + \" HTTP/1.1\";\n                var headers = [\n                    start,\n                    this._headers.toString(),\n                    \"\"\n                ];\n                this.emit(\"data\", Buffer1.from(headers.join(\"\\r\\n\"), \"utf8\"));\n                return true;\n            },\n            pause: function() {\n                this._paused = true;\n            },\n            resume: function() {\n                this._paused = false;\n                this.emit(\"drain\");\n            },\n            write: function(chunk) {\n                if (!this.writable) return false;\n                this._http.parse(chunk);\n                if (!this._http.isComplete()) return !this._paused;\n                this.statusCode = this._http.statusCode;\n                this.headers = this._http.headers;\n                if (this.statusCode === 200) {\n                    this.emit(\"connect\", new Base.ConnectEvent());\n                } else {\n                    var message = \"Can't establish a connection to the server at \" + this._origin.href;\n                    this.emit(\"error\", new Error(message));\n                }\n                this.end();\n                return !this._paused;\n            },\n            end: function(chunk) {\n                if (!this.writable) return;\n                if (chunk !== undefined) this.write(chunk);\n                this.readable = this.writable = false;\n                this.emit(\"close\");\n                this.emit(\"end\");\n            },\n            destroy: function() {\n                this.end();\n            }\n        };\n        for(var key in instance)Proxy.prototype[key] = instance[key];\n        module1.exports = Proxy;\n    /***/ },\n    /* 37 */ /***/ function(module1, exports, __nested_webpack_require_249219__) {\n        \"use strict\";\n        var util = __nested_webpack_require_249219__(0), HttpParser = __nested_webpack_require_249219__(10), Base = __nested_webpack_require_249219__(2), Draft75 = __nested_webpack_require_249219__(15), Draft76 = __nested_webpack_require_249219__(38), Hybi = __nested_webpack_require_249219__(12);\n        var Server = function(options) {\n            Base.call(this, null, null, options);\n            this._http = new HttpParser(\"request\");\n        };\n        util.inherits(Server, Base);\n        var instance = {\n            EVENTS: [\n                \"open\",\n                \"message\",\n                \"error\",\n                \"close\",\n                \"ping\",\n                \"pong\"\n            ],\n            _bindEventListeners: function() {\n                this.messages.on(\"error\", function() {});\n                this.on(\"error\", function() {});\n            },\n            parse: function(chunk) {\n                if (this._delegate) return this._delegate.parse(chunk);\n                this._http.parse(chunk);\n                if (!this._http.isComplete()) return;\n                this.method = this._http.method;\n                this.url = this._http.url;\n                this.headers = this._http.headers;\n                this.body = this._http.body;\n                var self1 = this;\n                this._delegate = Server.http(this, this._options);\n                this._delegate.messages = this.messages;\n                this._delegate.io = this.io;\n                this._open();\n                this.EVENTS.forEach(function(event) {\n                    this._delegate.on(event, function(e) {\n                        self1.emit(event, e);\n                    });\n                }, this);\n                this.protocol = this._delegate.protocol;\n                this.version = this._delegate.version;\n                this.parse(this._http.body);\n                this.emit(\"connect\", new Base.ConnectEvent());\n            },\n            _open: function() {\n                this.__queue.forEach(function(msg) {\n                    this._delegate[msg[0]].apply(this._delegate, msg[1]);\n                }, this);\n                this.__queue = [];\n            }\n        };\n        [\n            \"addExtension\",\n            \"setHeader\",\n            \"start\",\n            \"frame\",\n            \"text\",\n            \"binary\",\n            \"ping\",\n            \"close\"\n        ].forEach(function(method) {\n            instance[method] = function() {\n                if (this._delegate) {\n                    return this._delegate[method].apply(this._delegate, arguments);\n                } else {\n                    this.__queue.push([\n                        method,\n                        arguments\n                    ]);\n                    return true;\n                }\n            };\n        });\n        for(var key in instance)Server.prototype[key] = instance[key];\n        Server.isSecureRequest = function(request) {\n            if (request.connection && request.connection.authorized !== undefined) return true;\n            if (request.socket && request.socket.secure) return true;\n            var headers = request.headers;\n            if (!headers) return false;\n            if (headers[\"https\"] === \"on\") return true;\n            if (headers[\"x-forwarded-ssl\"] === \"on\") return true;\n            if (headers[\"x-forwarded-scheme\"] === \"https\") return true;\n            if (headers[\"x-forwarded-proto\"] === \"https\") return true;\n            return false;\n        };\n        Server.determineUrl = function(request) {\n            var scheme = this.isSecureRequest(request) ? \"wss:\" : \"ws:\";\n            return scheme + \"//\" + request.headers.host + request.url;\n        };\n        Server.http = function(request, options) {\n            options = options || {};\n            if (options.requireMasking === undefined) options.requireMasking = true;\n            var headers = request.headers, version = headers[\"sec-websocket-version\"], key = headers[\"sec-websocket-key\"], key1 = headers[\"sec-websocket-key1\"], key2 = headers[\"sec-websocket-key2\"], url = this.determineUrl(request);\n            if (version || key) return new Hybi(request, url, options);\n            else if (key1 || key2) return new Draft76(request, url, options);\n            else return new Draft75(request, url, options);\n        };\n        module1.exports = Server;\n    /***/ },\n    /* 38 */ /***/ function(module1, exports, __nested_webpack_require_253584__) {\n        \"use strict\";\n        var Buffer1 = __nested_webpack_require_253584__(1).Buffer, Base = __nested_webpack_require_253584__(2), Draft75 = __nested_webpack_require_253584__(15), crypto = __nested_webpack_require_253584__(3), util = __nested_webpack_require_253584__(0);\n        var numberFromKey = function(key) {\n            return parseInt((key.match(/[0-9]/g) || []).join(\"\"), 10);\n        };\n        var spacesInKey = function(key) {\n            return (key.match(/ /g) || []).length;\n        };\n        var Draft76 = function(request, url, options) {\n            Draft75.apply(this, arguments);\n            this._stage = -1;\n            this._body = [];\n            this.version = \"hixie-76\";\n            this._headers.clear();\n            this._headers.set(\"Upgrade\", \"WebSocket\");\n            this._headers.set(\"Connection\", \"Upgrade\");\n            this._headers.set(\"Sec-WebSocket-Origin\", this._request.headers.origin);\n            this._headers.set(\"Sec-WebSocket-Location\", this.url);\n        };\n        util.inherits(Draft76, Draft75);\n        var instance = {\n            BODY_SIZE: 8,\n            start: function() {\n                if (!Draft75.prototype.start.call(this)) return false;\n                this._started = true;\n                this._sendHandshakeBody();\n                return true;\n            },\n            close: function() {\n                if (this.readyState === 3) return false;\n                if (this.readyState === 1) this._write(Buffer1.from([\n                    0xFF,\n                    0x00\n                ]));\n                this.readyState = 3;\n                this.emit(\"close\", new Base.CloseEvent(null, null));\n                return true;\n            },\n            _handshakeResponse: function() {\n                var headers = this._request.headers, key1 = headers[\"sec-websocket-key1\"], key2 = headers[\"sec-websocket-key2\"];\n                if (!key1) throw new Error(\"Missing required header: Sec-WebSocket-Key1\");\n                if (!key2) throw new Error(\"Missing required header: Sec-WebSocket-Key2\");\n                var number1 = numberFromKey(key1), spaces1 = spacesInKey(key1), number2 = numberFromKey(key2), spaces2 = spacesInKey(key2);\n                if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) throw new Error(\"Client sent invalid Sec-WebSocket-Key headers\");\n                this._keyValues = [\n                    number1 / spaces1,\n                    number2 / spaces2\n                ];\n                var start = \"HTTP/1.1 101 WebSocket Protocol Handshake\", headers = [\n                    start,\n                    this._headers.toString(),\n                    \"\"\n                ];\n                return Buffer1.from(headers.join(\"\\r\\n\"), \"binary\");\n            },\n            _handshakeSignature: function() {\n                if (this._body.length < this.BODY_SIZE) return null;\n                var md5 = crypto.createHash(\"md5\"), buffer = Buffer1.allocUnsafe(8 + this.BODY_SIZE);\n                buffer.writeUInt32BE(this._keyValues[0], 0);\n                buffer.writeUInt32BE(this._keyValues[1], 4);\n                Buffer1.from(this._body).copy(buffer, 8, 0, this.BODY_SIZE);\n                md5.update(buffer);\n                return Buffer1.from(md5.digest(\"binary\"), \"binary\");\n            },\n            _sendHandshakeBody: function() {\n                if (!this._started) return;\n                var signature = this._handshakeSignature();\n                if (!signature) return;\n                this._write(signature);\n                this._stage = 0;\n                this._open();\n                if (this._body.length > this.BODY_SIZE) this.parse(this._body.slice(this.BODY_SIZE));\n            },\n            _parseLeadingByte: function(octet) {\n                if (octet !== 0xFF) return Draft75.prototype._parseLeadingByte.call(this, octet);\n                this._closing = true;\n                this._length = 0;\n                this._stage = 1;\n            }\n        };\n        for(var key in instance)Draft76.prototype[key] = instance[key];\n        module1.exports = Draft76;\n    /***/ },\n    /* 39 */ /***/ function(module1, exports, __nested_webpack_require_257688__) {\n        \"use strict\";\n        var util = __nested_webpack_require_257688__(0), net = __nested_webpack_require_257688__(40), tls = __nested_webpack_require_257688__(41), url = __nested_webpack_require_257688__(6), driver = __nested_webpack_require_257688__(4), API = __nested_webpack_require_257688__(11), Event = __nested_webpack_require_257688__(7);\n        var DEFAULT_PORTS = {\n            \"http:\": 80,\n            \"https:\": 443,\n            \"ws:\": 80,\n            \"wss:\": 443\n        }, SECURE_PROTOCOLS = [\n            \"https:\",\n            \"wss:\"\n        ];\n        var Client = function(_url, protocols, options) {\n            options = options || {};\n            this.url = _url;\n            this._driver = driver.client(this.url, {\n                maxLength: options.maxLength,\n                protocols: protocols\n            });\n            [\n                \"open\",\n                \"error\"\n            ].forEach(function(event) {\n                this._driver.on(event, function() {\n                    self1.headers = self1._driver.headers;\n                    self1.statusCode = self1._driver.statusCode;\n                });\n            }, this);\n            var proxy = options.proxy || {}, endpoint = url.parse(proxy.origin || this.url), port = endpoint.port || DEFAULT_PORTS[endpoint.protocol], secure = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0, onConnect = function() {\n                self1._onConnect();\n            }, netOptions = options.net || {}, originTLS = options.tls || {}, socketTLS = proxy.origin ? proxy.tls || {} : originTLS, self1 = this;\n            netOptions.host = socketTLS.host = endpoint.hostname;\n            netOptions.port = socketTLS.port = port;\n            originTLS.ca = originTLS.ca || options.ca;\n            socketTLS.servername = socketTLS.servername || endpoint.hostname;\n            this._stream = secure ? tls.connect(socketTLS, onConnect) : net.connect(netOptions, onConnect);\n            if (proxy.origin) this._configureProxy(proxy, originTLS);\n            API.call(this, options);\n        };\n        util.inherits(Client, API);\n        Client.prototype._onConnect = function() {\n            var worker = this._proxy || this._driver;\n            worker.start();\n        };\n        Client.prototype._configureProxy = function(proxy, originTLS) {\n            var uri = url.parse(this.url), secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0, self1 = this, name;\n            this._proxy = this._driver.proxy(proxy.origin);\n            if (proxy.headers) {\n                for(name in proxy.headers)this._proxy.setHeader(name, proxy.headers[name]);\n            }\n            this._proxy.pipe(this._stream, {\n                end: false\n            });\n            this._stream.pipe(this._proxy);\n            this._proxy.on(\"connect\", function() {\n                if (secure) {\n                    var options = {\n                        socket: self1._stream,\n                        servername: uri.hostname\n                    };\n                    for(name in originTLS)options[name] = originTLS[name];\n                    self1._stream = tls.connect(options);\n                    self1._configureStream();\n                }\n                self1._driver.io.pipe(self1._stream);\n                self1._stream.pipe(self1._driver.io);\n                self1._driver.start();\n            });\n            this._proxy.on(\"error\", function(error) {\n                self1._driver.emit(\"error\", error);\n            });\n        };\n        module1.exports = Client;\n    /***/ },\n    /* 40 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! net */ \"net\");\n    /***/ },\n    /* 41 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! tls */ \"tls\");\n    /***/ },\n    /* 42 */ /***/ function(module1, exports, __nested_webpack_require_261398__) {\n        \"use strict\";\n        var Stream = __nested_webpack_require_261398__(5).Stream, util = __nested_webpack_require_261398__(0), driver = __nested_webpack_require_261398__(4), Headers = __nested_webpack_require_261398__(9), API = __nested_webpack_require_261398__(11), EventTarget = __nested_webpack_require_261398__(16), Event = __nested_webpack_require_261398__(7);\n        var EventSource = function(request, response, options) {\n            this.writable = true;\n            options = options || {};\n            this._stream = response.socket;\n            this._ping = options.ping || this.DEFAULT_PING;\n            this._retry = options.retry || this.DEFAULT_RETRY;\n            var scheme = driver.isSecureRequest(request) ? \"https:\" : \"http:\";\n            this.url = scheme + \"//\" + request.headers.host + request.url;\n            this.lastEventId = request.headers[\"last-event-id\"] || \"\";\n            this.readyState = API.CONNECTING;\n            var headers = new Headers(), self1 = this;\n            if (options.headers) {\n                for(var key in options.headers)headers.set(key, options.headers[key]);\n            }\n            if (!this._stream || !this._stream.writable) return;\n            process.nextTick(function() {\n                self1._open();\n            });\n            this._stream.setTimeout(0);\n            this._stream.setNoDelay(true);\n            var handshake = \"HTTP/1.1 200 OK\\r\\n\" + \"Content-Type: text/event-stream\\r\\n\" + \"Cache-Control: no-cache, no-store\\r\\n\" + \"Connection: close\\r\\n\" + headers.toString() + \"\\r\\n\" + \"retry: \" + Math.floor(this._retry * 1000) + \"\\r\\n\\r\\n\";\n            this._write(handshake);\n            this._stream.on(\"drain\", function() {\n                self1.emit(\"drain\");\n            });\n            if (this._ping) this._pingTimer = setInterval(function() {\n                self1.ping();\n            }, this._ping * 1000);\n            [\n                \"error\",\n                \"end\"\n            ].forEach(function(event) {\n                self1._stream.on(event, function() {\n                    self1.close();\n                });\n            });\n        };\n        util.inherits(EventSource, Stream);\n        EventSource.isEventSource = function(request) {\n            if (request.method !== \"GET\") return false;\n            var accept = (request.headers.accept || \"\").split(/\\s*,\\s*/);\n            return accept.indexOf(\"text/event-stream\") >= 0;\n        };\n        var instance = {\n            DEFAULT_PING: 10,\n            DEFAULT_RETRY: 5,\n            _write: function(chunk) {\n                if (!this.writable) return false;\n                try {\n                    return this._stream.write(chunk, \"utf8\");\n                } catch (e) {\n                    return false;\n                }\n            },\n            _open: function() {\n                if (this.readyState !== API.CONNECTING) return;\n                this.readyState = API.OPEN;\n                var event = new Event(\"open\");\n                event.initEvent(\"open\", false, false);\n                this.dispatchEvent(event);\n            },\n            write: function(message) {\n                return this.send(message);\n            },\n            end: function(message) {\n                if (message !== undefined) this.write(message);\n                this.close();\n            },\n            send: function(message, options) {\n                if (this.readyState > API.OPEN) return false;\n                message = String(message).replace(/(\\r\\n|\\r|\\n)/g, \"$1data: \");\n                options = options || {};\n                var frame = \"\";\n                if (options.event) frame += \"event: \" + options.event + \"\\r\\n\";\n                if (options.id) frame += \"id: \" + options.id + \"\\r\\n\";\n                frame += \"data: \" + message + \"\\r\\n\\r\\n\";\n                return this._write(frame);\n            },\n            ping: function() {\n                return this._write(\":\\r\\n\\r\\n\");\n            },\n            close: function() {\n                if (this.readyState > API.OPEN) return false;\n                this.readyState = API.CLOSED;\n                this.writable = false;\n                if (this._pingTimer) clearInterval(this._pingTimer);\n                if (this._stream) this._stream.end();\n                var event = new Event(\"close\");\n                event.initEvent(\"close\", false, false);\n                this.dispatchEvent(event);\n                return true;\n            }\n        };\n        for(var method in instance)EventSource.prototype[method] = instance[method];\n        for(var key in EventTarget)EventSource.prototype[key] = EventTarget[key];\n        module1.exports = EventSource;\n    /***/ },\n    /* 43 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! child_process */ \"child_process\");\n    /***/ },\n    /* 44 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! fs */ \"fs\");\n    /***/ },\n    /* 45 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! http */ \"http\");\n    /***/ },\n    /* 46 */ /***/ function(module1, exports) {\n        module1.exports = __webpack_require__(/*! https */ \"https\");\n    /***/ },\n    /* 47 */ /***/ function(module1, __nested_webpack_exports__, __nested_webpack_require_266482__) {\n        \"use strict\";\n        // ESM COMPAT FLAG\n        __nested_webpack_require_266482__.r(__nested_webpack_exports__);\n        // EXPORTS\n        __nested_webpack_require_266482__.d(__nested_webpack_exports__, \"default\", function() {\n            return /* binding */ pusher_with_encryption_PusherWithEncryption;\n        });\n        // CONCATENATED MODULE: ./src/core/base64.ts\n        function encode(s) {\n            return btoa(utob(s));\n        }\n        var fromCharCode = String.fromCharCode;\n        var b64chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var b64tab = {};\n        for(var base64_i = 0, l = b64chars.length; base64_i < l; base64_i++){\n            b64tab[b64chars.charAt(base64_i)] = base64_i;\n        }\n        var cb_utob = function(c) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);\n        };\n        var utob = function(u) {\n            return u.replace(/[^\\x00-\\x7F]/g, cb_utob);\n        };\n        var cb_encode = function(ccc) {\n            var padlen = [\n                0,\n                2,\n                1\n            ][ccc.length % 3];\n            var ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0);\n            var chars = [\n                b64chars.charAt(ord >>> 18),\n                b64chars.charAt(ord >>> 12 & 63),\n                padlen >= 2 ? \"=\" : b64chars.charAt(ord >>> 6 & 63),\n                padlen >= 1 ? \"=\" : b64chars.charAt(ord & 63)\n            ];\n            return chars.join(\"\");\n        };\n        var btoa = global.btoa || function(b) {\n            return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n        };\n        // CONCATENATED MODULE: ./src/core/utils/timers/abstract_timer.ts\n        class Timer {\n            constructor(set, clear, delay, callback){\n                this.clear = clear;\n                this.timer = set(()=>{\n                    if (this.timer) {\n                        this.timer = callback(this.timer);\n                    }\n                }, delay);\n            }\n            isRunning() {\n                return this.timer !== null;\n            }\n            ensureAborted() {\n                if (this.timer) {\n                    this.clear(this.timer);\n                    this.timer = null;\n                }\n            }\n        }\n        /* harmony default export */ var abstract_timer = Timer;\n        // CONCATENATED MODULE: ./src/core/utils/timers/index.ts\n        function timers_clearTimeout(timer) {\n            global.clearTimeout(timer);\n        }\n        function timers_clearInterval(timer) {\n            global.clearInterval(timer);\n        }\n        class timers_OneOffTimer extends abstract_timer {\n            constructor(delay, callback){\n                super(setTimeout, timers_clearTimeout, delay, function(timer) {\n                    callback();\n                    return null;\n                });\n            }\n        }\n        class timers_PeriodicTimer extends abstract_timer {\n            constructor(delay, callback){\n                super(setInterval, timers_clearInterval, delay, function(timer) {\n                    callback();\n                    return timer;\n                });\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/util.ts\n        var Util = {\n            now () {\n                if (Date.now) {\n                    return Date.now();\n                } else {\n                    return new Date().valueOf();\n                }\n            },\n            defer (callback) {\n                return new timers_OneOffTimer(0, callback);\n            },\n            method (name, ...args) {\n                var boundArguments = Array.prototype.slice.call(arguments, 1);\n                return function(object) {\n                    return object[name].apply(object, boundArguments.concat(arguments));\n                };\n            }\n        };\n        /* harmony default export */ var util = Util;\n        // CONCATENATED MODULE: ./src/core/utils/collections.ts\n        function extend(target, ...sources) {\n            for(var i = 0; i < sources.length; i++){\n                var extensions = sources[i];\n                for(var property in extensions){\n                    if (extensions[property] && extensions[property].constructor && extensions[property].constructor === Object) {\n                        target[property] = extend(target[property] || {}, extensions[property]);\n                    } else {\n                        target[property] = extensions[property];\n                    }\n                }\n            }\n            return target;\n        }\n        function stringify() {\n            var m = [\n                \"Pusher\"\n            ];\n            for(var i = 0; i < arguments.length; i++){\n                if (typeof arguments[i] === \"string\") {\n                    m.push(arguments[i]);\n                } else {\n                    m.push(safeJSONStringify(arguments[i]));\n                }\n            }\n            return m.join(\" : \");\n        }\n        function arrayIndexOf(array, item) {\n            var nativeIndexOf = Array.prototype.indexOf;\n            if (array === null) {\n                return -1;\n            }\n            if (nativeIndexOf && array.indexOf === nativeIndexOf) {\n                return array.indexOf(item);\n            }\n            for(var i = 0, l = array.length; i < l; i++){\n                if (array[i] === item) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        function objectApply(object, f) {\n            for(var key in object){\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    f(object[key], key, object);\n                }\n            }\n        }\n        function keys(object) {\n            var keys = [];\n            objectApply(object, function(_, key) {\n                keys.push(key);\n            });\n            return keys;\n        }\n        function values(object) {\n            var values = [];\n            objectApply(object, function(value) {\n                values.push(value);\n            });\n            return values;\n        }\n        function apply(array, f, context) {\n            for(var i = 0; i < array.length; i++){\n                f.call(context || global, array[i], i, array);\n            }\n        }\n        function map(array, f) {\n            var result = [];\n            for(var i = 0; i < array.length; i++){\n                result.push(f(array[i], i, array, result));\n            }\n            return result;\n        }\n        function mapObject(object, f) {\n            var result = {};\n            objectApply(object, function(value, key) {\n                result[key] = f(value);\n            });\n            return result;\n        }\n        function filter(array, test) {\n            test = test || function(value) {\n                return !!value;\n            };\n            var result = [];\n            for(var i = 0; i < array.length; i++){\n                if (test(array[i], i, array, result)) {\n                    result.push(array[i]);\n                }\n            }\n            return result;\n        }\n        function filterObject(object, test) {\n            var result = {};\n            objectApply(object, function(value, key) {\n                if (test && test(value, key, object, result) || Boolean(value)) {\n                    result[key] = value;\n                }\n            });\n            return result;\n        }\n        function flatten(object) {\n            var result = [];\n            objectApply(object, function(value, key) {\n                result.push([\n                    key,\n                    value\n                ]);\n            });\n            return result;\n        }\n        function any(array, test) {\n            for(var i = 0; i < array.length; i++){\n                if (test(array[i], i, array)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function collections_all(array, test) {\n            for(var i = 0; i < array.length; i++){\n                if (!test(array[i], i, array)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function encodeParamsObject(data) {\n            return mapObject(data, function(value) {\n                if (typeof value === \"object\") {\n                    value = safeJSONStringify(value);\n                }\n                return encodeURIComponent(encode(value.toString()));\n            });\n        }\n        function buildQueryString(data) {\n            var params = filterObject(data, function(value) {\n                return value !== undefined;\n            });\n            var query = map(flatten(encodeParamsObject(params)), util.method(\"join\", \"=\")).join(\"&\");\n            return query;\n        }\n        function decycleObject(object) {\n            var objects = [], paths = [];\n            return function derez(value, path) {\n                var i, name, nu;\n                switch(typeof value){\n                    case \"object\":\n                        if (!value) {\n                            return null;\n                        }\n                        for(i = 0; i < objects.length; i += 1){\n                            if (objects[i] === value) {\n                                return {\n                                    $ref: paths[i]\n                                };\n                            }\n                        }\n                        objects.push(value);\n                        paths.push(path);\n                        if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n                            nu = [];\n                            for(i = 0; i < value.length; i += 1){\n                                nu[i] = derez(value[i], path + \"[\" + i + \"]\");\n                            }\n                        } else {\n                            nu = {};\n                            for(name in value){\n                                if (Object.prototype.hasOwnProperty.call(value, name)) {\n                                    nu[name] = derez(value[name], path + \"[\" + JSON.stringify(name) + \"]\");\n                                }\n                            }\n                        }\n                        return nu;\n                    case \"number\":\n                    case \"string\":\n                    case \"boolean\":\n                        return value;\n                }\n            }(object, \"$\");\n        }\n        function safeJSONStringify(source) {\n            try {\n                return JSON.stringify(source);\n            } catch (e) {\n                return JSON.stringify(decycleObject(source));\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/defaults.ts\n        var Defaults = {\n            VERSION: \"8.4.0-rc2\",\n            PROTOCOL: 7,\n            wsPort: 80,\n            wssPort: 443,\n            wsPath: \"\",\n            httpHost: \"sockjs.pusher.com\",\n            httpPort: 80,\n            httpsPort: 443,\n            httpPath: \"/pusher\",\n            stats_host: \"stats.pusher.com\",\n            authEndpoint: \"/pusher/auth\",\n            authTransport: \"ajax\",\n            activityTimeout: 120000,\n            pongTimeout: 30000,\n            unavailableTimeout: 10000,\n            userAuthentication: {\n                endpoint: \"/pusher/user-auth\",\n                transport: \"ajax\"\n            },\n            channelAuthorization: {\n                endpoint: \"/pusher/auth\",\n                transport: \"ajax\"\n            },\n            cdn_http: \"http://js.pusher.com\",\n            cdn_https: \"https://js.pusher.com\",\n            dependency_suffix: \"\"\n        };\n        /* harmony default export */ var defaults = Defaults;\n        // CONCATENATED MODULE: ./src/core/transports/url_schemes.ts\n        function getGenericURL(baseScheme, params, path) {\n            var scheme = baseScheme + (params.useTLS ? \"s\" : \"\");\n            var host = params.useTLS ? params.hostTLS : params.hostNonTLS;\n            return scheme + \"://\" + host + path;\n        }\n        function getGenericPath(key, queryString) {\n            var path = \"/app/\" + key;\n            var query = \"?protocol=\" + defaults.PROTOCOL + \"&client=js\" + \"&version=\" + defaults.VERSION + (queryString ? \"&\" + queryString : \"\");\n            return path + query;\n        }\n        var ws = {\n            getInitial: function(key, params) {\n                var path = (params.httpPath || \"\") + getGenericPath(key, \"flash=false\");\n                return getGenericURL(\"ws\", params, path);\n            }\n        };\n        var http = {\n            getInitial: function(key, params) {\n                var path = (params.httpPath || \"/pusher\") + getGenericPath(key);\n                return getGenericURL(\"http\", params, path);\n            }\n        };\n        var sockjs = {\n            getInitial: function(key, params) {\n                return getGenericURL(\"http\", params, params.httpPath || \"/pusher\");\n            },\n            getPath: function(key, params) {\n                return getGenericPath(key);\n            }\n        };\n        // CONCATENATED MODULE: ./src/core/events/callback_registry.ts\n        class callback_registry_CallbackRegistry {\n            constructor(){\n                this._callbacks = {};\n            }\n            get(name) {\n                return this._callbacks[prefix(name)];\n            }\n            add(name, callback, context) {\n                var prefixedEventName = prefix(name);\n                this._callbacks[prefixedEventName] = this._callbacks[prefixedEventName] || [];\n                this._callbacks[prefixedEventName].push({\n                    fn: callback,\n                    context: context\n                });\n            }\n            remove(name, callback, context) {\n                if (!name && !callback && !context) {\n                    this._callbacks = {};\n                    return;\n                }\n                var names = name ? [\n                    prefix(name)\n                ] : keys(this._callbacks);\n                if (callback || context) {\n                    this.removeCallback(names, callback, context);\n                } else {\n                    this.removeAllCallbacks(names);\n                }\n            }\n            removeCallback(names, callback, context) {\n                apply(names, function(name) {\n                    this._callbacks[name] = filter(this._callbacks[name] || [], function(binding) {\n                        return callback && callback !== binding.fn || context && context !== binding.context;\n                    });\n                    if (this._callbacks[name].length === 0) {\n                        delete this._callbacks[name];\n                    }\n                }, this);\n            }\n            removeAllCallbacks(names) {\n                apply(names, function(name) {\n                    delete this._callbacks[name];\n                }, this);\n            }\n        }\n        function prefix(name) {\n            return \"_\" + name;\n        }\n        // CONCATENATED MODULE: ./src/core/events/dispatcher.ts\n        class dispatcher_Dispatcher {\n            constructor(failThrough){\n                this.callbacks = new callback_registry_CallbackRegistry();\n                this.global_callbacks = [];\n                this.failThrough = failThrough;\n            }\n            bind(eventName, callback, context) {\n                this.callbacks.add(eventName, callback, context);\n                return this;\n            }\n            bind_global(callback) {\n                this.global_callbacks.push(callback);\n                return this;\n            }\n            unbind(eventName, callback, context) {\n                this.callbacks.remove(eventName, callback, context);\n                return this;\n            }\n            unbind_global(callback) {\n                if (!callback) {\n                    this.global_callbacks = [];\n                    return this;\n                }\n                this.global_callbacks = filter(this.global_callbacks || [], (c)=>c !== callback);\n                return this;\n            }\n            unbind_all() {\n                this.unbind();\n                this.unbind_global();\n                return this;\n            }\n            emit(eventName, data, metadata) {\n                for(var i = 0; i < this.global_callbacks.length; i++){\n                    this.global_callbacks[i](eventName, data);\n                }\n                var callbacks = this.callbacks.get(eventName);\n                var args = [];\n                if (metadata) {\n                    args.push(data, metadata);\n                } else if (data) {\n                    args.push(data);\n                }\n                if (callbacks && callbacks.length > 0) {\n                    for(var i = 0; i < callbacks.length; i++){\n                        callbacks[i].fn.apply(callbacks[i].context || global, args);\n                    }\n                } else if (this.failThrough) {\n                    this.failThrough(eventName, data);\n                }\n                return this;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/logger.ts\n        class logger_Logger {\n            constructor(){\n                this.globalLog = (message)=>{\n                    if (global.console && global.console.log) {\n                        global.console.log(message);\n                    }\n                };\n            }\n            debug(...args) {\n                this.log(this.globalLog, args);\n            }\n            warn(...args) {\n                this.log(this.globalLogWarn, args);\n            }\n            error(...args) {\n                this.log(this.globalLogError, args);\n            }\n            globalLogWarn(message) {\n                if (global.console && global.console.warn) {\n                    global.console.warn(message);\n                } else {\n                    this.globalLog(message);\n                }\n            }\n            globalLogError(message) {\n                if (global.console && global.console.error) {\n                    global.console.error(message);\n                } else {\n                    this.globalLogWarn(message);\n                }\n            }\n            log(defaultLoggingFunction, ...args) {\n                var message = stringify.apply(this, arguments);\n                if (core_pusher.log) {\n                    core_pusher.log(message);\n                } else if (core_pusher.logToConsole) {\n                    const log = defaultLoggingFunction.bind(this);\n                    log(message);\n                }\n            }\n        }\n        /* harmony default export */ var logger = new logger_Logger();\n        // CONCATENATED MODULE: ./src/core/transports/transport_connection.ts\n        class transport_connection_TransportConnection extends dispatcher_Dispatcher {\n            constructor(hooks, name, priority, key, options){\n                super();\n                this.initialize = node_runtime.transportConnectionInitializer;\n                this.hooks = hooks;\n                this.name = name;\n                this.priority = priority;\n                this.key = key;\n                this.options = options;\n                this.state = \"new\";\n                this.timeline = options.timeline;\n                this.activityTimeout = options.activityTimeout;\n                this.id = this.timeline.generateUniqueID();\n            }\n            handlesActivityChecks() {\n                return Boolean(this.hooks.handlesActivityChecks);\n            }\n            supportsPing() {\n                return Boolean(this.hooks.supportsPing);\n            }\n            connect() {\n                if (this.socket || this.state !== \"initialized\") {\n                    return false;\n                }\n                var url = this.hooks.urls.getInitial(this.key, this.options);\n                try {\n                    this.socket = this.hooks.getSocket(url, this.options);\n                } catch (e) {\n                    util.defer(()=>{\n                        this.onError(e);\n                        this.changeState(\"closed\");\n                    });\n                    return false;\n                }\n                this.bindListeners();\n                logger.debug(\"Connecting\", {\n                    transport: this.name,\n                    url\n                });\n                this.changeState(\"connecting\");\n                return true;\n            }\n            close() {\n                if (this.socket) {\n                    this.socket.close();\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            send(data) {\n                if (this.state === \"open\") {\n                    util.defer(()=>{\n                        if (this.socket) {\n                            this.socket.send(data);\n                        }\n                    });\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            ping() {\n                if (this.state === \"open\" && this.supportsPing()) {\n                    this.socket.ping();\n                }\n            }\n            onOpen() {\n                if (this.hooks.beforeOpen) {\n                    this.hooks.beforeOpen(this.socket, this.hooks.urls.getPath(this.key, this.options));\n                }\n                this.changeState(\"open\");\n                this.socket.onopen = undefined;\n            }\n            onError(error) {\n                this.emit(\"error\", {\n                    type: \"WebSocketError\",\n                    error: error\n                });\n                this.timeline.error(this.buildTimelineMessage({\n                    error: error.toString()\n                }));\n            }\n            onClose(closeEvent) {\n                if (closeEvent) {\n                    this.changeState(\"closed\", {\n                        code: closeEvent.code,\n                        reason: closeEvent.reason,\n                        wasClean: closeEvent.wasClean\n                    });\n                } else {\n                    this.changeState(\"closed\");\n                }\n                this.unbindListeners();\n                this.socket = undefined;\n            }\n            onMessage(message) {\n                this.emit(\"message\", message);\n            }\n            onActivity() {\n                this.emit(\"activity\");\n            }\n            bindListeners() {\n                this.socket.onopen = ()=>{\n                    this.onOpen();\n                };\n                this.socket.onerror = (error)=>{\n                    this.onError(error);\n                };\n                this.socket.onclose = (closeEvent)=>{\n                    this.onClose(closeEvent);\n                };\n                this.socket.onmessage = (message)=>{\n                    this.onMessage(message);\n                };\n                if (this.supportsPing()) {\n                    this.socket.onactivity = ()=>{\n                        this.onActivity();\n                    };\n                }\n            }\n            unbindListeners() {\n                if (this.socket) {\n                    this.socket.onopen = undefined;\n                    this.socket.onerror = undefined;\n                    this.socket.onclose = undefined;\n                    this.socket.onmessage = undefined;\n                    if (this.supportsPing()) {\n                        this.socket.onactivity = undefined;\n                    }\n                }\n            }\n            changeState(state, params) {\n                this.state = state;\n                this.timeline.info(this.buildTimelineMessage({\n                    state: state,\n                    params: params\n                }));\n                this.emit(state, params);\n            }\n            buildTimelineMessage(message) {\n                return extend({\n                    cid: this.id\n                }, message);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/transports/transport.ts\n        class transport_Transport {\n            constructor(hooks){\n                this.hooks = hooks;\n            }\n            isSupported(environment) {\n                return this.hooks.isSupported(environment);\n            }\n            createConnection(name, priority, key, options) {\n                return new transport_connection_TransportConnection(this.hooks, name, priority, key, options);\n            }\n        }\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/transports/transports.ts\n        var WSTransport = new transport_Transport({\n            urls: ws,\n            handlesActivityChecks: false,\n            supportsPing: false,\n            isInitialized: function() {\n                return Boolean(node_runtime.getWebSocketAPI());\n            },\n            isSupported: function() {\n                return Boolean(node_runtime.getWebSocketAPI());\n            },\n            getSocket: function(url) {\n                return node_runtime.createWebSocket(url);\n            }\n        });\n        var httpConfiguration = {\n            urls: http,\n            handlesActivityChecks: false,\n            supportsPing: true,\n            isInitialized: function() {\n                return true;\n            }\n        };\n        var streamingConfiguration = extend({\n            getSocket: function(url) {\n                return node_runtime.HTTPFactory.createStreamingSocket(url);\n            }\n        }, httpConfiguration);\n        var pollingConfiguration = extend({\n            getSocket: function(url) {\n                return node_runtime.HTTPFactory.createPollingSocket(url);\n            }\n        }, httpConfiguration);\n        var xhrConfiguration = {\n            isSupported: function() {\n                return node_runtime.isXHRSupported();\n            }\n        };\n        var XHRStreamingTransport = new transport_Transport(extend({}, streamingConfiguration, xhrConfiguration));\n        var XHRPollingTransport = new transport_Transport(extend({}, pollingConfiguration, xhrConfiguration));\n        var Transports = {\n            ws: WSTransport,\n            xhr_streaming: XHRStreamingTransport,\n            xhr_polling: XHRPollingTransport\n        };\n        /* harmony default export */ var transports = Transports;\n        // CONCATENATED MODULE: ./src/core/transports/assistant_to_the_transport_manager.ts\n        class assistant_to_the_transport_manager_AssistantToTheTransportManager {\n            constructor(manager, transport, options){\n                this.manager = manager;\n                this.transport = transport;\n                this.minPingDelay = options.minPingDelay;\n                this.maxPingDelay = options.maxPingDelay;\n                this.pingDelay = undefined;\n            }\n            createConnection(name, priority, key, options) {\n                options = extend({}, options, {\n                    activityTimeout: this.pingDelay\n                });\n                var connection = this.transport.createConnection(name, priority, key, options);\n                var openTimestamp = null;\n                var onOpen = function() {\n                    connection.unbind(\"open\", onOpen);\n                    connection.bind(\"closed\", onClosed);\n                    openTimestamp = util.now();\n                };\n                var onClosed = (closeEvent)=>{\n                    connection.unbind(\"closed\", onClosed);\n                    if (closeEvent.code === 1002 || closeEvent.code === 1003) {\n                        this.manager.reportDeath();\n                    } else if (!closeEvent.wasClean && openTimestamp) {\n                        var lifespan = util.now() - openTimestamp;\n                        if (lifespan < 2 * this.maxPingDelay) {\n                            this.manager.reportDeath();\n                            this.pingDelay = Math.max(lifespan / 2, this.minPingDelay);\n                        }\n                    }\n                };\n                connection.bind(\"open\", onOpen);\n                return connection;\n            }\n            isSupported(environment) {\n                return this.manager.isAlive() && this.transport.isSupported(environment);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/connection/protocol/protocol.ts\n        const Protocol = {\n            decodeMessage: function(messageEvent) {\n                try {\n                    var messageData = JSON.parse(messageEvent.data);\n                    var pusherEventData = messageData.data;\n                    if (typeof pusherEventData === \"string\") {\n                        try {\n                            pusherEventData = JSON.parse(messageData.data);\n                        } catch (e) {}\n                    }\n                    var pusherEvent = {\n                        event: messageData.event,\n                        channel: messageData.channel,\n                        data: pusherEventData\n                    };\n                    if (messageData.user_id) {\n                        pusherEvent.user_id = messageData.user_id;\n                    }\n                    return pusherEvent;\n                } catch (e) {\n                    throw {\n                        type: \"MessageParseError\",\n                        error: e,\n                        data: messageEvent.data\n                    };\n                }\n            },\n            encodeMessage: function(event) {\n                return JSON.stringify(event);\n            },\n            processHandshake: function(messageEvent) {\n                var message = Protocol.decodeMessage(messageEvent);\n                if (message.event === \"pusher:connection_established\") {\n                    if (!message.data.activity_timeout) {\n                        throw \"No activity timeout specified in handshake\";\n                    }\n                    return {\n                        action: \"connected\",\n                        id: message.data.socket_id,\n                        activityTimeout: message.data.activity_timeout * 1000\n                    };\n                } else if (message.event === \"pusher:error\") {\n                    return {\n                        action: this.getCloseAction(message.data),\n                        error: this.getCloseError(message.data)\n                    };\n                } else {\n                    throw \"Invalid handshake\";\n                }\n            },\n            getCloseAction: function(closeEvent) {\n                if (closeEvent.code < 4000) {\n                    if (closeEvent.code >= 1002 && closeEvent.code <= 1004) {\n                        return \"backoff\";\n                    } else {\n                        return null;\n                    }\n                } else if (closeEvent.code === 4000) {\n                    return \"tls_only\";\n                } else if (closeEvent.code < 4100) {\n                    return \"refused\";\n                } else if (closeEvent.code < 4200) {\n                    return \"backoff\";\n                } else if (closeEvent.code < 4300) {\n                    return \"retry\";\n                } else {\n                    return \"refused\";\n                }\n            },\n            getCloseError: function(closeEvent) {\n                if (closeEvent.code !== 1000 && closeEvent.code !== 1001) {\n                    return {\n                        type: \"PusherError\",\n                        data: {\n                            code: closeEvent.code,\n                            message: closeEvent.reason || closeEvent.message\n                        }\n                    };\n                } else {\n                    return null;\n                }\n            }\n        };\n        /* harmony default export */ var protocol = Protocol;\n        // CONCATENATED MODULE: ./src/core/connection/connection.ts\n        class connection_Connection extends dispatcher_Dispatcher {\n            constructor(id, transport){\n                super();\n                this.id = id;\n                this.transport = transport;\n                this.activityTimeout = transport.activityTimeout;\n                this.bindListeners();\n            }\n            handlesActivityChecks() {\n                return this.transport.handlesActivityChecks();\n            }\n            send(data) {\n                return this.transport.send(data);\n            }\n            send_event(name, data, channel) {\n                var event = {\n                    event: name,\n                    data: data\n                };\n                if (channel) {\n                    event.channel = channel;\n                }\n                logger.debug(\"Event sent\", event);\n                return this.send(protocol.encodeMessage(event));\n            }\n            ping() {\n                if (this.transport.supportsPing()) {\n                    this.transport.ping();\n                } else {\n                    this.send_event(\"pusher:ping\", {});\n                }\n            }\n            close() {\n                this.transport.close();\n            }\n            bindListeners() {\n                var listeners = {\n                    message: (messageEvent)=>{\n                        var pusherEvent;\n                        try {\n                            pusherEvent = protocol.decodeMessage(messageEvent);\n                        } catch (e) {\n                            this.emit(\"error\", {\n                                type: \"MessageParseError\",\n                                error: e,\n                                data: messageEvent.data\n                            });\n                        }\n                        if (pusherEvent !== undefined) {\n                            logger.debug(\"Event recd\", pusherEvent);\n                            switch(pusherEvent.event){\n                                case \"pusher:error\":\n                                    this.emit(\"error\", {\n                                        type: \"PusherError\",\n                                        data: pusherEvent.data\n                                    });\n                                    break;\n                                case \"pusher:ping\":\n                                    this.emit(\"ping\");\n                                    break;\n                                case \"pusher:pong\":\n                                    this.emit(\"pong\");\n                                    break;\n                            }\n                            this.emit(\"message\", pusherEvent);\n                        }\n                    },\n                    activity: ()=>{\n                        this.emit(\"activity\");\n                    },\n                    error: (error)=>{\n                        this.emit(\"error\", error);\n                    },\n                    closed: (closeEvent)=>{\n                        unbindListeners();\n                        if (closeEvent && closeEvent.code) {\n                            this.handleCloseEvent(closeEvent);\n                        }\n                        this.transport = null;\n                        this.emit(\"closed\");\n                    }\n                };\n                var unbindListeners = ()=>{\n                    objectApply(listeners, (listener, event)=>{\n                        this.transport.unbind(event, listener);\n                    });\n                };\n                objectApply(listeners, (listener, event)=>{\n                    this.transport.bind(event, listener);\n                });\n            }\n            handleCloseEvent(closeEvent) {\n                var action = protocol.getCloseAction(closeEvent);\n                var error = protocol.getCloseError(closeEvent);\n                if (error) {\n                    this.emit(\"error\", error);\n                }\n                if (action) {\n                    this.emit(action, {\n                        action: action,\n                        error: error\n                    });\n                }\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/connection/handshake/index.ts\n        class handshake_Handshake {\n            constructor(transport, callback){\n                this.transport = transport;\n                this.callback = callback;\n                this.bindListeners();\n            }\n            close() {\n                this.unbindListeners();\n                this.transport.close();\n            }\n            bindListeners() {\n                this.onMessage = (m)=>{\n                    this.unbindListeners();\n                    var result;\n                    try {\n                        result = protocol.processHandshake(m);\n                    } catch (e) {\n                        this.finish(\"error\", {\n                            error: e\n                        });\n                        this.transport.close();\n                        return;\n                    }\n                    if (result.action === \"connected\") {\n                        this.finish(\"connected\", {\n                            connection: new connection_Connection(result.id, this.transport),\n                            activityTimeout: result.activityTimeout\n                        });\n                    } else {\n                        this.finish(result.action, {\n                            error: result.error\n                        });\n                        this.transport.close();\n                    }\n                };\n                this.onClosed = (closeEvent)=>{\n                    this.unbindListeners();\n                    var action = protocol.getCloseAction(closeEvent) || \"backoff\";\n                    var error = protocol.getCloseError(closeEvent);\n                    this.finish(action, {\n                        error: error\n                    });\n                };\n                this.transport.bind(\"message\", this.onMessage);\n                this.transport.bind(\"closed\", this.onClosed);\n            }\n            unbindListeners() {\n                this.transport.unbind(\"message\", this.onMessage);\n                this.transport.unbind(\"closed\", this.onClosed);\n            }\n            finish(action, params) {\n                this.callback(extend({\n                    transport: this.transport,\n                    action: action\n                }, params));\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/timeline/timeline_sender.ts\n        class timeline_sender_TimelineSender {\n            constructor(timeline, options){\n                this.timeline = timeline;\n                this.options = options || {};\n            }\n            send(useTLS, callback) {\n                if (this.timeline.isEmpty()) {\n                    return;\n                }\n                this.timeline.send(node_runtime.TimelineTransport.getAgent(this, useTLS), callback);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/errors.ts\n        class BadEventName extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class BadChannelName extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class RequestTimedOut extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class TransportPriorityTooLow extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class TransportClosed extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class UnsupportedFeature extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class UnsupportedTransport extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class UnsupportedStrategy extends Error {\n            constructor(msg){\n                super(msg);\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        class HTTPAuthError extends Error {\n            constructor(status, msg){\n                super(msg);\n                this.status = status;\n                Object.setPrototypeOf(this, new.target.prototype);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/utils/url_store.ts\n        const urlStore = {\n            baseUrl: \"https://pusher.com\",\n            urls: {\n                authenticationEndpoint: {\n                    path: \"/docs/channels/server_api/authenticating_users\"\n                },\n                authorizationEndpoint: {\n                    path: \"/docs/channels/server_api/authorizing-users/\"\n                },\n                javascriptQuickStart: {\n                    path: \"/docs/javascript_quick_start\"\n                },\n                triggeringClientEvents: {\n                    path: \"/docs/client_api_guide/client_events#trigger-events\"\n                },\n                encryptedChannelSupport: {\n                    fullUrl: \"https://github.com/pusher/pusher-js/tree/cc491015371a4bde5743d1c87a0fbac0feb53195#encrypted-channel-support\"\n                }\n            }\n        };\n        const buildLogSuffix = function(key) {\n            const urlPrefix = \"See:\";\n            const urlObj = urlStore.urls[key];\n            if (!urlObj) return \"\";\n            let url;\n            if (urlObj.fullUrl) {\n                url = urlObj.fullUrl;\n            } else if (urlObj.path) {\n                url = urlStore.baseUrl + urlObj.path;\n            }\n            if (!url) return \"\";\n            return `${urlPrefix} ${url}`;\n        };\n        /* harmony default export */ var url_store = {\n            buildLogSuffix\n        };\n        // CONCATENATED MODULE: ./src/core/channels/channel.ts\n        class channel_Channel extends dispatcher_Dispatcher {\n            constructor(name, pusher){\n                super(function(event, data) {\n                    logger.debug(\"No callbacks on \" + name + \" for \" + event);\n                });\n                this.name = name;\n                this.pusher = pusher;\n                this.subscribed = false;\n                this.subscriptionPending = false;\n                this.subscriptionCancelled = false;\n            }\n            authorize(socketId, callback) {\n                return callback(null, {\n                    auth: \"\"\n                });\n            }\n            trigger(event, data) {\n                if (event.indexOf(\"client-\") !== 0) {\n                    throw new BadEventName(\"Event '\" + event + \"' does not start with 'client-'\");\n                }\n                if (!this.subscribed) {\n                    var suffix = url_store.buildLogSuffix(\"triggeringClientEvents\");\n                    logger.warn(`Client event triggered before channel 'subscription_succeeded' event . ${suffix}`);\n                }\n                return this.pusher.send_event(event, data, this.name);\n            }\n            disconnect() {\n                this.subscribed = false;\n                this.subscriptionPending = false;\n            }\n            handleEvent(event) {\n                var eventName = event.event;\n                var data = event.data;\n                if (eventName === \"pusher_internal:subscription_succeeded\") {\n                    this.handleSubscriptionSucceededEvent(event);\n                } else if (eventName === \"pusher_internal:subscription_count\") {\n                    this.handleSubscriptionCountEvent(event);\n                } else if (eventName.indexOf(\"pusher_internal:\") !== 0) {\n                    var metadata = {};\n                    this.emit(eventName, data, metadata);\n                }\n            }\n            handleSubscriptionSucceededEvent(event) {\n                this.subscriptionPending = false;\n                this.subscribed = true;\n                if (this.subscriptionCancelled) {\n                    this.pusher.unsubscribe(this.name);\n                } else {\n                    this.emit(\"pusher:subscription_succeeded\", event.data);\n                }\n            }\n            handleSubscriptionCountEvent(event) {\n                if (event.data.subscription_count) {\n                    this.subscriptionCount = event.data.subscription_count;\n                }\n                this.emit(\"pusher:subscription_count\", event.data);\n            }\n            subscribe() {\n                if (this.subscribed) {\n                    return;\n                }\n                this.subscriptionPending = true;\n                this.subscriptionCancelled = false;\n                this.authorize(this.pusher.connection.socket_id, (error, data)=>{\n                    if (error) {\n                        this.subscriptionPending = false;\n                        logger.error(error.toString());\n                        this.emit(\"pusher:subscription_error\", Object.assign({}, {\n                            type: \"AuthError\",\n                            error: error.message\n                        }, error instanceof HTTPAuthError ? {\n                            status: error.status\n                        } : {}));\n                    } else {\n                        this.pusher.send_event(\"pusher:subscribe\", {\n                            auth: data.auth,\n                            channel_data: data.channel_data,\n                            channel: this.name\n                        });\n                    }\n                });\n            }\n            unsubscribe() {\n                this.subscribed = false;\n                this.pusher.send_event(\"pusher:unsubscribe\", {\n                    channel: this.name\n                });\n            }\n            cancelSubscription() {\n                this.subscriptionCancelled = true;\n            }\n            reinstateSubscription() {\n                this.subscriptionCancelled = false;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/channels/private_channel.ts\n        class private_channel_PrivateChannel extends channel_Channel {\n            authorize(socketId, callback) {\n                return this.pusher.config.channelAuthorizer({\n                    channelName: this.name,\n                    socketId: socketId\n                }, callback);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/channels/members.ts\n        class members_Members {\n            constructor(){\n                this.reset();\n            }\n            get(id) {\n                if (Object.prototype.hasOwnProperty.call(this.members, id)) {\n                    return {\n                        id: id,\n                        info: this.members[id]\n                    };\n                } else {\n                    return null;\n                }\n            }\n            each(callback) {\n                objectApply(this.members, (member, id)=>{\n                    callback(this.get(id));\n                });\n            }\n            setMyID(id) {\n                this.myID = id;\n            }\n            onSubscription(subscriptionData) {\n                this.members = subscriptionData.presence.hash;\n                this.count = subscriptionData.presence.count;\n                this.me = this.get(this.myID);\n            }\n            addMember(memberData) {\n                if (this.get(memberData.user_id) === null) {\n                    this.count++;\n                }\n                this.members[memberData.user_id] = memberData.user_info;\n                return this.get(memberData.user_id);\n            }\n            removeMember(memberData) {\n                var member = this.get(memberData.user_id);\n                if (member) {\n                    delete this.members[memberData.user_id];\n                    this.count--;\n                }\n                return member;\n            }\n            reset() {\n                this.members = {};\n                this.count = 0;\n                this.myID = null;\n                this.me = null;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/channels/presence_channel.ts\n        var __awaiter =  false || function(thisArg, _arguments, P, generator) {\n            function adopt(value) {\n                return value instanceof P ? value : new P(function(resolve) {\n                    resolve(value);\n                });\n            }\n            return new (P || (P = Promise))(function(resolve, reject) {\n                function fulfilled(value) {\n                    try {\n                        step(generator.next(value));\n                    } catch (e) {\n                        reject(e);\n                    }\n                }\n                function rejected(value) {\n                    try {\n                        step(generator[\"throw\"](value));\n                    } catch (e) {\n                        reject(e);\n                    }\n                }\n                function step(result) {\n                    result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n                }\n                step((generator = generator.apply(thisArg, _arguments || [])).next());\n            });\n        };\n        class presence_channel_PresenceChannel extends private_channel_PrivateChannel {\n            constructor(name, pusher){\n                super(name, pusher);\n                this.members = new members_Members();\n            }\n            authorize(socketId, callback) {\n                super.authorize(socketId, (error, authData)=>__awaiter(this, void 0, void 0, function*() {\n                        if (!error) {\n                            authData = authData;\n                            if (authData.channel_data != null) {\n                                var channelData = JSON.parse(authData.channel_data);\n                                this.members.setMyID(channelData.user_id);\n                            } else {\n                                yield this.pusher.user.signinDonePromise;\n                                if (this.pusher.user.user_data != null) {\n                                    this.members.setMyID(this.pusher.user.user_data.id);\n                                } else {\n                                    let suffix = url_store.buildLogSuffix(\"authorizationEndpoint\");\n                                    logger.error(`Invalid auth response for channel '${this.name}', ` + `expected 'channel_data' field. ${suffix}, ` + `or the user should be signed in.`);\n                                    callback(\"Invalid auth response\");\n                                    return;\n                                }\n                            }\n                        }\n                        callback(error, authData);\n                    }));\n            }\n            handleEvent(event) {\n                var eventName = event.event;\n                if (eventName.indexOf(\"pusher_internal:\") === 0) {\n                    this.handleInternalEvent(event);\n                } else {\n                    var data = event.data;\n                    var metadata = {};\n                    if (event.user_id) {\n                        metadata.user_id = event.user_id;\n                    }\n                    this.emit(eventName, data, metadata);\n                }\n            }\n            handleInternalEvent(event) {\n                var eventName = event.event;\n                var data = event.data;\n                switch(eventName){\n                    case \"pusher_internal:subscription_succeeded\":\n                        this.handleSubscriptionSucceededEvent(event);\n                        break;\n                    case \"pusher_internal:subscription_count\":\n                        this.handleSubscriptionCountEvent(event);\n                        break;\n                    case \"pusher_internal:member_added\":\n                        var addedMember = this.members.addMember(data);\n                        this.emit(\"pusher:member_added\", addedMember);\n                        break;\n                    case \"pusher_internal:member_removed\":\n                        var removedMember = this.members.removeMember(data);\n                        if (removedMember) {\n                            this.emit(\"pusher:member_removed\", removedMember);\n                        }\n                        break;\n                }\n            }\n            handleSubscriptionSucceededEvent(event) {\n                this.subscriptionPending = false;\n                this.subscribed = true;\n                if (this.subscriptionCancelled) {\n                    this.pusher.unsubscribe(this.name);\n                } else {\n                    this.members.onSubscription(event.data);\n                    this.emit(\"pusher:subscription_succeeded\", this.members);\n                }\n            }\n            disconnect() {\n                this.members.reset();\n                super.disconnect();\n            }\n        }\n        // EXTERNAL MODULE: ./node_modules/@stablelib/utf8/lib/utf8.js\n        var utf8 = __nested_webpack_require_266482__(17);\n        // EXTERNAL MODULE: ./node_modules/@stablelib/base64/lib/base64.js\n        var base64 = __nested_webpack_require_266482__(8);\n        // CONCATENATED MODULE: ./src/core/channels/encrypted_channel.ts\n        class encrypted_channel_EncryptedChannel extends private_channel_PrivateChannel {\n            constructor(name, pusher, nacl){\n                super(name, pusher);\n                this.key = null;\n                this.nacl = nacl;\n            }\n            authorize(socketId, callback) {\n                super.authorize(socketId, (error, authData)=>{\n                    if (error) {\n                        callback(error, authData);\n                        return;\n                    }\n                    let sharedSecret = authData[\"shared_secret\"];\n                    if (!sharedSecret) {\n                        callback(new Error(`No shared_secret key in auth payload for encrypted channel: ${this.name}`), null);\n                        return;\n                    }\n                    this.key = Object(base64[\"decode\"])(sharedSecret);\n                    delete authData[\"shared_secret\"];\n                    callback(null, authData);\n                });\n            }\n            trigger(event, data) {\n                throw new UnsupportedFeature(\"Client events are not currently supported for encrypted channels\");\n            }\n            handleEvent(event) {\n                var eventName = event.event;\n                var data = event.data;\n                if (eventName.indexOf(\"pusher_internal:\") === 0 || eventName.indexOf(\"pusher:\") === 0) {\n                    super.handleEvent(event);\n                    return;\n                }\n                this.handleEncryptedEvent(eventName, data);\n            }\n            handleEncryptedEvent(event, data) {\n                if (!this.key) {\n                    logger.debug(\"Received encrypted event before key has been retrieved from the authEndpoint\");\n                    return;\n                }\n                if (!data.ciphertext || !data.nonce) {\n                    logger.error(\"Unexpected format for encrypted event, expected object with `ciphertext` and `nonce` fields, got: \" + data);\n                    return;\n                }\n                let cipherText = Object(base64[\"decode\"])(data.ciphertext);\n                if (cipherText.length < this.nacl.secretbox.overheadLength) {\n                    logger.error(`Expected encrypted event ciphertext length to be ${this.nacl.secretbox.overheadLength}, got: ${cipherText.length}`);\n                    return;\n                }\n                let nonce = Object(base64[\"decode\"])(data.nonce);\n                if (nonce.length < this.nacl.secretbox.nonceLength) {\n                    logger.error(`Expected encrypted event nonce length to be ${this.nacl.secretbox.nonceLength}, got: ${nonce.length}`);\n                    return;\n                }\n                let bytes = this.nacl.secretbox.open(cipherText, nonce, this.key);\n                if (bytes === null) {\n                    logger.debug(\"Failed to decrypt an event, probably because it was encrypted with a different key. Fetching a new key from the authEndpoint...\");\n                    this.authorize(this.pusher.connection.socket_id, (error, authData)=>{\n                        if (error) {\n                            logger.error(`Failed to make a request to the authEndpoint: ${authData}. Unable to fetch new key, so dropping encrypted event`);\n                            return;\n                        }\n                        bytes = this.nacl.secretbox.open(cipherText, nonce, this.key);\n                        if (bytes === null) {\n                            logger.error(`Failed to decrypt event with new key. Dropping encrypted event`);\n                            return;\n                        }\n                        this.emit(event, this.getDataToEmit(bytes));\n                        return;\n                    });\n                    return;\n                }\n                this.emit(event, this.getDataToEmit(bytes));\n            }\n            getDataToEmit(bytes) {\n                let raw = Object(utf8[\"decode\"])(bytes);\n                try {\n                    return JSON.parse(raw);\n                } catch (_a) {\n                    return raw;\n                }\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/connection/connection_manager.ts\n        class connection_manager_ConnectionManager extends dispatcher_Dispatcher {\n            constructor(key, options){\n                super();\n                this.state = \"initialized\";\n                this.connection = null;\n                this.key = key;\n                this.options = options;\n                this.timeline = this.options.timeline;\n                this.usingTLS = this.options.useTLS;\n                this.errorCallbacks = this.buildErrorCallbacks();\n                this.connectionCallbacks = this.buildConnectionCallbacks(this.errorCallbacks);\n                this.handshakeCallbacks = this.buildHandshakeCallbacks(this.errorCallbacks);\n                var Network = node_runtime.getNetwork();\n                Network.bind(\"online\", ()=>{\n                    this.timeline.info({\n                        netinfo: \"online\"\n                    });\n                    if (this.state === \"connecting\" || this.state === \"unavailable\") {\n                        this.retryIn(0);\n                    }\n                });\n                Network.bind(\"offline\", ()=>{\n                    this.timeline.info({\n                        netinfo: \"offline\"\n                    });\n                    if (this.connection) {\n                        this.sendActivityCheck();\n                    }\n                });\n                this.updateStrategy();\n            }\n            switchCluster(key) {\n                this.key = key;\n                this.updateStrategy();\n                this.retryIn(0);\n            }\n            connect() {\n                if (this.connection || this.runner) {\n                    return;\n                }\n                if (!this.strategy.isSupported()) {\n                    this.updateState(\"failed\");\n                    return;\n                }\n                this.updateState(\"connecting\");\n                this.startConnecting();\n                this.setUnavailableTimer();\n            }\n            send(data) {\n                if (this.connection) {\n                    return this.connection.send(data);\n                } else {\n                    return false;\n                }\n            }\n            send_event(name, data, channel) {\n                if (this.connection) {\n                    return this.connection.send_event(name, data, channel);\n                } else {\n                    return false;\n                }\n            }\n            disconnect() {\n                this.disconnectInternally();\n                this.updateState(\"disconnected\");\n            }\n            isUsingTLS() {\n                return this.usingTLS;\n            }\n            startConnecting() {\n                var callback = (error, handshake)=>{\n                    if (error) {\n                        this.runner = this.strategy.connect(0, callback);\n                    } else {\n                        if (handshake.action === \"error\") {\n                            this.emit(\"error\", {\n                                type: \"HandshakeError\",\n                                error: handshake.error\n                            });\n                            this.timeline.error({\n                                handshakeError: handshake.error\n                            });\n                        } else {\n                            this.abortConnecting();\n                            this.handshakeCallbacks[handshake.action](handshake);\n                        }\n                    }\n                };\n                this.runner = this.strategy.connect(0, callback);\n            }\n            abortConnecting() {\n                if (this.runner) {\n                    this.runner.abort();\n                    this.runner = null;\n                }\n            }\n            disconnectInternally() {\n                this.abortConnecting();\n                this.clearRetryTimer();\n                this.clearUnavailableTimer();\n                if (this.connection) {\n                    var connection = this.abandonConnection();\n                    connection.close();\n                }\n            }\n            updateStrategy() {\n                this.strategy = this.options.getStrategy({\n                    key: this.key,\n                    timeline: this.timeline,\n                    useTLS: this.usingTLS\n                });\n            }\n            retryIn(delay) {\n                this.timeline.info({\n                    action: \"retry\",\n                    delay: delay\n                });\n                if (delay > 0) {\n                    this.emit(\"connecting_in\", Math.round(delay / 1000));\n                }\n                this.retryTimer = new timers_OneOffTimer(delay || 0, ()=>{\n                    this.disconnectInternally();\n                    this.connect();\n                });\n            }\n            clearRetryTimer() {\n                if (this.retryTimer) {\n                    this.retryTimer.ensureAborted();\n                    this.retryTimer = null;\n                }\n            }\n            setUnavailableTimer() {\n                this.unavailableTimer = new timers_OneOffTimer(this.options.unavailableTimeout, ()=>{\n                    this.updateState(\"unavailable\");\n                });\n            }\n            clearUnavailableTimer() {\n                if (this.unavailableTimer) {\n                    this.unavailableTimer.ensureAborted();\n                }\n            }\n            sendActivityCheck() {\n                this.stopActivityCheck();\n                this.connection.ping();\n                this.activityTimer = new timers_OneOffTimer(this.options.pongTimeout, ()=>{\n                    this.timeline.error({\n                        pong_timed_out: this.options.pongTimeout\n                    });\n                    this.retryIn(0);\n                });\n            }\n            resetActivityCheck() {\n                this.stopActivityCheck();\n                if (this.connection && !this.connection.handlesActivityChecks()) {\n                    this.activityTimer = new timers_OneOffTimer(this.activityTimeout, ()=>{\n                        this.sendActivityCheck();\n                    });\n                }\n            }\n            stopActivityCheck() {\n                if (this.activityTimer) {\n                    this.activityTimer.ensureAborted();\n                }\n            }\n            buildConnectionCallbacks(errorCallbacks) {\n                return extend({}, errorCallbacks, {\n                    message: (message)=>{\n                        this.resetActivityCheck();\n                        this.emit(\"message\", message);\n                    },\n                    ping: ()=>{\n                        this.send_event(\"pusher:pong\", {});\n                    },\n                    activity: ()=>{\n                        this.resetActivityCheck();\n                    },\n                    error: (error)=>{\n                        this.emit(\"error\", error);\n                    },\n                    closed: ()=>{\n                        this.abandonConnection();\n                        if (this.shouldRetry()) {\n                            this.retryIn(1000);\n                        }\n                    }\n                });\n            }\n            buildHandshakeCallbacks(errorCallbacks) {\n                return extend({}, errorCallbacks, {\n                    connected: (handshake)=>{\n                        this.activityTimeout = Math.min(this.options.activityTimeout, handshake.activityTimeout, handshake.connection.activityTimeout || Infinity);\n                        this.clearUnavailableTimer();\n                        this.setConnection(handshake.connection);\n                        this.socket_id = this.connection.id;\n                        this.updateState(\"connected\", {\n                            socket_id: this.socket_id\n                        });\n                    }\n                });\n            }\n            buildErrorCallbacks() {\n                let withErrorEmitted = (callback)=>{\n                    return (result)=>{\n                        if (result.error) {\n                            this.emit(\"error\", {\n                                type: \"WebSocketError\",\n                                error: result.error\n                            });\n                        }\n                        callback(result);\n                    };\n                };\n                return {\n                    tls_only: withErrorEmitted(()=>{\n                        this.usingTLS = true;\n                        this.updateStrategy();\n                        this.retryIn(0);\n                    }),\n                    refused: withErrorEmitted(()=>{\n                        this.disconnect();\n                    }),\n                    backoff: withErrorEmitted(()=>{\n                        this.retryIn(1000);\n                    }),\n                    retry: withErrorEmitted(()=>{\n                        this.retryIn(0);\n                    })\n                };\n            }\n            setConnection(connection) {\n                this.connection = connection;\n                for(var event in this.connectionCallbacks){\n                    this.connection.bind(event, this.connectionCallbacks[event]);\n                }\n                this.resetActivityCheck();\n            }\n            abandonConnection() {\n                if (!this.connection) {\n                    return;\n                }\n                this.stopActivityCheck();\n                for(var event in this.connectionCallbacks){\n                    this.connection.unbind(event, this.connectionCallbacks[event]);\n                }\n                var connection = this.connection;\n                this.connection = null;\n                return connection;\n            }\n            updateState(newState, data) {\n                var previousState = this.state;\n                this.state = newState;\n                if (previousState !== newState) {\n                    var newStateDescription = newState;\n                    if (newStateDescription === \"connected\") {\n                        newStateDescription += \" with new socket ID \" + data.socket_id;\n                    }\n                    logger.debug(\"State changed\", previousState + \" -> \" + newStateDescription);\n                    this.timeline.info({\n                        state: newState,\n                        params: data\n                    });\n                    this.emit(\"state_change\", {\n                        previous: previousState,\n                        current: newState\n                    });\n                    this.emit(newState, data);\n                }\n            }\n            shouldRetry() {\n                return this.state === \"connecting\" || this.state === \"connected\";\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/channels/channels.ts\n        class channels_Channels {\n            constructor(){\n                this.channels = {};\n            }\n            add(name, pusher) {\n                if (!this.channels[name]) {\n                    this.channels[name] = createChannel(name, pusher);\n                }\n                return this.channels[name];\n            }\n            all() {\n                return values(this.channels);\n            }\n            find(name) {\n                return this.channels[name];\n            }\n            remove(name) {\n                var channel = this.channels[name];\n                delete this.channels[name];\n                return channel;\n            }\n            disconnect() {\n                objectApply(this.channels, function(channel) {\n                    channel.disconnect();\n                });\n            }\n        }\n        function createChannel(name, pusher) {\n            if (name.indexOf(\"private-encrypted-\") === 0) {\n                if (pusher.config.nacl) {\n                    return factory.createEncryptedChannel(name, pusher, pusher.config.nacl);\n                }\n                let errMsg = \"Tried to subscribe to a private-encrypted- channel but no nacl implementation available\";\n                let suffix = url_store.buildLogSuffix(\"encryptedChannelSupport\");\n                throw new UnsupportedFeature(`${errMsg}. ${suffix}`);\n            } else if (name.indexOf(\"private-\") === 0) {\n                return factory.createPrivateChannel(name, pusher);\n            } else if (name.indexOf(\"presence-\") === 0) {\n                return factory.createPresenceChannel(name, pusher);\n            } else if (name.indexOf(\"#\") === 0) {\n                throw new BadChannelName('Cannot create a channel with name \"' + name + '\".');\n            } else {\n                return factory.createChannel(name, pusher);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/utils/factory.ts\n        var Factory = {\n            createChannels () {\n                return new channels_Channels();\n            },\n            createConnectionManager (key, options) {\n                return new connection_manager_ConnectionManager(key, options);\n            },\n            createChannel (name, pusher) {\n                return new channel_Channel(name, pusher);\n            },\n            createPrivateChannel (name, pusher) {\n                return new private_channel_PrivateChannel(name, pusher);\n            },\n            createPresenceChannel (name, pusher) {\n                return new presence_channel_PresenceChannel(name, pusher);\n            },\n            createEncryptedChannel (name, pusher, nacl) {\n                return new encrypted_channel_EncryptedChannel(name, pusher, nacl);\n            },\n            createTimelineSender (timeline, options) {\n                return new timeline_sender_TimelineSender(timeline, options);\n            },\n            createHandshake (transport, callback) {\n                return new handshake_Handshake(transport, callback);\n            },\n            createAssistantToTheTransportManager (manager, transport, options) {\n                return new assistant_to_the_transport_manager_AssistantToTheTransportManager(manager, transport, options);\n            }\n        };\n        /* harmony default export */ var factory = Factory;\n        // CONCATENATED MODULE: ./src/core/transports/transport_manager.ts\n        class transport_manager_TransportManager {\n            constructor(options){\n                this.options = options || {};\n                this.livesLeft = this.options.lives || Infinity;\n            }\n            getAssistant(transport) {\n                return factory.createAssistantToTheTransportManager(this, transport, {\n                    minPingDelay: this.options.minPingDelay,\n                    maxPingDelay: this.options.maxPingDelay\n                });\n            }\n            isAlive() {\n                return this.livesLeft > 0;\n            }\n            reportDeath() {\n                this.livesLeft -= 1;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/sequential_strategy.ts\n        class sequential_strategy_SequentialStrategy {\n            constructor(strategies, options){\n                this.strategies = strategies;\n                this.loop = Boolean(options.loop);\n                this.failFast = Boolean(options.failFast);\n                this.timeout = options.timeout;\n                this.timeoutLimit = options.timeoutLimit;\n            }\n            isSupported() {\n                return any(this.strategies, util.method(\"isSupported\"));\n            }\n            connect(minPriority, callback) {\n                var strategies = this.strategies;\n                var current = 0;\n                var timeout = this.timeout;\n                var runner = null;\n                var tryNextStrategy = (error, handshake)=>{\n                    if (handshake) {\n                        callback(null, handshake);\n                    } else {\n                        current = current + 1;\n                        if (this.loop) {\n                            current = current % strategies.length;\n                        }\n                        if (current < strategies.length) {\n                            if (timeout) {\n                                timeout = timeout * 2;\n                                if (this.timeoutLimit) {\n                                    timeout = Math.min(timeout, this.timeoutLimit);\n                                }\n                            }\n                            runner = this.tryStrategy(strategies[current], minPriority, {\n                                timeout,\n                                failFast: this.failFast\n                            }, tryNextStrategy);\n                        } else {\n                            callback(true);\n                        }\n                    }\n                };\n                runner = this.tryStrategy(strategies[current], minPriority, {\n                    timeout: timeout,\n                    failFast: this.failFast\n                }, tryNextStrategy);\n                return {\n                    abort: function() {\n                        runner.abort();\n                    },\n                    forceMinPriority: function(p) {\n                        minPriority = p;\n                        if (runner) {\n                            runner.forceMinPriority(p);\n                        }\n                    }\n                };\n            }\n            tryStrategy(strategy, minPriority, options, callback) {\n                var timer = null;\n                var runner = null;\n                if (options.timeout > 0) {\n                    timer = new timers_OneOffTimer(options.timeout, function() {\n                        runner.abort();\n                        callback(true);\n                    });\n                }\n                runner = strategy.connect(minPriority, function(error, handshake) {\n                    if (error && timer && timer.isRunning() && !options.failFast) {\n                        return;\n                    }\n                    if (timer) {\n                        timer.ensureAborted();\n                    }\n                    callback(error, handshake);\n                });\n                return {\n                    abort: function() {\n                        if (timer) {\n                            timer.ensureAborted();\n                        }\n                        runner.abort();\n                    },\n                    forceMinPriority: function(p) {\n                        runner.forceMinPriority(p);\n                    }\n                };\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/best_connected_ever_strategy.ts\n        class best_connected_ever_strategy_BestConnectedEverStrategy {\n            constructor(strategies){\n                this.strategies = strategies;\n            }\n            isSupported() {\n                return any(this.strategies, util.method(\"isSupported\"));\n            }\n            connect(minPriority, callback) {\n                return connect(this.strategies, minPriority, function(i, runners) {\n                    return function(error, handshake) {\n                        runners[i].error = error;\n                        if (error) {\n                            if (allRunnersFailed(runners)) {\n                                callback(true);\n                            }\n                            return;\n                        }\n                        apply(runners, function(runner) {\n                            runner.forceMinPriority(handshake.transport.priority);\n                        });\n                        callback(null, handshake);\n                    };\n                });\n            }\n        }\n        function connect(strategies, minPriority, callbackBuilder) {\n            var runners = map(strategies, function(strategy, i, _, rs) {\n                return strategy.connect(minPriority, callbackBuilder(i, rs));\n            });\n            return {\n                abort: function() {\n                    apply(runners, abortRunner);\n                },\n                forceMinPriority: function(p) {\n                    apply(runners, function(runner) {\n                        runner.forceMinPriority(p);\n                    });\n                }\n            };\n        }\n        function allRunnersFailed(runners) {\n            return collections_all(runners, function(runner) {\n                return Boolean(runner.error);\n            });\n        }\n        function abortRunner(runner) {\n            if (!runner.error && !runner.aborted) {\n                runner.abort();\n                runner.aborted = true;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/websocket_prioritized_cached_strategy.ts\n        class websocket_prioritized_cached_strategy_WebSocketPrioritizedCachedStrategy {\n            constructor(strategy, transports, options){\n                this.strategy = strategy;\n                this.transports = transports;\n                this.ttl = options.ttl || 1800 * 1000;\n                this.usingTLS = options.useTLS;\n                this.timeline = options.timeline;\n            }\n            isSupported() {\n                return this.strategy.isSupported();\n            }\n            connect(minPriority, callback) {\n                var usingTLS = this.usingTLS;\n                var info = fetchTransportCache(usingTLS);\n                var cacheSkipCount = info && info.cacheSkipCount ? info.cacheSkipCount : 0;\n                var strategies = [\n                    this.strategy\n                ];\n                if (info && info.timestamp + this.ttl >= util.now()) {\n                    var transport = this.transports[info.transport];\n                    if (transport) {\n                        if ([\n                            \"ws\",\n                            \"wss\"\n                        ].includes(info.transport) || cacheSkipCount > 3) {\n                            this.timeline.info({\n                                cached: true,\n                                transport: info.transport,\n                                latency: info.latency\n                            });\n                            strategies.push(new sequential_strategy_SequentialStrategy([\n                                transport\n                            ], {\n                                timeout: info.latency * 2 + 1000,\n                                failFast: true\n                            }));\n                        } else {\n                            cacheSkipCount++;\n                        }\n                    }\n                }\n                var startTimestamp = util.now();\n                var runner = strategies.pop().connect(minPriority, function cb(error, handshake) {\n                    if (error) {\n                        flushTransportCache(usingTLS);\n                        if (strategies.length > 0) {\n                            startTimestamp = util.now();\n                            runner = strategies.pop().connect(minPriority, cb);\n                        } else {\n                            callback(error);\n                        }\n                    } else {\n                        storeTransportCache(usingTLS, handshake.transport.name, util.now() - startTimestamp, cacheSkipCount);\n                        callback(null, handshake);\n                    }\n                });\n                return {\n                    abort: function() {\n                        runner.abort();\n                    },\n                    forceMinPriority: function(p) {\n                        minPriority = p;\n                        if (runner) {\n                            runner.forceMinPriority(p);\n                        }\n                    }\n                };\n            }\n        }\n        function getTransportCacheKey(usingTLS) {\n            return \"pusherTransport\" + (usingTLS ? \"TLS\" : \"NonTLS\");\n        }\n        function fetchTransportCache(usingTLS) {\n            var storage = node_runtime.getLocalStorage();\n            if (storage) {\n                try {\n                    var serializedCache = storage[getTransportCacheKey(usingTLS)];\n                    if (serializedCache) {\n                        return JSON.parse(serializedCache);\n                    }\n                } catch (e) {\n                    flushTransportCache(usingTLS);\n                }\n            }\n            return null;\n        }\n        function storeTransportCache(usingTLS, transport, latency, cacheSkipCount) {\n            var storage = node_runtime.getLocalStorage();\n            if (storage) {\n                try {\n                    storage[getTransportCacheKey(usingTLS)] = safeJSONStringify({\n                        timestamp: util.now(),\n                        transport: transport,\n                        latency: latency,\n                        cacheSkipCount: cacheSkipCount\n                    });\n                } catch (e) {}\n            }\n        }\n        function flushTransportCache(usingTLS) {\n            var storage = node_runtime.getLocalStorage();\n            if (storage) {\n                try {\n                    delete storage[getTransportCacheKey(usingTLS)];\n                } catch (e) {}\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/delayed_strategy.ts\n        class delayed_strategy_DelayedStrategy {\n            constructor(strategy, { delay: number }){\n                this.strategy = strategy;\n                this.options = {\n                    delay: number\n                };\n            }\n            isSupported() {\n                return this.strategy.isSupported();\n            }\n            connect(minPriority, callback) {\n                var strategy = this.strategy;\n                var runner;\n                var timer = new timers_OneOffTimer(this.options.delay, function() {\n                    runner = strategy.connect(minPriority, callback);\n                });\n                return {\n                    abort: function() {\n                        timer.ensureAborted();\n                        if (runner) {\n                            runner.abort();\n                        }\n                    },\n                    forceMinPriority: function(p) {\n                        minPriority = p;\n                        if (runner) {\n                            runner.forceMinPriority(p);\n                        }\n                    }\n                };\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/if_strategy.ts\n        class IfStrategy {\n            constructor(test, trueBranch, falseBranch){\n                this.test = test;\n                this.trueBranch = trueBranch;\n                this.falseBranch = falseBranch;\n            }\n            isSupported() {\n                var branch = this.test() ? this.trueBranch : this.falseBranch;\n                return branch.isSupported();\n            }\n            connect(minPriority, callback) {\n                var branch = this.test() ? this.trueBranch : this.falseBranch;\n                return branch.connect(minPriority, callback);\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/first_connected_strategy.ts\n        class FirstConnectedStrategy {\n            constructor(strategy){\n                this.strategy = strategy;\n            }\n            isSupported() {\n                return this.strategy.isSupported();\n            }\n            connect(minPriority, callback) {\n                var runner = this.strategy.connect(minPriority, function(error, handshake) {\n                    if (handshake) {\n                        runner.abort();\n                    }\n                    callback(error, handshake);\n                });\n                return runner;\n            }\n        }\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/default_strategy.ts\n        function testSupportsStrategy(strategy) {\n            return function() {\n                return strategy.isSupported();\n            };\n        }\n        var getDefaultStrategy = function(config, baseOptions, defineTransport) {\n            var definedTransports = {};\n            function defineTransportStrategy(name, type, priority, options, manager) {\n                var transport = defineTransport(config, name, type, priority, options, manager);\n                definedTransports[name] = transport;\n                return transport;\n            }\n            var ws_options = Object.assign({}, baseOptions, {\n                hostNonTLS: config.wsHost + \":\" + config.wsPort,\n                hostTLS: config.wsHost + \":\" + config.wssPort,\n                httpPath: config.wsPath\n            });\n            var wss_options = extend({}, ws_options, {\n                useTLS: true\n            });\n            var http_options = Object.assign({}, baseOptions, {\n                hostNonTLS: config.httpHost + \":\" + config.httpPort,\n                hostTLS: config.httpHost + \":\" + config.httpsPort,\n                httpPath: config.httpPath\n            });\n            var timeouts = {\n                loop: true,\n                timeout: 15000,\n                timeoutLimit: 60000\n            };\n            var ws_manager = new transport_manager_TransportManager({\n                minPingDelay: 10000,\n                maxPingDelay: config.activityTimeout\n            });\n            var streaming_manager = new transport_manager_TransportManager({\n                lives: 2,\n                minPingDelay: 10000,\n                maxPingDelay: config.activityTimeout\n            });\n            var ws_transport = defineTransportStrategy(\"ws\", \"ws\", 3, ws_options, ws_manager);\n            var wss_transport = defineTransportStrategy(\"wss\", \"ws\", 3, wss_options, ws_manager);\n            var xhr_streaming_transport = defineTransportStrategy(\"xhr_streaming\", \"xhr_streaming\", 1, http_options, streaming_manager);\n            var xhr_polling_transport = defineTransportStrategy(\"xhr_polling\", \"xhr_polling\", 1, http_options);\n            var ws_loop = new sequential_strategy_SequentialStrategy([\n                ws_transport\n            ], timeouts);\n            var wss_loop = new sequential_strategy_SequentialStrategy([\n                wss_transport\n            ], timeouts);\n            var streaming_loop = new sequential_strategy_SequentialStrategy([\n                xhr_streaming_transport\n            ], timeouts);\n            var polling_loop = new sequential_strategy_SequentialStrategy([\n                xhr_polling_transport\n            ], timeouts);\n            var http_loop = new sequential_strategy_SequentialStrategy([\n                new IfStrategy(testSupportsStrategy(streaming_loop), new best_connected_ever_strategy_BestConnectedEverStrategy([\n                    streaming_loop,\n                    new delayed_strategy_DelayedStrategy(polling_loop, {\n                        delay: 4000\n                    })\n                ]), polling_loop)\n            ], timeouts);\n            var wsStrategy;\n            if (baseOptions.useTLS) {\n                wsStrategy = new best_connected_ever_strategy_BestConnectedEverStrategy([\n                    ws_loop,\n                    new delayed_strategy_DelayedStrategy(http_loop, {\n                        delay: 2000\n                    })\n                ]);\n            } else {\n                wsStrategy = new best_connected_ever_strategy_BestConnectedEverStrategy([\n                    ws_loop,\n                    new delayed_strategy_DelayedStrategy(wss_loop, {\n                        delay: 2000\n                    }),\n                    new delayed_strategy_DelayedStrategy(http_loop, {\n                        delay: 5000\n                    })\n                ]);\n            }\n            return new websocket_prioritized_cached_strategy_WebSocketPrioritizedCachedStrategy(new FirstConnectedStrategy(new IfStrategy(testSupportsStrategy(ws_transport), wsStrategy, http_loop)), definedTransports, {\n                ttl: 1800000,\n                timeline: baseOptions.timeline,\n                useTLS: baseOptions.useTLS\n            });\n        };\n        /* harmony default export */ var default_strategy = getDefaultStrategy;\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/transports/transport_connection_initializer.ts\n        /* harmony default export */ var transport_connection_initializer = function() {\n            var self1 = this;\n            self1.timeline.info(self1.buildTimelineMessage({\n                transport: self1.name + (self1.options.useTLS ? \"s\" : \"\")\n            }));\n            if (self1.hooks.isInitialized()) {\n                self1.changeState(\"initialized\");\n            } else {\n                self1.onClose();\n            }\n        };\n        // CONCATENATED MODULE: ./src/core/http/http_request.ts\n        const MAX_BUFFER_LENGTH = 256 * 1024;\n        class http_request_HTTPRequest extends dispatcher_Dispatcher {\n            constructor(hooks, method, url){\n                super();\n                this.hooks = hooks;\n                this.method = method;\n                this.url = url;\n            }\n            start(payload) {\n                this.position = 0;\n                this.xhr = this.hooks.getRequest(this);\n                this.unloader = ()=>{\n                    this.close();\n                };\n                node_runtime.addUnloadListener(this.unloader);\n                this.xhr.open(this.method, this.url, true);\n                if (this.xhr.setRequestHeader) {\n                    this.xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n                }\n                this.xhr.send(payload);\n            }\n            close() {\n                if (this.unloader) {\n                    node_runtime.removeUnloadListener(this.unloader);\n                    this.unloader = null;\n                }\n                if (this.xhr) {\n                    this.hooks.abortRequest(this.xhr);\n                    this.xhr = null;\n                }\n            }\n            onChunk(status, data) {\n                while(true){\n                    var chunk = this.advanceBuffer(data);\n                    if (chunk) {\n                        this.emit(\"chunk\", {\n                            status: status,\n                            data: chunk\n                        });\n                    } else {\n                        break;\n                    }\n                }\n                if (this.isBufferTooLong(data)) {\n                    this.emit(\"buffer_too_long\");\n                }\n            }\n            advanceBuffer(buffer) {\n                var unreadData = buffer.slice(this.position);\n                var endOfLinePosition = unreadData.indexOf(\"\\n\");\n                if (endOfLinePosition !== -1) {\n                    this.position += endOfLinePosition + 1;\n                    return unreadData.slice(0, endOfLinePosition);\n                } else {\n                    return null;\n                }\n            }\n            isBufferTooLong(buffer) {\n                return this.position === buffer.length && buffer.length > MAX_BUFFER_LENGTH;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/http/state.ts\n        var State;\n        (function(State) {\n            State[State[\"CONNECTING\"] = 0] = \"CONNECTING\";\n            State[State[\"OPEN\"] = 1] = \"OPEN\";\n            State[State[\"CLOSED\"] = 3] = \"CLOSED\";\n        })(State || (State = {}));\n        /* harmony default export */ var state = State;\n        // CONCATENATED MODULE: ./src/core/http/http_socket.ts\n        var autoIncrement = 1;\n        class http_socket_HTTPSocket {\n            constructor(hooks, url){\n                this.hooks = hooks;\n                this.session = randomNumber(1000) + \"/\" + randomString(8);\n                this.location = getLocation(url);\n                this.readyState = state.CONNECTING;\n                this.openStream();\n            }\n            send(payload) {\n                return this.sendRaw(JSON.stringify([\n                    payload\n                ]));\n            }\n            ping() {\n                this.hooks.sendHeartbeat(this);\n            }\n            close(code, reason) {\n                this.onClose(code, reason, true);\n            }\n            sendRaw(payload) {\n                if (this.readyState === state.OPEN) {\n                    try {\n                        node_runtime.createSocketRequest(\"POST\", getUniqueURL(getSendURL(this.location, this.session))).start(payload);\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            reconnect() {\n                this.closeStream();\n                this.openStream();\n            }\n            onClose(code, reason, wasClean) {\n                this.closeStream();\n                this.readyState = state.CLOSED;\n                if (this.onclose) {\n                    this.onclose({\n                        code: code,\n                        reason: reason,\n                        wasClean: wasClean\n                    });\n                }\n            }\n            onChunk(chunk) {\n                if (chunk.status !== 200) {\n                    return;\n                }\n                if (this.readyState === state.OPEN) {\n                    this.onActivity();\n                }\n                var payload;\n                var type = chunk.data.slice(0, 1);\n                switch(type){\n                    case \"o\":\n                        payload = JSON.parse(chunk.data.slice(1) || \"{}\");\n                        this.onOpen(payload);\n                        break;\n                    case \"a\":\n                        payload = JSON.parse(chunk.data.slice(1) || \"[]\");\n                        for(var i = 0; i < payload.length; i++){\n                            this.onEvent(payload[i]);\n                        }\n                        break;\n                    case \"m\":\n                        payload = JSON.parse(chunk.data.slice(1) || \"null\");\n                        this.onEvent(payload);\n                        break;\n                    case \"h\":\n                        this.hooks.onHeartbeat(this);\n                        break;\n                    case \"c\":\n                        payload = JSON.parse(chunk.data.slice(1) || \"[]\");\n                        this.onClose(payload[0], payload[1], true);\n                        break;\n                }\n            }\n            onOpen(options) {\n                if (this.readyState === state.CONNECTING) {\n                    if (options && options.hostname) {\n                        this.location.base = replaceHost(this.location.base, options.hostname);\n                    }\n                    this.readyState = state.OPEN;\n                    if (this.onopen) {\n                        this.onopen();\n                    }\n                } else {\n                    this.onClose(1006, \"Server lost session\", true);\n                }\n            }\n            onEvent(event) {\n                if (this.readyState === state.OPEN && this.onmessage) {\n                    this.onmessage({\n                        data: event\n                    });\n                }\n            }\n            onActivity() {\n                if (this.onactivity) {\n                    this.onactivity();\n                }\n            }\n            onError(error) {\n                if (this.onerror) {\n                    this.onerror(error);\n                }\n            }\n            openStream() {\n                this.stream = node_runtime.createSocketRequest(\"POST\", getUniqueURL(this.hooks.getReceiveURL(this.location, this.session)));\n                this.stream.bind(\"chunk\", (chunk)=>{\n                    this.onChunk(chunk);\n                });\n                this.stream.bind(\"finished\", (status)=>{\n                    this.hooks.onFinished(this, status);\n                });\n                this.stream.bind(\"buffer_too_long\", ()=>{\n                    this.reconnect();\n                });\n                try {\n                    this.stream.start();\n                } catch (error) {\n                    util.defer(()=>{\n                        this.onError(error);\n                        this.onClose(1006, \"Could not start streaming\", false);\n                    });\n                }\n            }\n            closeStream() {\n                if (this.stream) {\n                    this.stream.unbind_all();\n                    this.stream.close();\n                    this.stream = null;\n                }\n            }\n        }\n        function getLocation(url) {\n            var parts = /([^\\?]*)\\/*(\\??.*)/.exec(url);\n            return {\n                base: parts[1],\n                queryString: parts[2]\n            };\n        }\n        function getSendURL(url, session) {\n            return url.base + \"/\" + session + \"/xhr_send\";\n        }\n        function getUniqueURL(url) {\n            var separator = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n            return url + separator + \"t=\" + +new Date() + \"&n=\" + autoIncrement++;\n        }\n        function replaceHost(url, hostname) {\n            var urlParts = /(https?:\\/\\/)([^\\/:]+)((\\/|:)?.*)/.exec(url);\n            return urlParts[1] + hostname + urlParts[3];\n        }\n        function randomNumber(max) {\n            return node_runtime.randomInt(max);\n        }\n        function randomString(length) {\n            var result = [];\n            for(var i = 0; i < length; i++){\n                result.push(randomNumber(32).toString(32));\n            }\n            return result.join(\"\");\n        }\n        /* harmony default export */ var http_socket = http_socket_HTTPSocket;\n        // CONCATENATED MODULE: ./src/core/http/http_streaming_socket.ts\n        var http_streaming_socket_hooks = {\n            getReceiveURL: function(url, session) {\n                return url.base + \"/\" + session + \"/xhr_streaming\" + url.queryString;\n            },\n            onHeartbeat: function(socket) {\n                socket.sendRaw(\"[]\");\n            },\n            sendHeartbeat: function(socket) {\n                socket.sendRaw(\"[]\");\n            },\n            onFinished: function(socket, status) {\n                socket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n            }\n        };\n        /* harmony default export */ var http_streaming_socket = http_streaming_socket_hooks;\n        // CONCATENATED MODULE: ./src/core/http/http_polling_socket.ts\n        var http_polling_socket_hooks = {\n            getReceiveURL: function(url, session) {\n                return url.base + \"/\" + session + \"/xhr\" + url.queryString;\n            },\n            onHeartbeat: function() {},\n            sendHeartbeat: function(socket) {\n                socket.sendRaw(\"[]\");\n            },\n            onFinished: function(socket, status) {\n                if (status === 200) {\n                    socket.reconnect();\n                } else {\n                    socket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n                }\n            }\n        };\n        /* harmony default export */ var http_polling_socket = http_polling_socket_hooks;\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http_xhr_request.ts\n        var http_xhr_request_hooks = {\n            getRequest: function(socket) {\n                var Constructor = node_runtime.getXHRAPI();\n                var xhr = new Constructor();\n                xhr.onreadystatechange = xhr.onprogress = function() {\n                    switch(xhr.readyState){\n                        case 3:\n                            if (xhr.responseText && xhr.responseText.length > 0) {\n                                socket.onChunk(xhr.status, xhr.responseText);\n                            }\n                            break;\n                        case 4:\n                            if (xhr.responseText && xhr.responseText.length > 0) {\n                                socket.onChunk(xhr.status, xhr.responseText);\n                            }\n                            socket.emit(\"finished\", xhr.status);\n                            socket.close();\n                            break;\n                    }\n                };\n                return xhr;\n            },\n            abortRequest: function(xhr) {\n                xhr.onreadystatechange = null;\n                xhr.abort();\n            }\n        };\n        /* harmony default export */ var http_xhr_request = http_xhr_request_hooks;\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http.ts\n        var HTTP = {\n            createStreamingSocket (url) {\n                return this.createSocket(http_streaming_socket, url);\n            },\n            createPollingSocket (url) {\n                return this.createSocket(http_polling_socket, url);\n            },\n            createSocket (hooks, url) {\n                return new http_socket(hooks, url);\n            },\n            createXHR (method, url) {\n                return this.createRequest(http_xhr_request, method, url);\n            },\n            createRequest (hooks, method, url) {\n                return new http_request_HTTPRequest(hooks, method, url);\n            }\n        };\n        /* harmony default export */ var http_http = HTTP;\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/runtime.ts\n        var Isomorphic = {\n            getDefaultStrategy: default_strategy,\n            Transports: transports,\n            transportConnectionInitializer: transport_connection_initializer,\n            HTTPFactory: http_http,\n            setup (PusherClass) {\n                PusherClass.ready();\n            },\n            getLocalStorage () {\n                return undefined;\n            },\n            getClientFeatures () {\n                return keys(filterObject({\n                    ws: transports.ws\n                }, function(t) {\n                    return t.isSupported({});\n                }));\n            },\n            getProtocol () {\n                return \"http:\";\n            },\n            isXHRSupported () {\n                return true;\n            },\n            createSocketRequest (method, url) {\n                if (this.isXHRSupported()) {\n                    return this.HTTPFactory.createXHR(method, url);\n                } else {\n                    throw \"Cross-origin HTTP requests are not supported\";\n                }\n            },\n            createXHR () {\n                var Constructor = this.getXHRAPI();\n                return new Constructor();\n            },\n            createWebSocket (url) {\n                var Constructor = this.getWebSocketAPI();\n                return new Constructor(url);\n            },\n            addUnloadListener (listener) {},\n            removeUnloadListener (listener) {}\n        };\n        /* harmony default export */ var runtime = Isomorphic;\n        // EXTERNAL MODULE: ./node_modules/faye-websocket/lib/faye/websocket.js\n        var websocket = __nested_webpack_require_266482__(18);\n        // EXTERNAL MODULE: ./node_modules/xmlhttprequest/lib/XMLHttpRequest.js\n        var XMLHttpRequest = __nested_webpack_require_266482__(19);\n        // CONCATENATED MODULE: ./src/runtimes/node/net_info.ts\n        class net_info_NetInfo extends dispatcher_Dispatcher {\n            isOnline() {\n                return true;\n            }\n        }\n        var net_info_Network = new net_info_NetInfo();\n        // CONCATENATED MODULE: ./src/core/auth/options.ts\n        var AuthRequestType;\n        (function(AuthRequestType) {\n            AuthRequestType[\"UserAuthentication\"] = \"user-authentication\";\n            AuthRequestType[\"ChannelAuthorization\"] = \"channel-authorization\";\n        })(AuthRequestType || (AuthRequestType = {}));\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/auth/xhr_auth.ts\n        const ajax = function(context, query, authOptions, authRequestType, callback) {\n            const xhr = node_runtime.createXHR();\n            xhr.open(\"POST\", authOptions.endpoint, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            for(var headerName in authOptions.headers){\n                xhr.setRequestHeader(headerName, authOptions.headers[headerName]);\n            }\n            if (authOptions.headersProvider != null) {\n                let dynamicHeaders = authOptions.headersProvider();\n                for(var headerName in dynamicHeaders){\n                    xhr.setRequestHeader(headerName, dynamicHeaders[headerName]);\n                }\n            }\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        let data;\n                        let parsed = false;\n                        try {\n                            data = JSON.parse(xhr.responseText);\n                            parsed = true;\n                        } catch (e) {\n                            callback(new HTTPAuthError(200, `JSON returned from ${authRequestType.toString()} endpoint was invalid, yet status code was 200. Data was: ${xhr.responseText}`), null);\n                        }\n                        if (parsed) {\n                            callback(null, data);\n                        }\n                    } else {\n                        let suffix = \"\";\n                        switch(authRequestType){\n                            case AuthRequestType.UserAuthentication:\n                                suffix = url_store.buildLogSuffix(\"authenticationEndpoint\");\n                                break;\n                            case AuthRequestType.ChannelAuthorization:\n                                suffix = `Clients must be authorized to join private or presence channels. ${url_store.buildLogSuffix(\"authorizationEndpoint\")}`;\n                                break;\n                        }\n                        callback(new HTTPAuthError(xhr.status, `Unable to retrieve auth string from ${authRequestType.toString()} endpoint - ` + `received status: ${xhr.status} from ${authOptions.endpoint}. ${suffix}`), null);\n                    }\n                }\n            };\n            xhr.send(query);\n            return xhr;\n        };\n        /* harmony default export */ var xhr_auth = ajax;\n        // CONCATENATED MODULE: ./src/runtimes/isomorphic/timeline/xhr_timeline.ts\n        var getAgent = function(sender, useTLS) {\n            return function(data, callback) {\n                var scheme = \"http\" + (useTLS ? \"s\" : \"\") + \"://\";\n                var url = scheme + (sender.host || sender.options.host) + sender.options.path;\n                var query = buildQueryString(data);\n                url += \"/\" + 2 + \"?\" + query;\n                var xhr = node_runtime.createXHR();\n                xhr.open(\"GET\", url, true);\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        let { status, responseText } = xhr;\n                        if (status !== 200) {\n                            logger.debug(`TimelineSender Error: received ${status} from stats.pusher.com`);\n                            return;\n                        }\n                        try {\n                            var { host } = JSON.parse(responseText);\n                        } catch (e) {\n                            logger.debug(`TimelineSenderError: invalid response ${responseText}`);\n                        }\n                        if (host) {\n                            sender.host = host;\n                        }\n                    }\n                };\n                xhr.send();\n            };\n        };\n        var xhr_timeline_xhr = {\n            name: \"xhr\",\n            getAgent\n        };\n        /* harmony default export */ var xhr_timeline = xhr_timeline_xhr;\n        // EXTERNAL MODULE: external \"crypto\"\n        var external_crypto_ = __nested_webpack_require_266482__(3);\n        // CONCATENATED MODULE: ./src/runtimes/node/runtime.ts\n        const { getDefaultStrategy: runtime_getDefaultStrategy, Transports: runtime_Transports, setup, getProtocol, isXHRSupported, getLocalStorage, createXHR, createWebSocket, addUnloadListener, removeUnloadListener, transportConnectionInitializer, createSocketRequest, HTTPFactory } = runtime;\n        const NodeJS = {\n            getDefaultStrategy: runtime_getDefaultStrategy,\n            Transports: runtime_Transports,\n            setup,\n            getProtocol,\n            isXHRSupported,\n            createSocketRequest,\n            getLocalStorage,\n            createXHR,\n            createWebSocket,\n            addUnloadListener,\n            removeUnloadListener,\n            transportConnectionInitializer,\n            HTTPFactory,\n            TimelineTransport: xhr_timeline,\n            getAuthorizers () {\n                return {\n                    ajax: xhr_auth\n                };\n            },\n            getWebSocketAPI () {\n                return websocket[\"Client\"];\n            },\n            getXHRAPI () {\n                return XMLHttpRequest[\"XMLHttpRequest\"];\n            },\n            getNetwork () {\n                return net_info_Network;\n            },\n            randomInt (max) {\n                return Object(external_crypto_[\"randomInt\"])(max);\n            }\n        };\n        /* harmony default export */ var node_runtime = NodeJS;\n        // CONCATENATED MODULE: ./src/core/timeline/level.ts\n        var TimelineLevel;\n        (function(TimelineLevel) {\n            TimelineLevel[TimelineLevel[\"ERROR\"] = 3] = \"ERROR\";\n            TimelineLevel[TimelineLevel[\"INFO\"] = 6] = \"INFO\";\n            TimelineLevel[TimelineLevel[\"DEBUG\"] = 7] = \"DEBUG\";\n        })(TimelineLevel || (TimelineLevel = {}));\n        /* harmony default export */ var timeline_level = TimelineLevel;\n        // CONCATENATED MODULE: ./src/core/timeline/timeline.ts\n        class timeline_Timeline {\n            constructor(key, session, options){\n                this.key = key;\n                this.session = session;\n                this.events = [];\n                this.options = options || {};\n                this.sent = 0;\n                this.uniqueID = 0;\n            }\n            log(level, event) {\n                if (level <= this.options.level) {\n                    this.events.push(extend({}, event, {\n                        timestamp: util.now()\n                    }));\n                    if (this.options.limit && this.events.length > this.options.limit) {\n                        this.events.shift();\n                    }\n                }\n            }\n            error(event) {\n                this.log(timeline_level.ERROR, event);\n            }\n            info(event) {\n                this.log(timeline_level.INFO, event);\n            }\n            debug(event) {\n                this.log(timeline_level.DEBUG, event);\n            }\n            isEmpty() {\n                return this.events.length === 0;\n            }\n            send(sendfn, callback) {\n                var data = extend({\n                    session: this.session,\n                    bundle: this.sent + 1,\n                    key: this.key,\n                    lib: \"js\",\n                    version: this.options.version,\n                    cluster: this.options.cluster,\n                    features: this.options.features,\n                    timeline: this.events\n                }, this.options.params);\n                this.events = [];\n                sendfn(data, (error, result)=>{\n                    if (!error) {\n                        this.sent++;\n                    }\n                    if (callback) {\n                        callback(error, result);\n                    }\n                });\n                return true;\n            }\n            generateUniqueID() {\n                this.uniqueID++;\n                return this.uniqueID;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/transport_strategy.ts\n        class transport_strategy_TransportStrategy {\n            constructor(name, priority, transport, options){\n                this.name = name;\n                this.priority = priority;\n                this.transport = transport;\n                this.options = options || {};\n            }\n            isSupported() {\n                return this.transport.isSupported({\n                    useTLS: this.options.useTLS\n                });\n            }\n            connect(minPriority, callback) {\n                if (!this.isSupported()) {\n                    return failAttempt(new UnsupportedStrategy(), callback);\n                } else if (this.priority < minPriority) {\n                    return failAttempt(new TransportPriorityTooLow(), callback);\n                }\n                var connected = false;\n                var transport = this.transport.createConnection(this.name, this.priority, this.options.key, this.options);\n                var handshake = null;\n                var onInitialized = function() {\n                    transport.unbind(\"initialized\", onInitialized);\n                    transport.connect();\n                };\n                var onOpen = function() {\n                    handshake = factory.createHandshake(transport, function(result) {\n                        connected = true;\n                        unbindListeners();\n                        callback(null, result);\n                    });\n                };\n                var onError = function(error) {\n                    unbindListeners();\n                    callback(error);\n                };\n                var onClosed = function() {\n                    unbindListeners();\n                    var serializedTransport;\n                    serializedTransport = safeJSONStringify(transport);\n                    callback(new TransportClosed(serializedTransport));\n                };\n                var unbindListeners = function() {\n                    transport.unbind(\"initialized\", onInitialized);\n                    transport.unbind(\"open\", onOpen);\n                    transport.unbind(\"error\", onError);\n                    transport.unbind(\"closed\", onClosed);\n                };\n                transport.bind(\"initialized\", onInitialized);\n                transport.bind(\"open\", onOpen);\n                transport.bind(\"error\", onError);\n                transport.bind(\"closed\", onClosed);\n                transport.initialize();\n                return {\n                    abort: ()=>{\n                        if (connected) {\n                            return;\n                        }\n                        unbindListeners();\n                        if (handshake) {\n                            handshake.close();\n                        } else {\n                            transport.close();\n                        }\n                    },\n                    forceMinPriority: (p)=>{\n                        if (connected) {\n                            return;\n                        }\n                        if (this.priority < p) {\n                            if (handshake) {\n                                handshake.close();\n                            } else {\n                                transport.close();\n                            }\n                        }\n                    }\n                };\n            }\n        }\n        function failAttempt(error, callback) {\n            util.defer(function() {\n                callback(error);\n            });\n            return {\n                abort: function() {},\n                forceMinPriority: function() {}\n            };\n        }\n        // CONCATENATED MODULE: ./src/core/strategies/strategy_builder.ts\n        const { Transports: strategy_builder_Transports } = node_runtime;\n        var strategy_builder_defineTransport = function(config, name, type, priority, options, manager) {\n            var transportClass = strategy_builder_Transports[type];\n            if (!transportClass) {\n                throw new UnsupportedTransport(type);\n            }\n            var enabled = (!config.enabledTransports || arrayIndexOf(config.enabledTransports, name) !== -1) && (!config.disabledTransports || arrayIndexOf(config.disabledTransports, name) === -1);\n            var transport;\n            if (enabled) {\n                options = Object.assign({\n                    ignoreNullOrigin: config.ignoreNullOrigin\n                }, options);\n                transport = new transport_strategy_TransportStrategy(name, priority, manager ? manager.getAssistant(transportClass) : transportClass, options);\n            } else {\n                transport = strategy_builder_UnsupportedStrategy;\n            }\n            return transport;\n        };\n        var strategy_builder_UnsupportedStrategy = {\n            isSupported: function() {\n                return false;\n            },\n            connect: function(_, callback) {\n                var deferred = util.defer(function() {\n                    callback(new UnsupportedStrategy());\n                });\n                return {\n                    abort: function() {\n                        deferred.ensureAborted();\n                    },\n                    forceMinPriority: function() {}\n                };\n            }\n        };\n        // CONCATENATED MODULE: ./src/core/options.ts\n        function validateOptions(options) {\n            if (options == null) {\n                throw \"You must pass an options object\";\n            }\n            if (options.cluster == null) {\n                throw \"Options object must provide a cluster\";\n            }\n            if (\"disableStats\" in options) {\n                logger.warn(\"The disableStats option is deprecated in favor of enableStats\");\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/auth/user_authenticator.ts\n        const composeChannelQuery = (params, authOptions)=>{\n            var query = \"socket_id=\" + encodeURIComponent(params.socketId);\n            for(var key in authOptions.params){\n                query += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(authOptions.params[key]);\n            }\n            if (authOptions.paramsProvider != null) {\n                let dynamicParams = authOptions.paramsProvider();\n                for(var key in dynamicParams){\n                    query += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dynamicParams[key]);\n                }\n            }\n            return query;\n        };\n        const UserAuthenticator = (authOptions)=>{\n            if (typeof node_runtime.getAuthorizers()[authOptions.transport] === \"undefined\") {\n                throw `'${authOptions.transport}' is not a recognized auth transport`;\n            }\n            return (params, callback)=>{\n                const query = composeChannelQuery(params, authOptions);\n                node_runtime.getAuthorizers()[authOptions.transport](node_runtime, query, authOptions, AuthRequestType.UserAuthentication, callback);\n            };\n        };\n        /* harmony default export */ var user_authenticator = UserAuthenticator;\n        // CONCATENATED MODULE: ./src/core/auth/channel_authorizer.ts\n        const channel_authorizer_composeChannelQuery = (params, authOptions)=>{\n            var query = \"socket_id=\" + encodeURIComponent(params.socketId);\n            query += \"&channel_name=\" + encodeURIComponent(params.channelName);\n            for(var key in authOptions.params){\n                query += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(authOptions.params[key]);\n            }\n            if (authOptions.paramsProvider != null) {\n                let dynamicParams = authOptions.paramsProvider();\n                for(var key in dynamicParams){\n                    query += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dynamicParams[key]);\n                }\n            }\n            return query;\n        };\n        const ChannelAuthorizer = (authOptions)=>{\n            if (typeof node_runtime.getAuthorizers()[authOptions.transport] === \"undefined\") {\n                throw `'${authOptions.transport}' is not a recognized auth transport`;\n            }\n            return (params, callback)=>{\n                const query = channel_authorizer_composeChannelQuery(params, authOptions);\n                node_runtime.getAuthorizers()[authOptions.transport](node_runtime, query, authOptions, AuthRequestType.ChannelAuthorization, callback);\n            };\n        };\n        /* harmony default export */ var channel_authorizer = ChannelAuthorizer;\n        // CONCATENATED MODULE: ./src/core/auth/deprecated_channel_authorizer.ts\n        const ChannelAuthorizerProxy = (pusher, authOptions, channelAuthorizerGenerator)=>{\n            const deprecatedAuthorizerOptions = {\n                authTransport: authOptions.transport,\n                authEndpoint: authOptions.endpoint,\n                auth: {\n                    params: authOptions.params,\n                    headers: authOptions.headers\n                }\n            };\n            return (params, callback)=>{\n                const channel = pusher.channel(params.channelName);\n                const channelAuthorizer = channelAuthorizerGenerator(channel, deprecatedAuthorizerOptions);\n                channelAuthorizer.authorize(params.socketId, callback);\n            };\n        };\n        // CONCATENATED MODULE: ./src/core/config.ts\n        function getConfig(opts, pusher) {\n            let config = {\n                activityTimeout: opts.activityTimeout || defaults.activityTimeout,\n                cluster: opts.cluster,\n                httpPath: opts.httpPath || defaults.httpPath,\n                httpPort: opts.httpPort || defaults.httpPort,\n                httpsPort: opts.httpsPort || defaults.httpsPort,\n                pongTimeout: opts.pongTimeout || defaults.pongTimeout,\n                statsHost: opts.statsHost || defaults.stats_host,\n                unavailableTimeout: opts.unavailableTimeout || defaults.unavailableTimeout,\n                wsPath: opts.wsPath || defaults.wsPath,\n                wsPort: opts.wsPort || defaults.wsPort,\n                wssPort: opts.wssPort || defaults.wssPort,\n                enableStats: getEnableStatsConfig(opts),\n                httpHost: getHttpHost(opts),\n                useTLS: shouldUseTLS(opts),\n                wsHost: getWebsocketHost(opts),\n                userAuthenticator: buildUserAuthenticator(opts),\n                channelAuthorizer: buildChannelAuthorizer(opts, pusher)\n            };\n            if (\"disabledTransports\" in opts) config.disabledTransports = opts.disabledTransports;\n            if (\"enabledTransports\" in opts) config.enabledTransports = opts.enabledTransports;\n            if (\"ignoreNullOrigin\" in opts) config.ignoreNullOrigin = opts.ignoreNullOrigin;\n            if (\"timelineParams\" in opts) config.timelineParams = opts.timelineParams;\n            if (\"nacl\" in opts) {\n                config.nacl = opts.nacl;\n            }\n            return config;\n        }\n        function getHttpHost(opts) {\n            if (opts.httpHost) {\n                return opts.httpHost;\n            }\n            if (opts.cluster) {\n                return `sockjs-${opts.cluster}.pusher.com`;\n            }\n            return defaults.httpHost;\n        }\n        function getWebsocketHost(opts) {\n            if (opts.wsHost) {\n                return opts.wsHost;\n            }\n            return getWebsocketHostFromCluster(opts.cluster);\n        }\n        function getWebsocketHostFromCluster(cluster) {\n            return `ws-${cluster}.pusher.com`;\n        }\n        function shouldUseTLS(opts) {\n            if (node_runtime.getProtocol() === \"https:\") {\n                return true;\n            } else if (opts.forceTLS === false) {\n                return false;\n            }\n            return true;\n        }\n        function getEnableStatsConfig(opts) {\n            if (\"enableStats\" in opts) {\n                return opts.enableStats;\n            }\n            if (\"disableStats\" in opts) {\n                return !opts.disableStats;\n            }\n            return false;\n        }\n        const hasCustomHandler = (auth)=>{\n            return \"customHandler\" in auth && auth[\"customHandler\"] != null;\n        };\n        function buildUserAuthenticator(opts) {\n            const userAuthentication = Object.assign(Object.assign({}, defaults.userAuthentication), opts.userAuthentication);\n            if (hasCustomHandler(userAuthentication)) {\n                return userAuthentication[\"customHandler\"];\n            }\n            return user_authenticator(userAuthentication);\n        }\n        function buildChannelAuth(opts, pusher) {\n            let channelAuthorization;\n            if (\"channelAuthorization\" in opts) {\n                channelAuthorization = Object.assign(Object.assign({}, defaults.channelAuthorization), opts.channelAuthorization);\n            } else {\n                channelAuthorization = {\n                    transport: opts.authTransport || defaults.authTransport,\n                    endpoint: opts.authEndpoint || defaults.authEndpoint\n                };\n                if (\"auth\" in opts) {\n                    if (\"params\" in opts.auth) channelAuthorization.params = opts.auth.params;\n                    if (\"headers\" in opts.auth) channelAuthorization.headers = opts.auth.headers;\n                }\n                if (\"authorizer\" in opts) {\n                    return {\n                        customHandler: ChannelAuthorizerProxy(pusher, channelAuthorization, opts.authorizer)\n                    };\n                }\n            }\n            return channelAuthorization;\n        }\n        function buildChannelAuthorizer(opts, pusher) {\n            const channelAuthorization = buildChannelAuth(opts, pusher);\n            if (hasCustomHandler(channelAuthorization)) {\n                return channelAuthorization[\"customHandler\"];\n            }\n            return channel_authorizer(channelAuthorization);\n        }\n        // CONCATENATED MODULE: ./src/core/watchlist.ts\n        class watchlist_WatchlistFacade extends dispatcher_Dispatcher {\n            constructor(pusher){\n                super(function(eventName, data) {\n                    logger.debug(`No callbacks on watchlist events for ${eventName}`);\n                });\n                this.pusher = pusher;\n                this.bindWatchlistInternalEvent();\n            }\n            handleEvent(pusherEvent) {\n                pusherEvent.data.events.forEach((watchlistEvent)=>{\n                    this.emit(watchlistEvent.name, watchlistEvent);\n                });\n            }\n            bindWatchlistInternalEvent() {\n                this.pusher.connection.bind(\"message\", (pusherEvent)=>{\n                    var eventName = pusherEvent.event;\n                    if (eventName === \"pusher_internal:watchlist_events\") {\n                        this.handleEvent(pusherEvent);\n                    }\n                });\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/utils/flat_promise.ts\n        function flatPromise() {\n            let resolve, reject;\n            const promise = new Promise((res, rej)=>{\n                resolve = res;\n                reject = rej;\n            });\n            return {\n                promise,\n                resolve,\n                reject\n            };\n        }\n        /* harmony default export */ var flat_promise = flatPromise;\n        // CONCATENATED MODULE: ./src/core/user.ts\n        class user_UserFacade extends dispatcher_Dispatcher {\n            constructor(pusher){\n                super(function(eventName, data) {\n                    logger.debug(\"No callbacks on user for \" + eventName);\n                });\n                this.signin_requested = false;\n                this.user_data = null;\n                this.serverToUserChannel = null;\n                this.signinDonePromise = null;\n                this._signinDoneResolve = null;\n                this._onAuthorize = (err, authData)=>{\n                    if (err) {\n                        logger.warn(`Error during signin: ${err}`);\n                        this._cleanup();\n                        return;\n                    }\n                    this.pusher.send_event(\"pusher:signin\", {\n                        auth: authData.auth,\n                        user_data: authData.user_data\n                    });\n                };\n                this.pusher = pusher;\n                this.pusher.connection.bind(\"state_change\", ({ previous, current })=>{\n                    if (previous !== \"connected\" && current === \"connected\") {\n                        this._signin();\n                    }\n                    if (previous === \"connected\" && current !== \"connected\") {\n                        this._cleanup();\n                        this._newSigninPromiseIfNeeded();\n                    }\n                });\n                this.watchlist = new watchlist_WatchlistFacade(pusher);\n                this.pusher.connection.bind(\"message\", (event)=>{\n                    var eventName = event.event;\n                    if (eventName === \"pusher:signin_success\") {\n                        this._onSigninSuccess(event.data);\n                    }\n                    if (this.serverToUserChannel && this.serverToUserChannel.name === event.channel) {\n                        this.serverToUserChannel.handleEvent(event);\n                    }\n                });\n            }\n            signin() {\n                if (this.signin_requested) {\n                    return;\n                }\n                this.signin_requested = true;\n                this._signin();\n            }\n            _signin() {\n                if (!this.signin_requested) {\n                    return;\n                }\n                this._newSigninPromiseIfNeeded();\n                if (this.pusher.connection.state !== \"connected\") {\n                    return;\n                }\n                this.pusher.config.userAuthenticator({\n                    socketId: this.pusher.connection.socket_id\n                }, this._onAuthorize);\n            }\n            _onSigninSuccess(data) {\n                try {\n                    this.user_data = JSON.parse(data.user_data);\n                } catch (e) {\n                    logger.error(`Failed parsing user data after signin: ${data.user_data}`);\n                    this._cleanup();\n                    return;\n                }\n                if (typeof this.user_data.id !== \"string\" || this.user_data.id === \"\") {\n                    logger.error(`user_data doesn't contain an id. user_data: ${this.user_data}`);\n                    this._cleanup();\n                    return;\n                }\n                this._signinDoneResolve();\n                this._subscribeChannels();\n            }\n            _subscribeChannels() {\n                const ensure_subscribed = (channel)=>{\n                    if (channel.subscriptionPending && channel.subscriptionCancelled) {\n                        channel.reinstateSubscription();\n                    } else if (!channel.subscriptionPending && this.pusher.connection.state === \"connected\") {\n                        channel.subscribe();\n                    }\n                };\n                this.serverToUserChannel = new channel_Channel(`#server-to-user-${this.user_data.id}`, this.pusher);\n                this.serverToUserChannel.bind_global((eventName, data)=>{\n                    if (eventName.indexOf(\"pusher_internal:\") === 0 || eventName.indexOf(\"pusher:\") === 0) {\n                        return;\n                    }\n                    this.emit(eventName, data);\n                });\n                ensure_subscribed(this.serverToUserChannel);\n            }\n            _cleanup() {\n                this.user_data = null;\n                if (this.serverToUserChannel) {\n                    this.serverToUserChannel.unbind_all();\n                    this.serverToUserChannel.disconnect();\n                    this.serverToUserChannel = null;\n                }\n                if (this.signin_requested) {\n                    this._signinDoneResolve();\n                }\n            }\n            _newSigninPromiseIfNeeded() {\n                if (!this.signin_requested) {\n                    return;\n                }\n                if (this.signinDonePromise && !this.signinDonePromise.done) {\n                    return;\n                }\n                const { promise, resolve, reject: _ } = flat_promise();\n                promise.done = false;\n                const setDone = ()=>{\n                    promise.done = true;\n                };\n                promise.then(setDone).catch(setDone);\n                this.signinDonePromise = promise;\n                this._signinDoneResolve = resolve;\n            }\n        }\n        // CONCATENATED MODULE: ./src/core/pusher.ts\n        class pusher_Pusher {\n            static ready() {\n                pusher_Pusher.isReady = true;\n                for(var i = 0, l = pusher_Pusher.instances.length; i < l; i++){\n                    pusher_Pusher.instances[i].connect();\n                }\n            }\n            static getClientFeatures() {\n                return keys(filterObject({\n                    ws: node_runtime.Transports.ws\n                }, function(t) {\n                    return t.isSupported({});\n                }));\n            }\n            constructor(app_key, options){\n                checkAppKey(app_key);\n                validateOptions(options);\n                this.key = app_key;\n                this.options = options;\n                this.config = getConfig(this.options, this);\n                this.channels = factory.createChannels();\n                this.global_emitter = new dispatcher_Dispatcher();\n                this.sessionID = node_runtime.randomInt(1000000000);\n                this.timeline = new timeline_Timeline(this.key, this.sessionID, {\n                    cluster: this.config.cluster,\n                    features: pusher_Pusher.getClientFeatures(),\n                    params: this.config.timelineParams || {},\n                    limit: 50,\n                    level: timeline_level.INFO,\n                    version: defaults.VERSION\n                });\n                if (this.config.enableStats) {\n                    this.timelineSender = factory.createTimelineSender(this.timeline, {\n                        host: this.config.statsHost,\n                        path: \"/timeline/v2/\" + node_runtime.TimelineTransport.name\n                    });\n                }\n                var getStrategy = (options)=>{\n                    return node_runtime.getDefaultStrategy(this.config, options, strategy_builder_defineTransport);\n                };\n                this.connection = factory.createConnectionManager(this.key, {\n                    getStrategy: getStrategy,\n                    timeline: this.timeline,\n                    activityTimeout: this.config.activityTimeout,\n                    pongTimeout: this.config.pongTimeout,\n                    unavailableTimeout: this.config.unavailableTimeout,\n                    useTLS: Boolean(this.config.useTLS)\n                });\n                this.connection.bind(\"connected\", ()=>{\n                    this.subscribeAll();\n                    if (this.timelineSender) {\n                        this.timelineSender.send(this.connection.isUsingTLS());\n                    }\n                });\n                this.connection.bind(\"message\", (event)=>{\n                    var eventName = event.event;\n                    var internal = eventName.indexOf(\"pusher_internal:\") === 0;\n                    if (event.channel) {\n                        var channel = this.channel(event.channel);\n                        if (channel) {\n                            channel.handleEvent(event);\n                        }\n                    }\n                    if (!internal) {\n                        this.global_emitter.emit(event.event, event.data);\n                    }\n                });\n                this.connection.bind(\"connecting\", ()=>{\n                    this.channels.disconnect();\n                });\n                this.connection.bind(\"disconnected\", ()=>{\n                    this.channels.disconnect();\n                });\n                this.connection.bind(\"error\", (err)=>{\n                    logger.warn(err);\n                });\n                pusher_Pusher.instances.push(this);\n                this.timeline.info({\n                    instances: pusher_Pusher.instances.length\n                });\n                this.user = new user_UserFacade(this);\n                if (pusher_Pusher.isReady) {\n                    this.connect();\n                }\n            }\n            switchCluster(options) {\n                const { appKey, cluster } = options;\n                this.key = appKey;\n                this.options = Object.assign(Object.assign({}, this.options), {\n                    cluster\n                });\n                this.config = getConfig(this.options, this);\n                this.connection.switchCluster(this.key);\n            }\n            channel(name) {\n                return this.channels.find(name);\n            }\n            allChannels() {\n                return this.channels.all();\n            }\n            connect() {\n                this.connection.connect();\n                if (this.timelineSender) {\n                    if (!this.timelineSenderTimer) {\n                        var usingTLS = this.connection.isUsingTLS();\n                        var timelineSender = this.timelineSender;\n                        this.timelineSenderTimer = new timers_PeriodicTimer(60000, function() {\n                            timelineSender.send(usingTLS);\n                        });\n                    }\n                }\n            }\n            disconnect() {\n                this.connection.disconnect();\n                if (this.timelineSenderTimer) {\n                    this.timelineSenderTimer.ensureAborted();\n                    this.timelineSenderTimer = null;\n                }\n            }\n            bind(event_name, callback, context) {\n                this.global_emitter.bind(event_name, callback, context);\n                return this;\n            }\n            unbind(event_name, callback, context) {\n                this.global_emitter.unbind(event_name, callback, context);\n                return this;\n            }\n            bind_global(callback) {\n                this.global_emitter.bind_global(callback);\n                return this;\n            }\n            unbind_global(callback) {\n                this.global_emitter.unbind_global(callback);\n                return this;\n            }\n            unbind_all(callback) {\n                this.global_emitter.unbind_all();\n                return this;\n            }\n            subscribeAll() {\n                var channelName;\n                for(channelName in this.channels.channels){\n                    if (this.channels.channels.hasOwnProperty(channelName)) {\n                        this.subscribe(channelName);\n                    }\n                }\n            }\n            subscribe(channel_name) {\n                var channel = this.channels.add(channel_name, this);\n                if (channel.subscriptionPending && channel.subscriptionCancelled) {\n                    channel.reinstateSubscription();\n                } else if (!channel.subscriptionPending && this.connection.state === \"connected\") {\n                    channel.subscribe();\n                }\n                return channel;\n            }\n            unsubscribe(channel_name) {\n                var channel = this.channels.find(channel_name);\n                if (channel && channel.subscriptionPending) {\n                    channel.cancelSubscription();\n                } else {\n                    channel = this.channels.remove(channel_name);\n                    if (channel && channel.subscribed) {\n                        channel.unsubscribe();\n                    }\n                }\n            }\n            send_event(event_name, data, channel) {\n                return this.connection.send_event(event_name, data, channel);\n            }\n            shouldUseTLS() {\n                return this.config.useTLS;\n            }\n            signin() {\n                this.user.signin();\n            }\n        }\n        pusher_Pusher.instances = [];\n        pusher_Pusher.isReady = false;\n        pusher_Pusher.logToConsole = false;\n        pusher_Pusher.Runtime = node_runtime;\n        pusher_Pusher.ScriptReceivers = node_runtime.ScriptReceivers;\n        pusher_Pusher.DependenciesReceivers = node_runtime.DependenciesReceivers;\n        pusher_Pusher.auth_callbacks = node_runtime.auth_callbacks;\n        /* harmony default export */ var core_pusher = pusher_Pusher;\n        function checkAppKey(key) {\n            if (key === null || key === undefined) {\n                throw \"You must pass your app key when you instantiate Pusher.\";\n            }\n        }\n        node_runtime.setup(pusher_Pusher);\n        // EXTERNAL MODULE: ./node_modules/tweetnacl/nacl-fast.js\n        var nacl_fast = __nested_webpack_require_266482__(20);\n        // CONCATENATED MODULE: ./src/core/pusher-with-encryption.ts\n        class pusher_with_encryption_PusherWithEncryption extends core_pusher {\n            constructor(app_key, options){\n                core_pusher.logToConsole = pusher_with_encryption_PusherWithEncryption.logToConsole;\n                core_pusher.log = pusher_with_encryption_PusherWithEncryption.log;\n                validateOptions(options);\n                options.nacl = nacl_fast;\n                super(app_key, options);\n            }\n        }\n    /***/ }\n]); //# sourceMappingURL=pusher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pusher-js/dist/node/pusher.js\n");

/***/ })

};
;